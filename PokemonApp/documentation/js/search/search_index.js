var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/ApiConfiguration.html",[0,1.143,1,1.359]],["body/injectables/ApiConfiguration.html",[0,2.004,1,2.384,2,2.677,3,0.345,4,0.345,5,0.345,6,3.979,7,3.365,8,1.102,9,4.584,10,3.166,11,0.406,12,0.891,13,2.205,14,0.345,15,0.034,16,1.049,17,1.429,18,1.312,19,0.677,20,4.653,21,0.833,22,1.556,23,2.982,24,2.016,25,0.48,26,0.287,27,1.204,28,3.876,29,0.406,30,2.677,31,0.024,32,0.028,33,0.024]],["title/interfaces/ApiConfigurationParams.html",[29,0.274,30,1.806]],["body/interfaces/ApiConfigurationParams.html",[0,2.009,1,2.025,3,0.347,4,0.347,5,0.347,6,3.38,7,3.38,8,1.107,9,3.894,10,2.69,11,0.408,12,0.893,13,2.253,14,0.347,15,0.034,16,1.086,21,0.837,22,1.563,23,2.996,24,2.025,25,0.482,26,0.288,27,1.427,28,4.597,29,0.408,30,3.175,31,0.024,32,0.028,33,0.024,34,1.855,35,0.893]],["title/modules/ApiModule.html",[36,1.806,37,2.012]],["body/modules/ApiModule.html",[1,2.642,3,0.289,4,0.289,5,0.289,8,0.923,10,3.118,14,0.289,15,0.034,19,0.567,21,1.092,22,1.303,25,0.34,26,0.24,27,1.008,30,3.278,31,0.02,32,0.025,33,0.02,35,0.922,36,3.118,37,4.069,38,2.242,39,2.242,40,2.03,41,3.57,42,2.03,43,4.119,44,3.57,45,3.246,46,3.246,47,3.455,48,3.849,49,3.57,50,2.242,51,2.818,52,3.897,53,4.112,54,4.112,55,1.303,56,4.112,57,3.897,58,4.936,59,3.897,60,0.698,61,1.959,62,1.197,63,5.418,64,3.897,65,3.897,66,3.246,67,4.514,68,4.936,69,3.57,70,1.303,71,2.498,72,3.897,73,4.112,74,3.897,75,3.246,76,1.197,77,3.897,78,3.897,79,1.099,80,4.936,81,1.651,82,4.936,83,1.516,84,3.897,85,3.897,86,3.897,87,1.419,88,2.841,89,3.897,90,3.246,91,3.246,92,3.897,93,1.546,94,3.897]],["title/injectables/ApiService.html",[0,1.143,95,2.269]],["body/injectables/ApiService.html",[0,2.066,2,2.821,3,0.364,4,0.364,5,0.364,15,0.033,19,0.713,21,0.878,22,1.639,23,3.142,24,2.123,25,0.428,26,0.302,31,0.025,32,0.029,33,0.025,79,1.688,95,4.102,96,4.084,97,4.902]],["title/components/AppComponent.html",[98,1.488,99,1.488]],["body/components/AppComponent.html",[3,0.329,4,0.329,5,0.329,11,0.388,12,0.866,14,0.329,15,0.034,16,0.795,17,1.364,18,1.252,19,0.646,21,0.795,22,1.485,24,2.318,25,0.388,26,0.274,31,0.023,32,0.028,33,0.023,40,2.313,60,0.958,98,2.723,99,2.827,100,3.43,101,3.211,102,3.211,103,3.211,104,3.211,105,3.7,106,3.211,107,4.413,108,3.912,109,3.87,110,5.744,111,3.87,112,5.352,113,4.786,114,4.458,115,4.441,116,3.87,117,1.79,118,3.211,119,4.312,120,3.211,121,3.211,122,2.105,123,3.211,124,2.105,125,3.211,126,3.211,127,3.211]],["title/modules/AppModule.html",[36,1.806,88,1.806]],["body/modules/AppModule.html",[3,0.318,4,0.318,5,0.318,15,0.034,21,1.115,22,1.434,25,0.374,26,0.264,31,0.022,32,0.027,33,0.022,36,2.468,38,2.468,39,2.468,40,2.234,41,4.092,42,3.07,43,3.789,44,3.102,49,3.789,50,2.468,51,3.102,67,4.366,70,1.434,75,3.574,88,3.683,91,4.366,99,3.047,122,2.915,124,2.915,128,3.574,129,3.574,130,3.574,131,4.29,132,5.24,133,3.574,134,2.468,135,4.29,136,4.29,137,5.24,138,5.24,139,2.468,140,2.75,141,3.574]],["title/classes/AppPage.html",[26,0.193,142,2.269]],["body/classes/AppPage.html",[3,0.349,4,0.349,5,0.349,11,0.41,15,0.033,19,0.806,21,0.842,24,2.037,25,0.41,26,0.29,31,0.024,32,0.028,33,0.024,55,1.852,62,1.701,76,1.701,117,1.573,134,2.707,142,4.005,143,2.037,144,3.918,145,6.077,146,6.077,147,4.703,148,6.281,149,4.703,150,4.703,151,4.703,152,4.703,153,1.867,154,4.703]],["title/injectables/BaseService.html",[0,1.143,155,2.012]],["body/injectables/BaseService.html",[0,1.823,1,2.487,2,2.293,3,0.296,4,0.296,5,0.296,8,0.944,10,2.293,11,0.348,12,0.81,13,2.154,14,0.406,15,0.034,16,1.097,17,1.224,18,1.124,19,0.836,21,0.98,22,1.332,24,2.487,25,0.348,26,0.337,27,1.295,31,0.021,32,0.026,33,0.021,35,0.81,54,4.17,60,0.896,62,1.764,69,4.152,70,1.332,71,3.509,76,1.224,79,1.412,81,1.831,87,1.823,155,3.209,156,4.929,157,3.319,158,1.993,159,4.56,160,5.006,161,3.319,162,3.984,163,4.17,164,4.17,165,3.984,166,3.984,167,3.984,168,2.279,169,5.742,170,5.03,171,2.172,172,5.006,173,5.006,174,5.006,175,3.984,176,3.984,177,2.169,178,1.451,179,5.006,180,5.006,181,3.984,182,3.984]],["title/interfaces/Count.html",[29,0.274,183,2.012]],["body/interfaces/Count.html",[3,0.365,4,0.365,5,0.365,11,0.429,12,0.92,14,0.365,15,0.032,25,0.429,29,0.429,31,0.025,32,0.029,33,0.025,34,1.952,35,0.92,183,4.066,184,4.097,185,3.123]],["title/classes/HeaderParameter.html",[26,0.193,186,1.245]],["body/classes/HeaderParameter.html",[3,0.126,4,0.126,5,0.126,8,0.401,11,0.148,12,0.438,13,0.616,14,0.375,15,0.034,16,1.106,17,0.52,18,1.786,19,0.655,21,0.303,25,0.148,26,0.291,27,1.269,29,0.148,31,0.009,32,0.014,33,0.009,35,0.547,55,0.904,60,0.929,61,1.874,62,0.831,70,0.566,76,1.76,79,0.763,81,1.13,83,1.627,87,0.616,93,0.671,117,0.566,143,0.733,153,1.674,158,1.405,168,1.34,171,0.671,177,1.671,178,1.405,186,1.073,187,1.34,188,0.671,189,2.387,190,1.827,191,1.829,192,1.671,193,2.102,194,2.554,195,2,196,1.733,197,1.829,198,2.102,199,1.692,200,2.473,201,2.443,202,1.282,203,2.557,204,1.692,205,1.785,206,1.282,207,2.326,208,1.223,209,1.282,210,1.282,211,2.239,212,0.802,213,0.802,214,0.802,215,1.463,216,0.802,217,0.802,218,1.282,219,0.802,220,0.985,221,0.671,222,0.802,223,0.802,224,0.802,225,0.802,226,0.802,227,0.802,228,0.802,229,0.802,230,2.406,231,1.073,232,0.802,233,0.802,234,0.733,235,1.282,236,1.038,237,0.802,238,0.671,239,1.282,240,1.282,241,0.802,242,2.326,243,2.521,244,2.557,245,2.326,246,2.191,247,1.554,248,1.282,249,0.802,250,2,251,1.785,252,1.554,253,1.601,254,2.597,255,1.601,256,0.802,257,0.802,258,1.282,259,1.282,260,0.802,261,1.282,262,0.733,263,2.191,264,0.671,265,1.601,266,1.282,267,1.073,268,0.802,269,2.512,270,2.326,271,0.802,272,0.802,273,0.802,274,0.802,275,0.802,276,0.802,277,0.802,278,0.802,279,1.829,280,0.802,281,0.802,282,0.802,283,1.282,284,1.282,285,0.802,286,0.733,287,1.601,288,0.733,289,0.802,290,0.802,291,0.802,292,0.802,293,0.802,294,0.802,295,1.601,296,0.671,297,1.829,298,0.566,299,0.802,300,1.282,301,1.829,302,1.829,303,1.282,304,0.802,305,0.802,306,1.601,307,0.802,308,0.802,309,1.601,310,1.601,311,0.802,312,1.282,313,0.802,314,0.733,315,0.802,316,0.802,317,0.802,318,0.802,319,0.802,320,0.802,321,0.802,322,0.802,323,1.282,324,0.802,325,0.733,326,0.802,327,0.616,328,0.802,329,1.463,330,0.802,331,0.802,332,0.802,333,0.802,334,0.802,335,0.671,336,0.802,337,0.802,338,0.802,339,0.802,340,0.802,341,0.802,342,0.802,343,0.802,344,0.802,345,0.985,346,0.802,347,0.802,348,1.282,349,0.733,350,1.601,351,2.133,352,0.802,353,0.802,354,0.802,355,0.802,356,0.802,357,1.463,358,2.326,359,1.601,360,1.282,361,0.802,362,2,363,0.802,364,0.802,365,0.802,366,0.802,367,1.829,368,2.133,369,0.802,370,0.802,371,0.802,372,0.802,373,0.802,374,0.802,375,0.671,376,0.802,377,0.438,378,1.171,379,0.802,380,0.671,381,1.171,382,0.733,383,0.733,384,0.802,385,0.802,386,0.802,387,0.802,388,0.802,389,0.802,390,1.282,391,0.802,392,0.802,393,0.802,394,0.802,395,0.802,396,0.802,397,0.802,398,0.802,399,0.802,400,1.282,401,0.802,402,0.802,403,0.802,404,0.802,405,0.802,406,0.802,407,0.802,408,0.802,409,0.802]],["title/components/ModalComponent.html",[98,1.488,122,1.488]],["body/components/ModalComponent.html",[3,0.266,4,0.266,5,0.266,11,0.313,12,0.757,14,0.444,15,0.033,19,0.803,21,0.837,22,1.198,25,0.313,26,0.221,27,0.927,31,0.018,32,0.024,33,0.018,35,0.58,40,1.866,42,1.866,55,1.564,60,1.134,62,1.1,79,1.01,98,2.468,99,1.699,100,2.998,101,2.591,102,2.591,103,2.591,104,2.591,106,2.591,107,4.141,108,3.67,109,3.382,111,3.382,116,3.382,117,1.564,118,2.591,119,3.991,120,2.591,121,2.591,122,2.617,123,2.591,124,1.699,125,2.591,126,2.591,127,2.591,139,2.062,140,2.297,178,1.703,193,1.856,221,1.856,238,1.422,377,1.21,410,2.985,411,4.338,412,3.896,413,5.207,414,4.677,415,5.519,416,4.598,417,4.677,418,3.583,419,5.726,420,4.677,421,3.583,422,3.583,423,3.896,424,3.583,425,4.677,426,3.583,427,4.677,428,4.677,429,2.617,430,4.677,431,2.436,432,4.677,433,4.677,434,2.436,435,4.677,436,2.436,437,5.519,438,4.677,439,5.519,440,4.677,441,2.436,442,4.677,443,4.677,444,2.436,445,4.677,446,5.519,447,3.896,448,4.677,449,4.677,450,4.677,451,4.677,452,4.677,453,2.436,454,4.677,455,2.436,456,4.677,457,2.875,458,4.677,459,5.519,460,5.519,461,5.519,462,5.519,463,4.677,464,4.677,465,3.583]],["title/interfaces/NewPokemon.html",[29,0.274,466,2.012]],["body/interfaces/NewPokemon.html",[3,0.284,4,0.284,5,0.284,8,0.908,11,0.334,12,0.791,14,0.483,15,0.034,16,1.101,19,0.558,25,0.334,29,0.334,31,0.02,32,0.025,33,0.02,34,1.521,35,1.059,60,1.014,113,3.193,185,3.235,236,1.651,247,1.945,252,1.5,377,1.464,429,1.817,431,2.949,434,2.949,436,2.949,441,2.949,444,2.949,453,2.949,455,2.949,457,2.949,466,3.446,467,4.069,468,3.193,469,2.771,470,3.833,471,2.771,472,3.833,473,3.258,474,3.258,475,2.949,476,3.258,477,2.457,478,3.833,479,2.664]],["title/classes/Parameter.html",[26,0.193,189,1.245]],["body/classes/Parameter.html",[3,0.127,4,0.127,5,0.127,8,0.404,11,0.149,12,0.441,13,0.622,14,0.365,15,0.034,16,1.112,17,0.524,18,1.787,19,0.617,21,0.306,25,0.149,26,0.303,27,1.226,29,0.149,31,0.009,32,0.014,33,0.009,35,0.441,55,0.911,60,0.908,61,1.881,62,0.524,70,0.571,76,1.763,79,0.768,81,0.911,83,1.631,87,0.992,93,0.677,117,0.571,143,0.739,153,1.682,158,1.412,168,1.348,171,0.677,177,1.68,178,1.412,186,0.677,187,1.792,188,0.677,189,2.343,190,1.68,191,1.611,192,1.472,193,2.108,194,2.558,195,1.611,196,1.746,197,1.839,198,2.108,202,0.809,203,2.405,205,1.682,206,1.291,207,2.333,209,1.291,210,1.291,211,2.247,212,0.809,213,0.809,214,0.809,215,1.472,216,0.809,217,0.809,218,1.291,219,0.809,220,0.992,221,0.677,222,0.809,223,0.809,224,0.809,225,0.809,226,0.809,227,0.809,228,0.809,229,0.809,230,2.409,231,1.081,232,0.809,233,0.809,234,0.739,235,1.291,236,1.302,237,0.809,238,0.677,239,1.839,240,1.839,241,0.809,242,2.333,243,2.525,244,2.563,245,2.333,246,2.198,247,1.558,248,1.291,249,0.809,250,2.009,251,1.792,252,1.558,253,1.611,254,2.602,255,1.611,256,0.809,257,0.809,258,1.291,259,1.291,260,0.809,261,1.291,262,0.739,263,2.198,264,0.677,265,1.611,266,1.291,267,1.081,268,0.809,269,2.518,270,2.333,271,0.809,272,0.809,273,0.809,274,0.809,275,0.809,276,0.809,277,0.809,278,0.809,279,1.839,280,0.809,281,0.809,282,0.809,283,1.291,284,1.291,285,0.809,286,0.739,287,1.611,288,0.739,289,0.809,290,0.809,291,0.809,292,0.809,293,0.809,294,0.809,295,1.611,296,0.677,297,1.839,298,0.571,299,0.809,300,1.291,301,1.839,302,1.839,303,1.291,304,0.809,305,0.809,306,1.611,307,0.809,308,0.809,309,1.611,310,1.611,311,0.809,312,1.291,313,0.809,314,0.739,315,0.809,316,0.809,317,0.809,318,0.809,319,0.809,320,0.809,321,0.809,322,0.809,323,1.291,324,0.809,325,0.739,326,0.809,327,0.622,328,0.809,329,1.472,330,0.809,331,0.809,332,0.809,333,0.809,334,0.809,335,0.677,336,0.809,337,0.809,338,0.809,339,0.809,340,0.809,341,0.809,342,0.809,343,0.809,344,0.809,345,0.992,346,0.809,347,0.809,348,1.291,349,0.739,350,1.611,351,2.141,352,0.809,353,0.809,354,0.809,355,0.809,356,0.809,357,1.472,358,2.333,359,1.611,360,1.291,361,0.809,362,2.009,363,0.809,364,0.809,365,0.809,366,0.809,367,1.839,368,2.141,369,0.809,370,0.809,371,0.809,372,0.809,373,0.809,374,0.809,375,0.677,376,0.809,377,0.442,378,1.18,379,0.809,380,0.677,381,1.18,382,0.739,383,0.739,384,0.809,385,0.809,386,0.809,387,0.809,388,0.809,389,0.809,390,1.291,391,0.809,392,0.809,393,0.809,394,0.809,395,0.809,396,0.809,397,0.809,398,0.809,399,0.809,400,1.291,401,0.809,402,0.809,403,0.809,404,0.809,405,0.809,406,0.809,407,0.809,408,0.809,409,0.809,480,1.707,481,3.398,482,1.707]],["title/classes/ParameterCodec.html",[26,0.193,220,1.143]],["body/classes/ParameterCodec.html",[3,0.127,4,0.127,5,0.127,8,0.405,11,0.149,13,0.622,14,0.352,15,0.034,16,1.121,18,1.777,19,0.565,21,0.306,25,0.149,26,0.292,27,1.313,29,0.149,31,0.009,32,0.014,33,0.009,35,0.628,55,0.912,60,0.882,61,1.882,62,1.192,70,0.571,76,1.763,79,0.482,81,0.912,83,1.632,87,0.622,93,1.082,117,0.571,143,0.74,153,1.683,158,1.413,168,1.349,171,0.678,177,1.681,178,1.413,186,0.678,187,1.683,188,0.678,189,2.344,190,1.681,191,1.612,192,1.473,193,1.683,194,2.487,195,1.612,197,1.612,198,1.954,202,0.81,203,2.406,205,1.683,206,0.81,207,2.142,209,1.292,210,1.612,211,2.248,212,1.292,213,1.292,214,1.292,215,1.681,216,1.292,217,1.292,218,1.612,219,1.292,220,1.238,221,1.082,222,1.292,223,0.81,224,1.292,225,0.81,226,1.292,227,0.81,228,1.292,229,0.81,230,2.409,231,1.082,232,0.81,233,0.81,234,0.74,235,1.292,236,1.045,237,0.81,238,0.678,239,1.292,240,1.292,241,0.81,242,2.334,243,2.526,244,2.564,245,2.334,246,2.198,247,1.559,248,1.292,249,0.81,250,2.01,251,1.793,252,1.632,253,1.612,254,2.603,255,1.612,256,0.81,257,0.81,258,1.292,259,1.292,260,0.81,261,1.292,262,0.74,263,2.198,264,0.678,265,1.612,266,1.292,267,1.082,268,0.81,269,2.519,270,2.334,271,0.81,272,0.81,273,0.81,274,0.81,275,0.81,276,0.81,277,0.81,278,0.81,279,1.84,280,0.81,281,0.81,282,0.81,283,1.292,284,1.292,285,0.81,286,0.74,287,1.612,288,0.74,289,0.81,290,0.81,291,0.81,292,0.81,293,0.81,294,0.81,295,1.612,296,0.678,297,1.84,298,0.571,299,0.81,300,1.292,301,1.84,302,1.84,303,1.292,304,0.81,305,0.81,306,1.612,307,0.81,308,0.81,309,1.612,310,1.612,311,0.81,312,1.292,313,0.81,314,0.74,315,0.81,316,0.81,317,0.81,318,0.81,319,0.81,320,0.81,321,0.81,322,0.81,323,1.292,324,0.81,325,0.74,326,0.81,327,0.622,328,0.81,329,1.473,330,0.81,331,0.81,332,0.81,333,0.81,334,0.81,335,0.678,336,0.81,337,0.81,338,0.81,339,0.81,340,0.81,341,0.81,342,0.81,343,0.81,344,0.81,345,0.993,346,0.81,347,0.81,348,1.292,349,0.74,350,1.612,351,2.142,352,0.81,353,0.81,354,0.81,355,0.81,356,0.81,357,1.473,358,2.334,359,1.612,360,1.292,361,0.81,362,2.01,363,0.81,364,0.81,365,0.81,366,0.81,367,1.84,368,2.142,369,0.81,370,0.81,371,0.81,372,0.81,373,0.81,374,0.81,375,0.678,376,0.81,377,0.442,378,1.181,379,0.81,380,0.678,381,1.181,382,0.74,383,0.74,384,0.81,385,0.81,386,0.81,387,0.81,388,0.81,389,0.81,390,1.292,391,0.81,392,0.81,393,0.81,394,0.81,395,0.81,396,0.81,397,0.81,398,0.81,399,0.81,400,1.292,401,0.81,402,0.81,403,0.81,404,0.81,405,0.81,406,0.81,407,0.81,408,0.81,409,0.81,483,2.726,484,2.726,485,2.726,486,2.726,487,1.709,488,1.709,489,1.709,490,1.709]],["title/interfaces/ParameterOptions.html",[29,0.274,198,1.245]],["body/interfaces/ParameterOptions.html",[3,0.131,4,0.131,5,0.131,8,0.419,11,0.154,12,0.453,13,0.644,14,0.32,15,0.034,16,1.099,18,1.777,21,0.317,25,0.154,26,0.296,27,1.115,29,0.154,31,0.009,32,0.014,33,0.009,34,0.702,35,0.64,60,0.708,61,1.907,70,0.591,76,1.775,79,0.499,81,0.937,83,1.647,87,0.644,93,0.702,117,0.591,153,1.711,158,1.44,168,1.38,171,0.702,177,1.714,178,1.44,186,0.702,187,0.702,188,0.702,189,2.343,190,1.714,191,1.649,192,1.506,193,1.711,194,2.523,195,1.649,197,1.649,198,2.036,202,0.838,203,2.433,205,1.711,206,0.838,207,2.174,209,1.328,210,1.328,211,2.278,212,0.838,213,0.838,214,0.838,215,1.506,216,0.838,217,0.838,218,1.328,219,0.838,220,1.02,221,0.702,222,0.838,223,0.838,224,0.838,225,0.838,226,0.838,227,0.838,228,0.838,229,0.838,230,2.42,231,1.111,232,1.328,233,1.328,234,1.714,235,2.044,236,1.324,237,0.838,238,0.702,239,1.328,240,1.328,241,0.838,242,2.363,243,2.541,244,2.587,245,2.363,246,2.223,247,1.576,248,1.328,249,0.838,250,2.044,251,1.82,252,1.576,253,1.649,254,2.625,255,1.649,256,0.838,257,0.838,258,1.328,259,1.328,260,0.838,261,1.328,262,0.766,263,2.223,264,0.702,265,1.649,266,1.328,267,1.111,268,0.838,269,2.543,270,2.363,271,0.838,272,0.838,273,0.838,274,0.838,275,0.838,276,0.838,277,0.838,278,0.838,279,1.875,280,0.838,281,0.838,282,0.838,283,1.328,284,1.328,285,0.838,286,0.766,287,1.649,288,0.766,289,0.838,290,0.838,291,0.838,292,0.838,293,0.838,294,0.838,295,1.649,296,0.702,297,1.875,298,0.591,299,0.838,300,1.328,301,1.875,302,1.875,303,1.328,304,0.838,305,0.838,306,1.649,307,0.838,308,0.838,309,1.649,310,1.649,311,0.838,312,1.328,313,0.838,314,0.766,315,0.838,316,0.838,317,0.838,318,0.838,319,0.838,320,0.838,321,0.838,322,0.838,323,1.328,324,0.838,325,0.766,326,0.838,327,0.644,328,0.838,329,1.506,330,0.838,331,0.838,332,0.838,333,0.838,334,0.838,335,0.702,336,0.838,337,0.838,338,0.838,339,0.838,340,0.838,341,0.838,342,0.838,343,0.838,344,0.838,345,1.02,346,0.838,347,0.838,348,1.328,349,0.766,350,1.649,351,2.174,352,0.838,353,0.838,354,0.838,355,0.838,356,0.838,357,1.506,358,2.363,359,1.649,360,1.328,361,0.838,362,2.044,363,0.838,364,0.838,365,0.838,366,0.838,367,1.875,368,2.174,369,0.838,370,0.838,371,0.838,372,0.838,373,0.838,374,0.838,375,0.702,376,0.838,377,0.457,378,1.213,379,0.838,380,0.702,381,1.213,382,0.766,383,0.766,384,0.838,385,0.838,386,0.838,387,0.838,388,0.838,389,0.838,390,1.328,391,0.838,392,0.838,393,0.838,394,0.838,395,0.838,396,0.838,397,0.838,398,0.838,399,0.838,400,1.328,401,0.838,402,0.838,403,0.838,404,0.838,405,0.838,406,0.838,407,0.838,408,0.838,409,0.838]],["title/classes/PathParameter.html",[26,0.193,264,1.245]],["body/classes/PathParameter.html",[3,0.126,4,0.126,5,0.126,8,0.401,11,0.148,12,0.438,13,0.616,14,0.375,15,0.034,16,1.113,17,0.52,18,1.786,19,0.655,21,0.303,25,0.148,26,0.291,27,1.269,29,0.148,31,0.009,32,0.014,33,0.009,35,0.547,55,0.905,60,0.929,61,1.874,62,0.831,70,0.566,76,1.76,79,0.763,81,0.905,83,1.627,87,0.616,93,0.672,117,0.566,143,0.733,153,1.675,158,1.405,168,1.341,171,0.672,177,1.672,178,1.405,186,0.672,187,1.341,188,0.672,189,2.387,190,1.672,191,1.602,192,1.672,193,2.103,194,2.554,195,2.001,196,1.734,197,1.83,198,2.103,200,2.474,201,2.443,202,0.802,203,2.398,205,1.675,206,1.283,207,2.326,208,1.224,209,1.283,210,1.283,211,2.239,212,0.802,213,0.802,214,0.802,215,1.464,216,0.802,217,0.802,218,1.283,219,0.802,220,0.985,221,0.672,222,0.802,223,0.802,224,0.802,225,0.802,226,0.802,227,0.802,228,0.802,229,0.802,230,2.406,231,1.074,232,0.802,233,0.802,234,0.733,235,1.283,236,1.038,237,0.802,238,0.672,239,1.283,240,1.283,241,0.802,242,2.326,243,2.521,244,2.557,245,2.326,246,2.191,247,1.554,248,1.283,249,0.802,250,2.001,251,1.786,252,1.554,253,1.602,254,2.597,255,1.602,256,0.802,257,0.802,258,1.283,259,1.283,260,0.802,261,1.283,262,1.172,263,2.295,264,1.074,265,1.602,266,1.283,267,1.074,268,1.283,269,2.512,270,2.326,271,0.802,272,0.802,273,0.802,274,0.802,275,0.802,276,0.802,277,0.802,278,0.802,279,1.83,280,0.802,281,0.802,282,0.802,283,1.283,284,1.283,285,0.802,286,0.733,287,1.602,288,0.733,289,0.802,290,0.802,291,0.802,292,0.802,293,0.802,294,0.802,295,1.602,296,0.672,297,1.83,298,0.566,299,0.802,300,1.283,301,1.83,302,1.83,303,1.283,304,0.802,305,0.802,306,1.602,307,0.802,308,0.802,309,1.602,310,1.602,311,0.802,312,1.283,313,0.802,314,0.733,315,0.802,316,0.802,317,0.802,318,0.802,319,0.802,320,0.802,321,0.802,322,0.802,323,1.283,324,0.802,325,0.733,326,0.802,327,0.616,328,0.802,329,1.464,330,0.802,331,0.802,332,0.802,333,0.802,334,0.802,335,0.672,336,0.802,337,0.802,338,0.802,339,0.802,340,0.802,341,0.802,342,0.802,343,0.802,344,0.802,345,0.985,346,0.802,347,0.802,348,1.283,349,0.733,350,1.602,351,2.133,352,0.802,353,0.802,354,0.802,355,0.802,356,0.802,357,1.464,358,2.326,359,1.602,360,1.283,361,0.802,362,2.001,363,0.802,364,0.802,365,0.802,366,0.802,367,1.83,368,2.133,369,0.802,370,0.802,371,0.802,372,0.802,373,0.802,374,0.802,375,0.672,376,0.802,377,0.438,378,1.172,379,0.802,380,0.672,381,1.172,382,0.733,383,0.733,384,0.802,385,0.802,386,0.802,387,0.802,388,0.802,389,0.802,390,1.283,391,0.802,392,0.802,393,0.802,394,0.802,395,0.802,396,0.802,397,0.802,398,0.802,399,0.802,400,1.283,401,0.802,402,0.802,403,0.802,404,0.802,405,0.802,406,0.802,407,0.802,408,0.802,409,0.802,491,1.693,492,1.693]],["title/injectables/PingControllerService.html",[0,1.143,47,1.806]],["body/injectables/PingControllerService.html",[0,1.611,1,2.313,2,1.895,3,0.244,4,0.244,5,0.244,10,1.895,11,0.287,12,0.716,14,0.448,15,0.034,16,0.792,17,1.359,18,1.248,19,0.81,21,1.08,22,1.101,23,2.111,24,1.427,25,0.287,26,0.203,27,1.292,31,0.017,32,0.023,33,0.017,35,0.808,47,2.545,53,4.448,55,1.479,56,4.161,60,0.894,61,1.982,62,1.359,69,3.861,70,1.101,71,2.111,76,1.534,79,1.248,81,1.863,83,1.012,87,1.199,155,3.422,158,1.611,159,3.685,161,2.744,163,3.685,164,2.744,170,2.744,190,2.413,192,1.916,200,2.111,205,2.119,230,1.307,246,1.427,262,1.916,263,1.916,327,1.199,329,1.427,335,2.363,345,2.169,349,1.427,378,1.427,380,2.419,381,1.427,382,1.427,479,2.313,493,4.64,494,2.744,495,4.995,496,4.995,497,5.735,498,5.339,499,3.294,500,4.424,501,3.294,502,6.096,503,5.339,504,4.424,505,5.339,506,5.339,507,5.339,508,3.685,509,5.57,510,4.424,511,3.294,512,5.57,513,4.424,514,3.685,515,3.294,516,4.424,517,4.424,518,3.294,519,4.161,520,3.294,521,3.294,522,2.744,523,2.382,524,3.294,525,2.836,526,3.294,527,3.294,528,3.294,529,3.294,530,3.294,531,3.294,532,3.294,533,3.294,534,4.424,535,4.424,536,3.294,537,3.294]],["title/interfaces/PingResponse.html",[29,0.274,525,2.012]],["body/interfaces/PingResponse.html",[3,0.342,4,0.342,5,0.342,11,0.402,12,0.885,14,0.469,15,0.033,16,1.157,25,0.402,29,0.402,31,0.024,32,0.028,33,0.024,34,1.827,35,1.03,153,1.827,168,2.395,205,2.395,252,1.414,479,2.369,525,3.505,538,3.835,539,3.329,540,6.035,541,6.035]],["title/interfaces/Pokemon.html",[29,0.274,542,1.634]],["body/interfaces/Pokemon.html",[3,0.286,4,0.286,5,0.286,11,0.337,12,0.794,14,0.484,15,0.034,16,1.129,19,0.561,25,0.337,29,0.337,31,0.02,32,0.025,33,0.02,34,1.531,35,1.059,60,1.016,185,3.238,236,1.656,247,1.947,252,1.506,377,1.468,429,2.69,431,2.956,434,2.956,436,2.956,441,2.956,444,2.956,453,2.956,455,2.956,457,2.956,473,3.266,474,3.266,475,2.956,476,3.266,477,2.472,479,2.668,542,2.554,543,3.213,544,3.857]],["title/interfaces/PokemonPartial.html",[29,0.274,545,2.269]],["body/interfaces/PokemonPartial.html",[3,0.281,4,0.281,5,0.281,8,0.898,11,0.331,12,0.785,14,0.483,15,0.034,16,1.126,19,0.551,25,0.331,29,0.331,31,0.02,32,0.025,33,0.02,34,1.504,35,1.062,60,1.01,185,3.228,236,1.643,247,1.942,252,1.49,298,1.267,377,1.458,429,2.673,431,2.936,434,2.936,436,2.936,441,2.936,444,2.936,453,2.936,455,2.936,457,2.936,469,2.74,471,2.74,473,3.244,474,3.244,475,2.936,476,3.244,477,2.429,479,2.658,545,3.507,546,3.507,547,3.157,548,4.849,549,3.789]],["title/interfaces/PokemonWithRelations.html",[29,0.274,550,2.269]],["body/interfaces/PokemonWithRelations.html",[3,0.283,4,0.283,5,0.283,8,0.902,11,0.332,12,0.787,14,0.483,15,0.034,16,1.127,19,0.554,25,0.332,29,0.332,31,0.02,32,0.025,33,0.02,34,1.511,35,1.058,60,1.011,185,3.231,236,1.647,247,1.944,252,1.494,298,1.274,377,1.461,429,2.678,431,2.942,434,2.942,436,2.942,441,2.942,444,2.942,453,2.942,455,2.942,457,2.942,469,2.754,471,2.754,473,3.25,474,3.25,475,2.942,476,3.25,477,2.441,479,2.661,546,3.518,550,3.876,551,3.173,552,3.808,553,3.808]],["title/components/PokemonsComponent.html",[98,1.488,124,1.488]],["body/components/PokemonsComponent.html",[3,0.139,4,0.139,5,0.139,8,1.112,11,0.163,12,0.473,14,0.462,15,0.034,16,1.141,17,1.36,18,1.582,19,0.894,21,0.841,22,0.625,25,0.163,26,0.115,27,1.314,31,0.021,32,0.015,33,0.01,35,0.822,40,0.973,42,0.973,48,2.838,50,1.683,55,0.978,60,1.045,62,1.744,73,1.557,79,0.527,83,0.898,98,1.709,99,0.886,100,1.875,101,1.351,102,1.351,103,1.351,104,1.351,106,1.351,107,3.202,108,2.838,109,2.115,111,2.115,116,2.115,117,1.699,118,1.351,119,2.949,120,1.351,121,1.351,122,1.387,123,1.351,124,1.933,125,4.187,126,1.351,127,1.351,139,1.075,140,1.198,141,1.557,158,1.485,171,1.161,178,2.169,183,1.875,185,2.646,193,2.429,215,1.267,221,1.161,230,1.161,236,1.507,238,0.741,247,1.253,251,1.161,267,1.948,298,1.481,314,0.809,335,2.4,345,0.68,357,1.267,375,1.161,377,0.932,383,2.034,411,3.003,412,2.437,416,3.398,429,2.745,431,0.973,434,0.973,436,0.973,441,0.973,444,0.973,453,0.973,455,0.973,457,0.973,466,1.875,473,1.075,474,1.075,475,3.064,476,1.075,523,3.202,542,3.208,554,1.557,555,3.605,556,3.605,557,2.925,558,3.003,559,3.605,560,3.605,561,3.605,562,3.605,563,3.605,564,3.605,565,4.078,566,3.605,567,3.605,568,4.078,569,4.078,570,2.925,571,4.078,572,2.925,573,4.078,574,2.925,575,2.925,576,4.078,577,3.398,578,4.695,579,2.925,580,2.925,581,1.868,582,3.605,583,4.078,584,2.925,585,1.868,586,2.437,587,1.868,588,2.925,589,3.398,590,4.078,591,2.925,592,1.868,593,2.925,594,3.912,595,1.868,596,2.925,597,1.868,598,2.437,599,1.868,600,1.868,601,1.868,602,1.557,603,1.868,604,2.925,605,3.605,606,4.088,607,4.078,608,1.868,609,2.925,610,2.925,611,4.078,612,2.925,613,2.925,614,1.868,615,1.868,616,2.925,617,1.868,618,2.437,619,3.605,620,1.868,621,2.925,622,2.925,623,1.868,624,2.925,625,2.925,626,1.868,627,1.868,628,1.868,629,2.925,630,1.868,631,4.078,632,1.868,633,1.868,634,1.868,635,1.868,636,1.868,637,1.868,638,1.868,639,3.688,640,1.868,641,1.868,642,1.868,643,1.868,644,1.557,645,1.868,646,5.342,647,1.868,648,1.868,649,1.868,650,1.868,651,1.868,652,1.868,653,1.868,654,2.925,655,4.908,656,1.868,657,1.868,658,1.868,659,1.868,660,1.868,661,4.078,662,1.868,663,1.868,664,1.868,665,1.868,666,2.925,667,1.868,668,2.925,669,1.868,670,1.868,671,4.078,672,2.925,673,1.868,674,2.925,675,1.868,676,2.925,677,2.925,678,2.925,679,1.868,680,2.925,681,1.557,682,1.868,683,1.557,684,1.868,685,1.868,686,1.868,687,1.868,688,1.868,689,3.605,690,2.437,691,2.437,692,2.925,693,2.925,694,2.925,695,2.437,696,2.437,697,2.925,698,1.557,699,1.868,700,2.437,701,1.868,702,1.868,703,1.868,704,1.868,705,1.868,706,1.868,707,1.868]],["title/classes/QueryParameter.html",[26,0.193,296,1.245]],["body/classes/QueryParameter.html",[3,0.126,4,0.126,5,0.126,8,0.401,11,0.148,12,0.438,13,0.617,14,0.375,15,0.034,16,1.106,17,0.52,18,1.786,19,0.655,21,0.303,25,0.148,26,0.291,27,1.269,29,0.148,31,0.009,32,0.014,33,0.009,35,0.547,55,0.905,60,0.929,61,1.947,62,0.831,70,0.566,76,1.76,79,0.763,81,0.905,83,1.628,87,0.617,93,0.672,117,0.566,143,0.734,153,1.675,158,1.406,168,1.341,171,0.672,177,1.672,178,1.406,186,0.672,187,1.341,188,0.672,189,2.388,190,1.672,191,1.603,192,1.672,193,2.103,194,2.555,195,2.001,196,1.735,197,1.83,198,2.103,200,2.475,201,2.444,202,0.803,203,2.399,205,1.675,206,1.283,207,2.327,208,1.225,209,1.283,210,1.283,211,2.46,212,0.803,213,0.803,214,0.803,215,1.464,216,0.803,217,0.803,218,1.283,219,0.803,220,0.986,221,0.672,222,0.803,223,0.803,224,0.803,225,0.803,226,0.803,227,0.803,228,0.803,229,0.803,230,2.407,231,1.074,232,0.803,233,0.803,234,0.734,235,1.283,236,1.038,237,0.803,238,0.672,239,1.283,240,1.283,241,0.803,242,2.327,243,2.522,244,2.558,245,2.327,246,2.192,247,1.554,248,1.283,249,0.803,250,2.001,251,1.786,252,1.554,253,1.603,254,2.597,255,1.603,256,0.803,257,0.803,258,1.283,259,1.283,260,0.803,261,1.283,262,0.734,263,2.192,264,0.672,265,1.603,266,1.283,267,1.074,268,0.803,269,2.512,270,2.327,271,0.803,272,0.803,273,0.803,274,0.803,275,0.803,276,0.803,277,0.803,278,0.803,279,1.83,280,0.803,281,0.803,282,0.803,283,1.283,284,1.283,285,0.803,286,0.734,287,1.603,288,0.734,289,0.803,290,0.803,291,0.803,292,0.803,293,0.803,294,0.803,295,1.83,296,1.074,297,1.83,298,0.566,299,1.283,300,1.283,301,1.83,302,1.83,303,1.283,304,0.803,305,0.803,306,1.603,307,0.803,308,0.803,309,1.603,310,1.603,311,0.803,312,1.283,313,0.803,314,0.734,315,0.803,316,0.803,317,0.803,318,0.803,319,0.803,320,0.803,321,0.803,322,0.803,323,1.283,324,0.803,325,0.734,326,0.803,327,0.617,328,0.803,329,1.464,330,0.803,331,0.803,332,0.803,333,0.803,334,0.803,335,0.672,336,0.803,337,0.803,338,0.803,339,0.803,340,0.803,341,0.803,342,0.803,343,0.803,344,0.803,345,0.986,346,0.803,347,0.803,348,1.283,349,0.734,350,1.603,351,2.134,352,0.803,353,0.803,354,0.803,355,0.803,356,0.803,357,1.464,358,2.327,359,1.603,360,1.283,361,0.803,362,2.001,363,0.803,364,0.803,365,0.803,366,0.803,367,1.83,368,2.134,369,0.803,370,0.803,371,0.803,372,0.803,373,0.803,374,0.803,375,0.672,376,0.803,377,0.438,378,1.172,379,0.803,380,0.672,381,1.172,382,0.734,383,0.734,384,0.803,385,0.803,386,0.803,387,0.803,388,0.803,389,0.803,390,1.283,391,0.803,392,0.803,393,0.803,394,0.803,395,0.803,396,0.803,397,0.803,398,0.803,399,0.803,400,1.283,401,0.803,402,0.803,403,0.803,404,0.803,405,0.803,406,0.803,407,0.803,408,0.803,409,0.803,708,1.694,709,1.694]],["title/classes/RequestBuilder.html",[26,0.193,327,1.143]],["body/classes/RequestBuilder.html",[3,0.115,4,0.115,5,0.115,8,0.366,11,0.135,12,0.407,13,1.333,14,0.425,15,0.034,16,1.122,17,1.125,18,1.786,19,0.801,21,0.277,25,0.135,26,0.281,27,1.423,29,0.135,31,0.008,32,0.013,33,0.008,35,0.794,55,0.841,60,0.973,61,1.806,62,1.327,70,0.517,76,1.727,79,0.709,81,1.063,83,1.668,87,0.563,93,0.614,117,0.517,143,0.67,153,1.806,158,1.916,168,1.261,171,0.998,177,2.055,178,1.727,186,0.614,187,2.209,188,0.614,189,2.318,190,1.746,191,2.047,192,1.377,193,2.047,194,2.559,195,1.507,197,1.507,198,2.155,202,0.733,203,2.325,205,1.599,206,0.733,207,2.047,209,1.507,210,1.192,211,2.158,212,0.733,213,0.733,214,0.733,215,1.377,216,0.733,217,0.733,218,1.192,219,0.733,220,0.916,221,0.614,222,0.733,223,0.733,224,0.733,225,0.733,226,0.733,227,0.733,228,0.733,229,0.733,230,2.377,231,0.998,232,0.733,233,0.733,234,0.67,235,1.192,236,0.976,237,0.733,238,0.614,239,1.192,240,1.192,241,0.733,242,2.249,243,2.498,244,2.495,245,2.249,246,2.125,247,1.507,248,1.192,249,0.733,250,1.91,251,1.714,252,1.507,253,1.507,254,2.537,255,1.507,256,0.733,257,0.733,258,1.192,259,1.192,260,0.733,261,1.192,262,0.67,263,2.279,264,0.614,265,1.507,266,1.192,267,0.998,268,0.733,269,2.446,270,2.249,271,0.733,272,0.733,273,0.733,274,0.733,275,0.733,276,0.733,277,0.733,278,0.733,279,1.736,280,0.733,281,0.733,282,0.733,283,1.192,284,1.192,285,0.733,286,0.67,287,1.507,288,0.67,289,0.733,290,0.733,291,0.733,292,0.733,293,0.733,294,0.733,295,2.047,296,0.614,297,1.736,298,0.517,299,0.733,300,1.192,301,1.736,302,1.736,303,1.192,304,0.733,305,0.733,306,1.507,307,0.733,308,0.733,309,1.507,310,1.507,311,0.733,312,1.192,313,0.733,314,0.67,315,0.733,316,0.733,317,0.733,318,0.733,319,0.733,320,0.733,321,0.733,322,0.733,323,1.192,324,1.192,325,1.586,326,1.192,327,0.916,328,1.507,329,1.871,330,1.507,331,1.507,332,1.507,333,1.507,334,1.91,335,1.599,336,1.192,337,0.733,338,0.733,339,1.192,340,0.733,341,0.733,342,1.192,343,0.733,344,0.733,345,1.467,346,1.192,347,1.192,348,1.736,349,1.089,350,1.507,351,2.047,352,0.733,353,0.733,354,0.733,355,0.733,356,0.733,357,1.377,358,2.249,359,1.507,360,1.192,361,0.733,362,1.91,363,0.733,364,0.733,365,0.733,366,0.733,367,1.736,368,2.047,369,0.733,370,0.733,371,0.733,372,1.192,373,0.733,374,1.192,375,0.998,376,1.192,377,0.4,378,1.089,379,0.733,380,0.614,381,1.089,382,0.67,383,0.67,384,0.733,385,0.733,386,0.733,387,0.733,388,0.733,389,0.733,390,1.192,391,0.733,392,0.733,393,0.733,394,0.733,395,0.733,396,0.733,397,0.733,398,0.733,399,0.733,400,1.192,401,0.733,402,0.733,403,0.733,404,0.733,405,0.733,406,0.733,407,0.733,408,0.733,409,0.733,479,1.089,508,3.051,710,2.515,711,1.546,712,2.515,713,1.546,714,1.546,715,1.546,716,1.546,717,1.546,718,1.546,719,1.546,720,1.546,721,1.546,722,1.288,723,1.546,724,1.546,725,1.546,726,1.546]],["title/coverage.html",[727,3.566]],["body/coverage.html",[0,2.133,1,1.671,5,0.286,6,3.547,7,3.547,14,0.286,15,0.034,26,0.375,29,0.537,30,2.22,31,0.02,32,0.025,33,0.02,47,2.22,48,2.472,83,1.185,95,2.789,96,3.213,98,2.557,99,1.829,105,3.213,122,1.829,124,1.829,142,2.789,144,3.213,155,2.472,156,3.213,157,3.213,183,2.472,184,3.213,186,1.531,187,2.444,188,2.444,189,1.531,198,1.531,220,1.405,231,1.531,264,1.531,288,2.538,296,1.531,327,1.405,410,3.213,466,2.472,467,3.213,468,3.213,493,3.213,494,4.086,525,2.472,538,3.213,539,2.789,542,2.009,543,3.213,545,2.789,546,3.547,547,3.213,550,2.789,551,3.213,554,3.213,639,5.281,727,3.213,728,3.213,729,3.857,730,3.857,731,3.857,732,5.393,733,5.393,734,4.904,735,4.904,736,4.904,737,5.393,738,3.857,739,4.904,740,4.904,741,3.857,742,5.393,743,5.393,744,3.857,745,3.857,746,3.857,747,3.857,748,3.857,749,3.857,750,5.859,751,3.857,752,3.857,753,3.857,754,3.857,755,3.857,756,3.857,757,3.213,758,4.086,759,3.213,760,4.086,761,3.213,762,3.213,763,3.857,764,3.213]],["title/dependencies.html",[39,2.172,765,2.622]],["body/dependencies.html",[15,0.034,22,1.568,31,0.024,32,0.028,33,0.024,39,2.698,42,2.879,133,4.605,134,3.181,139,2.698,140,3.006,522,3.906,542,2.442,644,3.906,766,4.689,767,6.385,768,4.689,769,4.689,770,4.689,771,4.689,772,4.689,773,4.689,774,4.689,775,4.689,776,4.689,777,4.689,778,4.689,779,4.689,780,4.689,781,4.689,782,4.689,783,4.689,784,4.689]],["title/index.html",[11,0.229,785,2.622,786,2.622]],["body/index.html",[3,0.274,4,0.274,14,0.274,15,0.031,17,1.135,24,2.42,31,0.025,32,0.025,33,0.019,50,2.746,60,0.662,66,3.08,71,2.37,76,1.135,90,3.08,93,1.467,108,3.059,114,3.08,134,2.746,139,3.214,194,1.601,234,1.601,286,1.601,325,2.565,375,1.894,377,0.956,423,3.08,429,1.753,447,3.08,475,3.213,514,4.403,523,3.451,542,1.925,558,3.976,577,3.976,586,3.08,589,3.08,594,3.976,598,3.08,602,3.08,606,3.976,618,3.08,681,3.976,683,3.08,690,3.976,691,3.976,695,3.08,696,3.08,698,3.08,700,3.08,728,3.976,764,3.08,787,5.286,788,3.697,789,3.697,790,3.697,791,3.697,792,3.697,793,3.697,794,4.773,795,3.697,796,3.697,797,3.697,798,6.222,799,3.697,800,3.697,801,3.697,802,5.286,803,3.697,804,4.773,805,3.697,806,3.697,807,3.697,808,3.697,809,3.697,810,3.697,811,4.773,812,5.286,813,3.697,814,4.773,815,5.286,816,3.697,817,3.697,818,5.286,819,3.697,820,5.286,821,3.697,822,4.773,823,3.697,824,3.697,825,3.697,826,3.697,827,3.697,828,3.697,829,3.697,830,3.697,831,3.697,832,3.697,833,3.08,834,4.773,835,5.286,836,5.586,837,3.697,838,4.773,839,4.773,840,4.773,841,4.773,842,3.697,843,4.773,844,5.286,845,3.697,846,5.783,847,3.697,848,3.697,849,3.697,850,3.697,851,4.773,852,3.08,853,3.697,854,4.773,855,5.586,856,3.697,857,3.697,858,3.697,859,3.697,860,3.697,861,3.697,862,3.697,863,3.697,864,3.697,865,3.697,866,4.773,867,3.697,868,3.697,869,3.697,870,3.697,871,3.697,872,4.773,873,3.697,874,3.697,875,3.697,876,3.697]],["title/modules.html",[38,2.463]],["body/modules.html",[15,0.03,31,0.026,32,0.03,33,0.026,37,3.226,38,2.896,88,2.896,134,3.314,877,5.76,878,5.76,879,5.76]],["title/overview.html",[880,3.566]],["body/overview.html",[1,2.517,2,2.625,15,0.033,31,0.023,32,0.028,33,0.023,34,1.81,36,2.625,37,4.073,38,2.625,39,2.625,40,2.376,41,3.299,42,2.376,43,3.299,44,3.299,45,3.8,46,3.8,47,3.344,48,3.725,49,3.933,50,2.625,51,3.299,88,3.68,99,2.989,100,2.924,122,2.755,124,2.755,128,3.8,129,3.8,130,3.8,143,1.976,852,3.8,880,3.8,881,4.561,882,4.561,883,4.561,884,4.561]],["title/miscellaneous/typealiases.html",[885,1.68,886,3.774]],["body/miscellaneous/typealiases.html",[11,0.432,14,0.367,15,0.031,19,0.72,31,0.025,32,0.029,33,0.025,81,2.01,243,2.144,345,1.802,380,1.964,519,4.753,539,4.126,722,4.753,885,3.173,887,4.95,888,4.95,889,4.95,890,4.95]],["title/miscellaneous/variables.html",[885,1.68,891,3.144]],["body/miscellaneous/variables.html",[11,0.407,14,0.45,15,0.034,17,1.861,18,1.709,31,0.024,32,0.028,33,0.024,83,1.431,187,1.849,188,2.186,220,1.697,231,2.186,251,2.186,267,1.849,298,1.842,479,2.019,757,3.882,758,5.048,759,3.882,760,3.882,761,4.588,762,4.588,833,4.588,885,2.987,891,3.882,892,5.508,893,4.66,894,4.66,895,4.66,896,4.66,897,4.66]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"injectables/BaseService.html":{},"interfaces/Count.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":639,"title":{},"body":{"components/PokemonsComponent.html":{},"coverage.html":{}}}],["0.10.2",{"_index":784,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":750,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":741,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":732,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":731,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":739,"title":{},"body":{"coverage.html":{}}}],["1.10.0",{"_index":782,"title":{},"body":{"dependencies.html":{}}}],["1/15",{"_index":738,"title":{},"body":{"coverage.html":{}}}],["1/16",{"_index":740,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":734,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":736,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":747,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":745,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":743,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":629,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["12/28",{"_index":756,"title":{},"body":{"coverage.html":{}}}],["14",{"_index":742,"title":{},"body":{"coverage.html":{}}}],["15px",{"_index":704,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["16",{"_index":744,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":852,"title":{},"body":{"index.html":{},"overview.html":{}}}],["2.0.1",{"_index":779,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":746,"title":{},"body":{"coverage.html":{}}}],["24/31",{"_index":754,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":881,"title":{},"body":{"overview.html":{}}}],["3.6.0",{"_index":778,"title":{},"body":{"dependencies.html":{}}}],["3/6",{"_index":751,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":735,"title":{},"body":{"coverage.html":{}}}],["37",{"_index":748,"title":{},"body":{"coverage.html":{}}}],["42",{"_index":755,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":882,"title":{},"body":{"overview.html":{}}}],["5.0.1",{"_index":776,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":733,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":737,"title":{},"body":{"coverage.html":{}}}],["6.5.4",{"_index":780,"title":{},"body":{"dependencies.html":{}}}],["6/16",{"_index":749,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":883,"title":{},"body":{"overview.html":{}}}],["77",{"_index":753,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":884,"title":{},"body":{"overview.html":{}}}],["9.1.1",{"_index":775,"title":{},"body":{"dependencies.html":{}}}],["9.1.11",{"_index":767,"title":{},"body":{"dependencies.html":{}}}],["9.1.13",{"_index":772,"title":{},"body":{"dependencies.html":{}}}],["9.1.8",{"_index":791,"title":{},"body":{"index.html":{}}}],["_bodycontent",{"_index":332,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["_bodycontenttype",{"_index":333,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["_header",{"_index":331,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["_path",{"_index":328,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["_query",{"_index":330,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["_rooturl",{"_index":159,"title":{},"body":{"injectables/BaseService.html":{},"injectables/PingControllerService.html":{}}}],["abstract",{"_index":237,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["accept",{"_index":378,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["access",{"_index":502,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["accessors",{"_index":160,"title":{},"body":{"injectables/BaseService.html":{}}}],["account",{"_index":292,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["activemodal",{"_index":415,"title":{},"body":{"components/ModalComponent.html":{}}}],["actual_component",{"_index":127,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["additionalprop1",{"_index":685,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["again",{"_index":856,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":887,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowing",{"_index":513,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["along",{"_index":346,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["already",{"_index":85,"title":{},"body":{"modules/ApiModule.html":{}}}],["amount",{"_index":448,"title":{},"body":{"components/ModalComponent.html":{}}}],["angular",{"_index":683,"title":{},"body":{"components/PokemonsComponent.html":{},"index.html":{}}}],["angular/animations",{"_index":766,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":768,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":70,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["angular/compiler",{"_index":769,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":22,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"injectables/BaseService.html":{},"components/ModalComponent.html":{},"injectables/PingControllerService.html":{},"components/PokemonsComponent.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":770,"title":{},"body":{"dependencies.html":{}}}],["angular/localize",{"_index":771,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":774,"title":{},"body":{"dependencies.html":{}}}],["api",{"_index":71,"title":{},"body":{"modules/ApiModule.html":{},"injectables/BaseService.html":{},"injectables/PingControllerService.html":{},"index.html":{}}}],["api/models/pokemon",{"_index":641,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["api/services/pokemon",{"_index":642,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["apiconfiguration",{"_index":1,"title":{"injectables/ApiConfiguration.html":{}},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"injectables/BaseService.html":{},"injectables/PingControllerService.html":{},"coverage.html":{},"overview.html":{}}}],["apiconfiguration.rooturl",{"_index":174,"title":{},"body":{"injectables/BaseService.html":{}}}],["apiconfigurationparams",{"_index":30,"title":{"interfaces/ApiConfigurationParams.html":{}},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"coverage.html":{}}}],["apimodule",{"_index":37,"title":{"modules/ApiModule.html":{}},"body":{"modules/ApiModule.html":{},"modules.html":{},"overview.html":{}}}],["apimodule.forroot",{"_index":28,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{}}}],["apiservice",{"_index":95,"title":{"injectables/ApiService.html":{}},"body":{"injectables/ApiService.html":{},"coverage.html":{}}}],["app",{"_index":108,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{},"index.html":{}}}],["app.component",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.html",{"_index":112,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":110,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":99,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["appear",{"_index":864,"title":{},"body":{"index.html":{}}}],["append",{"_index":195,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["append(headers",{"_index":202,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["append(params",{"_index":299,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["append(path",{"_index":268,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["appending",{"_index":233,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["application/json",{"_index":349,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["application/x",{"_index":353,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["appmodule",{"_index":88,"title":{"modules/AppModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apppage",{"_index":142,"title":{"classes/AppPage.html":{}},"body":{"classes/AppPage.html":{},"coverage.html":{}}}],["array",{"_index":247,"title":{},"body":{"classes/HeaderParameter.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["array.join(separator",{"_index":260,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["array.push(`${key}=${propval",{"_index":257,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["array.push(key",{"_index":258,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["array.push(propval",{"_index":259,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["arraybuffer",{"_index":384,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["arrays",{"_index":277,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["artifacts",{"_index":828,"title":{},"body":{"index.html":{}}}],["asc",{"_index":631,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["asc').subscribe(result",{"_index":673,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["asc/desc",{"_index":859,"title":{},"body":{"index.html":{}}}],["attacks",{"_index":457,"title":{},"body":{"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{}}}],["attk?.damage",{"_index":462,"title":{},"body":{"components/ModalComponent.html":{}}}],["attk?.name",{"_index":459,"title":{},"body":{"components/ModalComponent.html":{}}}],["attk?.type",{"_index":460,"title":{},"body":{"components/ModalComponent.html":{}}}],["automatically",{"_index":825,"title":{},"body":{"index.html":{}}}],["available",{"_index":854,"title":{},"body":{"index.html":{}}}],["base",{"_index":87,"title":{},"body":{"modules/ApiModule.html":{},"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["baseservice",{"_index":155,"title":{"injectables/BaseService.html":{}},"body":{"injectables/BaseService.html":{},"injectables/PingControllerService.html":{},"coverage.html":{}}}],["baseservice:17",{"_index":518,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["before",{"_index":800,"title":{},"body":{"index.html":{}}}],["between",{"_index":848,"title":{},"body":{"index.html":{}}}],["blob",{"_index":350,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["body",{"_index":345,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"miscellaneous/typealiases.html":{}}}],["body(value",{"_index":347,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["boolean",{"_index":236,"title":{},"body":{"classes/HeaderParameter.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["bootstrap",{"_index":42,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{},"dependencies.html":{},"overview.html":{}}}],["bootstrap/ng",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{},"dependencies.html":{}}}],["both",{"_index":286,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"index.html":{}}}],["browse",{"_index":879,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"classes/AppPage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{}}}],["browser.get(browser.baseurl",{"_index":151,"title":{},"body":{"classes/AppPage.html":{}}}],["browsermodule",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["bruno",{"_index":875,"title":{},"body":{"index.html":{}}}],["build",{"_index":325,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"index.html":{}}}],["build(options",{"_index":376,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["builder",{"_index":521,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["builder.ts",{"_index":188,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["builder.ts:10",{"_index":489,"title":{},"body":{"classes/ParameterCodec.html":{}}}],["builder.ts:117",{"_index":708,"title":{},"body":{"classes/QueryParameter.html":{}}}],["builder.ts:122",{"_index":709,"title":{},"body":{"classes/QueryParameter.html":{}}}],["builder.ts:14",{"_index":490,"title":{},"body":{"classes/ParameterCodec.html":{}}}],["builder.ts:176",{"_index":199,"title":{},"body":{"classes/HeaderParameter.html":{}}}],["builder.ts:18",{"_index":487,"title":{},"body":{"classes/ParameterCodec.html":{}}}],["builder.ts:181",{"_index":204,"title":{},"body":{"classes/HeaderParameter.html":{}}}],["builder.ts:200",{"_index":715,"title":{},"body":{"classes/RequestBuilder.html":{}}}],["builder.ts:201",{"_index":716,"title":{},"body":{"classes/RequestBuilder.html":{}}}],["builder.ts:202",{"_index":714,"title":{},"body":{"classes/RequestBuilder.html":{}}}],["builder.ts:203",{"_index":713,"title":{},"body":{"classes/RequestBuilder.html":{}}}],["builder.ts:204",{"_index":712,"title":{},"body":{"classes/RequestBuilder.html":{}}}],["builder.ts:207",{"_index":719,"title":{},"body":{"classes/RequestBuilder.html":{}}}],["builder.ts:208",{"_index":718,"title":{},"body":{"classes/RequestBuilder.html":{}}}],["builder.ts:209",{"_index":717,"title":{},"body":{"classes/RequestBuilder.html":{}}}],["builder.ts:215",{"_index":725,"title":{},"body":{"classes/RequestBuilder.html":{}}}],["builder.ts:22",{"_index":488,"title":{},"body":{"classes/ParameterCodec.html":{}}}],["builder.ts:222",{"_index":726,"title":{},"body":{"classes/RequestBuilder.html":{}}}],["builder.ts:229",{"_index":724,"title":{},"body":{"classes/RequestBuilder.html":{}}}],["builder.ts:236",{"_index":720,"title":{},"body":{"classes/RequestBuilder.html":{}}}],["builder.ts:286",{"_index":723,"title":{},"body":{"classes/RequestBuilder.html":{}}}],["builder.ts:302",{"_index":721,"title":{},"body":{"classes/RequestBuilder.html":{}}}],["builder.ts:39",{"_index":480,"title":{},"body":{"classes/Parameter.html":{}}}],["builder.ts:40",{"_index":481,"title":{},"body":{"classes/Parameter.html":{}}}],["builder.ts:50",{"_index":482,"title":{},"body":{"classes/Parameter.html":{}}}],["builder.ts:79",{"_index":491,"title":{},"body":{"classes/PathParameter.html":{}}}],["builder.ts:84",{"_index":492,"title":{},"body":{"classes/PathParameter.html":{}}}],["builds",{"_index":374,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["button",{"_index":558,"title":{},"body":{"components/PokemonsComponent.html":{},"index.html":{}}}],["cases",{"_index":275,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["change",{"_index":826,"title":{},"body":{"index.html":{}}}],["characteristic",{"_index":593,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["class",{"_index":26,"title":{"classes/AppPage.html":{},"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{}}}],["classes",{"_index":143,"title":{},"body":{"classes/AppPage.html":{},"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"overview.html":{}}}],["classification",{"_index":431,"title":{},"body":{"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{}}}],["cli",{"_index":789,"title":{},"body":{"index.html":{}}}],["click",{"_index":855,"title":{},"body":{"index.html":{}}}],["close",{"_index":464,"title":{},"body":{"components/ModalComponent.html":{}}}],["cluster_apimodule",{"_index":45,"title":{},"body":{"modules/ApiModule.html":{},"overview.html":{}}}],["cluster_apimodule_providers",{"_index":46,"title":{},"body":{"modules/ApiModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["code",{"_index":811,"title":{},"body":{"index.html":{}}}],["codec",{"_index":213,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["color",{"_index":867,"title":{},"body":{"index.html":{}}}],["column",{"_index":862,"title":{},"body":{"index.html":{}}}],["comma",{"_index":318,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["component",{"_index":98,"title":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{},"coverage.html":{}}}],["component_template",{"_index":120,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["components",{"_index":100,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{},"overview.html":{}}}],["config",{"_index":163,"title":{},"body":{"injectables/BaseService.html":{},"injectables/PingControllerService.html":{}}}],["configuration",{"_index":10,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"injectables/BaseService.html":{},"injectables/PingControllerService.html":{}}}],["configuration.ts",{"_index":7,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"coverage.html":{}}}],["configuration.ts:12",{"_index":20,"title":{},"body":{"injectables/ApiConfiguration.html":{}}}],["console.log(res",{"_index":666,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["const",{"_index":230,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["constrains",{"_index":890,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["constructor",{"_index":79,"title":{},"body":{"modules/ApiModule.html":{},"injectables/ApiService.html":{},"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["constructor(activemodal",{"_index":418,"title":{},"body":{"components/ModalComponent.html":{}}}],["constructor(config",{"_index":161,"title":{},"body":{"injectables/BaseService.html":{},"injectables/PingControllerService.html":{}}}],["constructor(name",{"_index":197,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["constructor(pokemonservice",{"_index":581,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["constructor(public",{"_index":238,"title":{},"body":{"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["constructor(rooturl",{"_index":711,"title":{},"body":{"classes/RequestBuilder.html":{}}}],["content",{"_index":153,"title":{},"body":{"classes/AppPage.html":{},"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"interfaces/PingResponse.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["contenttype",{"_index":348,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["context",{"_index":761,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["controller.service",{"_index":73,"title":{},"body":{"modules/ApiModule.html":{},"components/PokemonsComponent.html":{}}}],["controller.service.ts",{"_index":494,"title":{},"body":{"injectables/PingControllerService.html":{},"coverage.html":{}}}],["controller.service.ts:17",{"_index":499,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["controller.service.ts:28",{"_index":515,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["controller.service.ts:36",{"_index":511,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["controller.service.ts:60",{"_index":501,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["correctly",{"_index":214,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["corresponding",{"_index":289,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["count",{"_index":183,"title":{"interfaces/Count.html":{}},"body":{"interfaces/Count.html":{},"components/PokemonsComponent.html":{},"coverage.html":{}}}],["coverage",{"_index":727,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":586,"title":{},"body":{"components/PokemonsComponent.html":{},"index.html":{}}}],["createpokemon",{"_index":559,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["createpokemons",{"_index":568,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["current",{"_index":375,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"index.html":{}}}],["currentrecords",{"_index":560,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["custom",{"_index":212,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["damage",{"_index":461,"title":{},"body":{"components/ModalComponent.html":{}}}],["data",{"_index":357,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["database",{"_index":590,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["datapok",{"_index":619,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["datapok.name.tolowercase",{"_index":648,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["datapok.url",{"_index":649,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["date",{"_index":540,"title":{},"body":{"interfaces/PingResponse.html":{}}}],["declarations",{"_index":41,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"overview.html":{}}}],["decodekey",{"_index":483,"title":{},"body":{"classes/ParameterCodec.html":{}}}],["decodekey(key",{"_index":226,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["decodeuricomponent(key",{"_index":227,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["decodeuricomponent(value",{"_index":229,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["decodevalue",{"_index":484,"title":{},"body":{"classes/ParameterCodec.html":{}}}],["decodevalue(value",{"_index":228,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["deepobject",{"_index":307,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["default",{"_index":17,"title":{},"body":{"injectables/ApiConfiguration.html":{},"components/AppComponent.html":{},"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defaultexplode",{"_index":240,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["defaultstyle",{"_index":239,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["defined",{"_index":19,"title":{},"body":{"injectables/ApiConfiguration.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"components/AppComponent.html":{},"classes/AppPage.html":{},"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"miscellaneous/typealiases.html":{}}}],["defines",{"_index":232,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["delete",{"_index":588,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["deleteall",{"_index":569,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["dependencies",{"_index":39,"title":{"dependencies.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["depends",{"_index":792,"title":{},"body":{"index.html":{}}}],["desc",{"_index":674,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["desc').subscribe(result",{"_index":675,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["description",{"_index":8,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["desired",{"_index":598,"title":{},"body":{"components/PokemonsComponent.html":{},"index.html":{}}}],["details",{"_index":691,"title":{},"body":{"components/PokemonsComponent.html":{},"index.html":{}}}],["dev",{"_index":823,"title":{},"body":{"index.html":{}}}],["development",{"_index":821,"title":{},"body":{"index.html":{}}}],["directive",{"_index":118,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["directives",{"_index":126,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["directly",{"_index":172,"title":{},"body":{"injectables/BaseService.html":{}}}],["directory",{"_index":804,"title":{},"body":{"index.html":{}}}],["disable",{"_index":66,"title":{},"body":{"modules/ApiModule.html":{},"index.html":{}}}],["dist",{"_index":830,"title":{},"body":{"index.html":{}}}],["docs",{"_index":814,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":728,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doesn't",{"_index":506,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["dom",{"_index":103,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["downloads",{"_index":389,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["dynamic",{"_index":773,"title":{},"body":{"dependencies.html":{}}}],["e2e/src/app.po.ts",{"_index":144,"title":{},"body":{"classes/AppPage.html":{},"coverage.html":{}}}],["e2e/src/app.po.ts:4",{"_index":149,"title":{},"body":{"classes/AppPage.html":{}}}],["e2e/src/app.po.ts:8",{"_index":147,"title":{},"body":{"classes/AppPage.html":{}}}],["each",{"_index":279,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["element",{"_index":117,"title":{},"body":{"components/AppComponent.html":{},"classes/AppPage.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["element(by.css('app",{"_index":152,"title":{},"body":{"classes/AppPage.html":{}}}],["elementtarget",{"_index":610,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["encoded",{"_index":356,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["encodekey",{"_index":485,"title":{},"body":{"classes/ParameterCodec.html":{}}}],["encodekey(key",{"_index":222,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["encoder",{"_index":396,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["encodeuricomponent(key",{"_index":223,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["encodeuricomponent(p[0])}=${encodeuricomponent(p[1])}`).join",{"_index":364,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["encodeuricomponent(value",{"_index":225,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["encodevalue",{"_index":486,"title":{},"body":{"classes/ParameterCodec.html":{}}}],["encodevalue(value",{"_index":224,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["environment",{"_index":758,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error('apimodule",{"_index":84,"title":{},"body":{"modules/ApiModule.html":{}}}],["error('you",{"_index":89,"title":{},"body":{"modules/ApiModule.html":{}}}],["eslint",{"_index":65,"title":{},"body":{"modules/ApiModule.html":{}}}],["eventtarget",{"_index":605,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["evo?.id",{"_index":451,"title":{},"body":{"components/ModalComponent.html":{}}}],["evo?.name",{"_index":452,"title":{},"body":{"components/ModalComponent.html":{}}}],["evolution",{"_index":446,"title":{},"body":{"components/ModalComponent.html":{}}}],["evolutionrequirements",{"_index":473,"title":{},"body":{"interfaces/NewPokemon.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{}}}],["evolutions",{"_index":474,"title":{},"body":{"interfaces/NewPokemon.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{}}}],["ewefwef",{"_index":684,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["example",{"_index":504,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["except",{"_index":274,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["exclude",{"_index":472,"title":{},"body":{"interfaces/NewPokemon.html":{}}}],["execute",{"_index":838,"title":{},"body":{"index.html":{}}}],["expect",{"_index":507,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["expected",{"_index":379,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["explode",{"_index":235,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["export",{"_index":25,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"injectables/BaseService.html":{},"interfaces/Count.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["exports",{"_index":44,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"overview.html":{}}}],["extends",{"_index":192,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["fallback",{"_index":173,"title":{},"body":{"injectables/BaseService.html":{}}}],["false",{"_index":267,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"miscellaneous/variables.html":{}}}],["fast",{"_index":458,"title":{},"body":{"components/ModalComponent.html":{}}}],["favourite",{"_index":475,"title":{},"body":{"interfaces/NewPokemon.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"injectables/BaseService.html":{},"interfaces/Count.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{}}}],["files",{"_index":827,"title":{},"body":{"index.html":{}}}],["filter",{"_index":523,"title":{},"body":{"injectables/PingControllerService.html":{},"components/PokemonsComponent.html":{},"index.html":{}}}],["filter((r",{"_index":533,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["filterby",{"_index":570,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["filterby(type",{"_index":591,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["filterorder",{"_index":561,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["filters",{"_index":851,"title":{},"body":{"index.html":{}}}],["find",{"_index":689,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["flag",{"_index":832,"title":{},"body":{"index.html":{}}}],["fleerate",{"_index":444,"title":{},"body":{"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{}}}],["folder",{"_index":815,"title":{},"body":{"index.html":{}}}],["form",{"_index":297,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["format",{"_index":872,"title":{},"body":{"index.html":{}}}],["formdata",{"_index":367,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["formdata.append(key",{"_index":369,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["formdata.set(key",{"_index":371,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["formdatavalue",{"_index":710,"title":{},"body":{"classes/RequestBuilder.html":{}}}],["formdatavalue(value",{"_index":372,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["formvalue",{"_index":359,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["forroot",{"_index":57,"title":{},"body":{"modules/ApiModule.html":{}}}],["forroot(params",{"_index":58,"title":{},"body":{"modules/ApiModule.html":{}}}],["found",{"_index":624,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["full",{"_index":503,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["generate",{"_index":813,"title":{},"body":{"index.html":{}}}],["generated",{"_index":788,"title":{},"body":{"index.html":{}}}],["getpokemons",{"_index":571,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["getpokemonsbyid",{"_index":572,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["getpokemonsbyid(id",{"_index":596,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["getpokemonscount",{"_index":573,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["getpokemonswithpagination",{"_index":574,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["getpokemonswithpagination(position",{"_index":600,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["getrooturl",{"_index":166,"title":{},"body":{"injectables/BaseService.html":{}}}],["getting",{"_index":785,"title":{"index.html":{}},"body":{}}],["gettitletext",{"_index":145,"title":{},"body":{"classes/AppPage.html":{}}}],["global",{"_index":9,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{}}}],["go",{"_index":816,"title":{},"body":{"index.html":{}}}],["greeting",{"_index":541,"title":{},"body":{"interfaces/PingResponse.html":{}}}],["grey",{"_index":870,"title":{},"body":{"index.html":{}}}],["guide",{"_index":810,"title":{},"body":{"index.html":{}}}],["handle",{"_index":215,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["havepagination",{"_index":562,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["header",{"_index":191,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["header(name",{"_index":342,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["headerparam",{"_index":402,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["headerparam.append(httpheaders",{"_index":404,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["headerparameter",{"_index":186,"title":{"classes/HeaderParameter.html":{}},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{}}}],["headerparameter(name",{"_index":344,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["headers",{"_index":205,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"interfaces/PingResponse.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["headers.append(this.name",{"_index":323,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["height",{"_index":441,"title":{},"body":{"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{}}}],["helper",{"_index":324,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["here",{"_index":427,"title":{},"body":{"components/ModalComponent.html":{}}}],["html",{"_index":116,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["http",{"_index":81,"title":{},"body":{"modules/ApiModule.html":{},"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"miscellaneous/typealiases.html":{}}}],["http://127.0.0.1:8080",{"_index":819,"title":{},"body":{"index.html":{}}}],["http://localhost:3000",{"_index":164,"title":{},"body":{"injectables/BaseService.html":{},"injectables/PingControllerService.html":{}}}],["http://localhost:4200",{"_index":824,"title":{},"body":{"index.html":{}}}],["httpclient",{"_index":69,"title":{},"body":{"modules/ApiModule.html":{},"injectables/BaseService.html":{},"injectables/PingControllerService.html":{}}}],["httpclientmodule",{"_index":91,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{}}}],["httpheaders",{"_index":203,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["httpheaders.append('accept",{"_index":401,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["httpheaders.set('content",{"_index":405,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["httpparametercodec",{"_index":210,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["httpparams",{"_index":211,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["httprequest",{"_index":209,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["httprequest(this.method.touppercase",{"_index":407,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["httpresponse",{"_index":512,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["https://github.com/angular/angular/issues/18261",{"_index":219,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["https://github.com/angular/angular/issues/20575",{"_index":94,"title":{},"body":{"modules/ApiModule.html":{}}}],["i'm",{"_index":424,"title":{},"body":{"components/ModalComponent.html":{}}}],["i\\'m",{"_index":465,"title":{},"body":{"components/ModalComponent.html":{}}}],["id",{"_index":429,"title":{},"body":{"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"index.html":{}}}],["identifier",{"_index":729,"title":{},"body":{"coverage.html":{}}}],["idfind",{"_index":705,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["images",{"_index":644,"title":{},"body":{"components/PokemonsComponent.html":{},"dependencies.html":{}}}],["implements",{"_index":221,"title":{},"body":{"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["import",{"_index":21,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["imports",{"_index":75,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{}}}],["includerelations",{"_index":552,"title":{},"body":{"interfaces/PokemonWithRelations.html":{}}}],["index",{"_index":11,"title":{"index.html":{}},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"components/AppComponent.html":{},"classes/AppPage.html":{},"injectables/BaseService.html":{},"interfaces/Count.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index.html",{"_index":817,"title":{},"body":{"index.html":{}}}],["indexable",{"_index":477,"title":{},"body":{"interfaces/NewPokemon.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{}}}],["indicate",{"_index":868,"title":{},"body":{"index.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"injectables/BaseService.html":{},"interfaces/Count.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"index.html":{}}}],["information",{"_index":618,"title":{},"body":{"components/PokemonsComponent.html":{},"index.html":{}}}],["inherited",{"_index":200,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{}}}],["initial",{"_index":843,"title":{},"body":{"index.html":{}}}],["initialpagination",{"_index":563,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["injectable",{"_index":0,"title":{"injectables/ApiConfiguration.html":{},"injectables/ApiService.html":{},"injectables/BaseService.html":{},"injectables/PingControllerService.html":{}},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"injectables/ApiService.html":{},"injectables/BaseService.html":{},"injectables/PingControllerService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/ApiConfiguration.html":{},"injectables/ApiService.html":{},"injectables/BaseService.html":{},"injectables/PingControllerService.html":{},"overview.html":{}}}],["input",{"_index":423,"title":{},"body":{"components/ModalComponent.html":{},"index.html":{}}}],["inputs",{"_index":417,"title":{},"body":{"components/ModalComponent.html":{}}}],["install",{"_index":803,"title":{},"body":{"index.html":{}}}],["installed",{"_index":809,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":246,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["instead",{"_index":505,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["interface",{"_index":29,"title":{"interfaces/ApiConfigurationParams.html":{},"interfaces/Count.html":{},"interfaces/NewPokemon.html":{},"interfaces/ParameterOptions.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{}},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"interfaces/Count.html":{},"classes/HeaderParameter.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{}}}],["interfaces",{"_index":34,"title":{},"body":{"interfaces/ApiConfigurationParams.html":{},"interfaces/Count.html":{},"interfaces/NewPokemon.html":{},"interfaces/ParameterOptions.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"overview.html":{}}}],["ir",{"_index":857,"title":{},"body":{"index.html":{}}}],["januário",{"_index":876,"title":{},"body":{"index.html":{}}}],["jquery",{"_index":777,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":382,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["json.stringify(value",{"_index":373,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["karma",{"_index":840,"title":{},"body":{"index.html":{}}}],["key",{"_index":252,"title":{},"body":{"classes/HeaderParameter.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["key,value,key,value",{"_index":321,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["label",{"_index":271,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["left",{"_index":703,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["legend",{"_index":40,"title":{},"body":{"modules/ApiModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{},"overview.html":{}}}],["lightyellow",{"_index":679,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["lint",{"_index":841,"title":{},"body":{"index.html":{}}}],["list",{"_index":320,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["literal",{"_index":479,"title":{},"body":{"interfaces/NewPokemon.html":{},"injectables/PingControllerService.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"classes/RequestBuilder.html":{},"miscellaneous/variables.html":{}}}],["load",{"_index":845,"title":{},"body":{"index.html":{}}}],["loaded",{"_index":86,"title":{},"body":{"modules/ApiModule.html":{}}}],["loopback",{"_index":793,"title":{},"body":{"index.html":{}}}],["macos",{"_index":806,"title":{},"body":{"index.html":{}}}],["makeitfavourite",{"_index":575,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["makeitfavourite(element",{"_index":604,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["map",{"_index":329,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["map((r",{"_index":535,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["margin",{"_index":702,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["mark",{"_index":606,"title":{},"body":{"components/PokemonsComponent.html":{},"index.html":{}}}],["matching",{"_index":32,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"injectables/BaseService.html":{},"interfaces/Count.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matrix",{"_index":272,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["maxcp",{"_index":453,"title":{},"body":{"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{}}}],["maxhp",{"_index":455,"title":{},"body":{"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{}}}],["maximum",{"_index":439,"title":{},"body":{"components/ModalComponent.html":{}}}],["means",{"_index":866,"title":{},"body":{"index.html":{}}}],["metadata",{"_index":106,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["method",{"_index":335,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["methods",{"_index":55,"title":{},"body":{"modules/ApiModule.html":{},"classes/AppPage.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["minimum",{"_index":437,"title":{},"body":{"components/ModalComponent.html":{}}}],["miscellaneous",{"_index":885,"title":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["modal",{"_index":412,"title":{},"body":{"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["modal'},{'name",{"_index":123,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["modal.component.html",{"_index":414,"title":{},"body":{"components/ModalComponent.html":{}}}],["modal.component.scss",{"_index":413,"title":{},"body":{"components/ModalComponent.html":{}}}],["modal/modal.component",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"components/PokemonsComponent.html":{}}}],["modalcomponent",{"_index":122,"title":{"components/ModalComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["modalref",{"_index":651,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["modalref.componentinstance.name",{"_index":653,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["modalservice",{"_index":582,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["models/ping",{"_index":526,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["module",{"_index":36,"title":{"modules/ApiModule.html":{},"modules/AppModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"overview.html":{}}}],["modules",{"_index":38,"title":{"modules.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["modulewithproviders",{"_index":63,"title":{},"body":{"modules/ApiModule.html":{}}}],["more",{"_index":797,"title":{},"body":{"index.html":{}}}],["multipart",{"_index":366,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["multipart/form",{"_index":365,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["n",{"_index":92,"title":{},"body":{"modules/ApiModule.html":{}}}],["name",{"_index":60,"title":{},"body":{"modules/ApiModule.html":{},"components/AppComponent.html":{},"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"index.html":{}}}],["name?.classification",{"_index":432,"title":{},"body":{"components/ModalComponent.html":{}}}],["name?.evolutionrequirements.amount",{"_index":449,"title":{},"body":{"components/ModalComponent.html":{}}}],["name?.evolutionrequirements.name",{"_index":450,"title":{},"body":{"components/ModalComponent.html":{}}}],["name?.fleerate",{"_index":445,"title":{},"body":{"components/ModalComponent.html":{}}}],["name?.height?.maximum",{"_index":443,"title":{},"body":{"components/ModalComponent.html":{}}}],["name?.height?.minimum",{"_index":442,"title":{},"body":{"components/ModalComponent.html":{}}}],["name?.id",{"_index":430,"title":{},"body":{"components/ModalComponent.html":{}}}],["name?.maxcp",{"_index":454,"title":{},"body":{"components/ModalComponent.html":{}}}],["name?.maxhp",{"_index":456,"title":{},"body":{"components/ModalComponent.html":{}}}],["name?.name",{"_index":425,"title":{},"body":{"components/ModalComponent.html":{}}}],["name?.resistant",{"_index":435,"title":{},"body":{"components/ModalComponent.html":{}}}],["name?.types",{"_index":433,"title":{},"body":{"components/ModalComponent.html":{}}}],["name?.weight?.maximum",{"_index":440,"title":{},"body":{"components/ModalComponent.html":{}}}],["name?.weight?.minimum",{"_index":438,"title":{},"body":{"components/ModalComponent.html":{}}}],["name[key",{"_index":308,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["namefilter",{"_index":706,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["nameofpokemon",{"_index":647,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["navigate",{"_index":820,"title":{},"body":{"index.html":{}}}],["navigateto",{"_index":146,"title":{},"body":{"classes/AppPage.html":{}}}],["need",{"_index":90,"title":{},"body":{"modules/ApiModule.html":{},"index.html":{}}}],["new",{"_index":83,"title":{},"body":{"modules/ApiModule.html":{},"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newpokemon",{"_index":466,"title":{"interfaces/NewPokemon.html":{}},"body":{"interfaces/NewPokemon.html":{},"components/PokemonsComponent.html":{},"coverage.html":{}}}],["newpokemon}).subscribe(res",{"_index":687,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["next",{"_index":847,"title":{},"body":{"index.html":{}}}],["ng",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{},"dependencies.html":{},"index.html":{}}}],["ngbactivemodal",{"_index":419,"title":{},"body":{"components/ModalComponent.html":{}}}],["ngbalertmodule",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["ngbmodal",{"_index":583,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["ngbpaginationmodule",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["ngmodule",{"_index":67,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{}}}],["ngondestroy",{"_index":576,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["ngoninit",{"_index":416,"title":{},"body":{"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["note",{"_index":805,"title":{},"body":{"index.html":{}}}],["npm",{"_index":802,"title":{},"body":{"index.html":{}}}],["nrofrecords",{"_index":564,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["nrpokemons.count",{"_index":662,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["null",{"_index":243,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"miscellaneous/typealiases.html":{}}}],["number",{"_index":185,"title":{},"body":{"interfaces/Count.html":{},"interfaces/NewPokemon.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{}}}],["object",{"_index":251,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"miscellaneous/variables.html":{}}}],["object.keys(this.value",{"_index":309,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["object.keys(value",{"_index":253,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["objects",{"_index":281,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["observable",{"_index":509,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["omit",{"_index":470,"title":{},"body":{"interfaces/NewPokemon.html":{}}}],["ondestroy",{"_index":555,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["oninit",{"_index":411,"title":{},"body":{"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["open",{"_index":577,"title":{},"body":{"components/PokemonsComponent.html":{},"index.html":{}}}],["open(datapok",{"_index":616,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["openapi",{"_index":794,"title":{},"body":{"index.html":{}}}],["operate",{"_index":842,"title":{},"body":{"index.html":{}}}],["operation",{"_index":262,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["operationpath",{"_index":334,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["operations",{"_index":169,"title":{},"body":{"injectables/BaseService.html":{}}}],["optional",{"_index":35,"title":{},"body":{"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"injectables/BaseService.html":{},"interfaces/Count.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["options",{"_index":194,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"index.html":{}}}],["options.accept",{"_index":400,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["options.reportprogress",{"_index":409,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["options.responsetype",{"_index":408,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["order",{"_index":860,"title":{},"body":{"index.html":{}}}],["out",{"_index":51,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"overview.html":{}}}],["overview",{"_index":880,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":765,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":698,"title":{},"body":{"components/PokemonsComponent.html":{},"index.html":{}}}],["pagenext",{"_index":697,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["pages",{"_index":849,"title":{},"body":{"index.html":{}}}],["page{{this.showcurrentrecords",{"_index":707,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["pagination",{"_index":602,"title":{},"body":{"components/PokemonsComponent.html":{},"index.html":{}}}],["pairs",{"_index":283,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["pairs.map(p",{"_index":363,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["pairs.push([key",{"_index":361,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["param",{"_index":646,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["parameter",{"_index":189,"title":{"classes/Parameter.html":{}},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{}}}],["parameter:40",{"_index":201,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{}}}],["parameter:50",{"_index":208,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{}}}],["parametercodec",{"_index":220,"title":{"classes/ParameterCodec.html":{}},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["parametercodecinstance",{"_index":231,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["parameteroptions",{"_index":198,"title":{"interfaces/ParameterOptions.html":{}},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{}}}],["parameters",{"_index":27,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["params",{"_index":61,"title":{},"body":{"modules/ApiModule.html":{},"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["params.append(`${this.name}[${key",{"_index":311,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["params.append(key",{"_index":315,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["params.append(this.name",{"_index":302,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["parentmodule",{"_index":80,"title":{},"body":{"modules/ApiModule.html":{}}}],["part",{"_index":516,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["partial",{"_index":548,"title":{},"body":{"interfaces/PokemonPartial.html":{}}}],["partial.ts",{"_index":547,"title":{},"body":{"interfaces/PokemonPartial.html":{},"coverage.html":{}}}],["partial.ts:22",{"_index":549,"title":{},"body":{"interfaces/PokemonPartial.html":{}}}],["path",{"_index":263,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["path(name",{"_index":336,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["path.replace(`{${prefix}${this.name}${this.options.explode",{"_index":294,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["path.replace(`{${this.name",{"_index":293,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["pathparam",{"_index":392,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["pathparam.append(path",{"_index":394,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["pathparameter",{"_index":264,"title":{"classes/PathParameter.html":{}},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{}}}],["pathparameter(name",{"_index":338,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["perform",{"_index":406,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["ping",{"_index":497,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["ping$response",{"_index":498,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["ping$response(params",{"_index":510,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["ping(params",{"_index":500,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["pingcontrollerping",{"_index":517,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["pingcontrollerpingpath",{"_index":496,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["pingcontrollerservice",{"_index":47,"title":{"injectables/PingControllerService.html":{}},"body":{"modules/ApiModule.html":{},"injectables/PingControllerService.html":{},"coverage.html":{},"overview.html":{}}}],["pingcontrollerservice.pingcontrollerpingpath",{"_index":530,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["pingresponse",{"_index":525,"title":{"interfaces/PingResponse.html":{}},"body":{"injectables/PingControllerService.html":{},"interfaces/PingResponse.html":{},"coverage.html":{}}}],["pipe",{"_index":532,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["pipedelimited",{"_index":305,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["plain",{"_index":287,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["plus",{"_index":216,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["pokemon",{"_index":542,"title":{"interfaces/Pokemon.html":{}},"body":{"interfaces/Pokemon.html":{},"components/PokemonsComponent.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["pokemon.id",{"_index":692,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["pokemon.id}).subscribe",{"_index":658,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["pokemon.name",{"_index":693,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["pokemon.ts",{"_index":468,"title":{},"body":{"interfaces/NewPokemon.html":{},"coverage.html":{}}}],["pokemon.ts:21",{"_index":478,"title":{},"body":{"interfaces/NewPokemon.html":{}}}],["pokemon.types",{"_index":694,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["pokemonapi",{"_index":799,"title":{},"body":{"index.html":{}}}],["pokemonapp",{"_index":114,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["pokemoncontrollerservice",{"_index":48,"title":{},"body":{"modules/ApiModule.html":{},"components/PokemonsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["pokemonid",{"_index":607,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["pokemonimg",{"_index":643,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["pokemonimg.getsprite(nameofpokemon",{"_index":650,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["pokemonpartial",{"_index":545,"title":{"interfaces/PokemonPartial.html":{}},"body":{"interfaces/PokemonPartial.html":{},"coverage.html":{}}}],["pokemons",{"_index":125,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["pokemons.component.html",{"_index":557,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["pokemons.component.scss",{"_index":556,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["pokemons/pokemons.component",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["pokemonscomponent",{"_index":124,"title":{"components/PokemonsComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["pokemonservice",{"_index":565,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["pokemonwithrelations",{"_index":550,"title":{"interfaces/PokemonWithRelations.html":{}},"body":{"interfaces/PokemonWithRelations.html":{},"coverage.html":{}}}],["pokenon",{"_index":865,"title":{},"body":{"index.html":{}}}],["pokémon",{"_index":846,"title":{},"body":{"index.html":{}}}],["popup",{"_index":863,"title":{},"body":{"index.html":{}}}],["position",{"_index":603,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["prefix",{"_index":270,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["previous",{"_index":696,"title":{},"body":{"components/PokemonsComponent.html":{},"index.html":{}}}],["private",{"_index":158,"title":{},"body":{"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["prod",{"_index":831,"title":{},"body":{"index.html":{}}}],["production",{"_index":833,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["progress",{"_index":387,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["project",{"_index":787,"title":{},"body":{"index.html":{}}}],["promise",{"_index":148,"title":{},"body":{"classes/AppPage.html":{}}}],["properties",{"_index":12,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"components/AppComponent.html":{},"injectables/BaseService.html":{},"interfaces/Count.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["propval",{"_index":254,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["protected",{"_index":179,"title":{},"body":{"injectables/BaseService.html":{}}}],["protractor",{"_index":150,"title":{},"body":{"classes/AppPage.html":{}}}],["provide",{"_index":77,"title":{},"body":{"modules/ApiModule.html":{}}}],["providedin",{"_index":23,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"injectables/ApiService.html":{},"injectables/PingControllerService.html":{}}}],["providers",{"_index":43,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"overview.html":{}}}],["provides",{"_index":53,"title":{},"body":{"modules/ApiModule.html":{},"injectables/PingControllerService.html":{}}}],["public",{"_index":193,"title":{},"body":{"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["put",{"_index":282,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["query",{"_index":295,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["query(name",{"_index":339,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["queryparam",{"_index":397,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["queryparam.append(httpparams",{"_index":399,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["queryparameter",{"_index":296,"title":{"classes/QueryParameter.html":{}},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{}}}],["queryparameter(name",{"_index":341,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["r",{"_index":534,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["r.body",{"_index":537,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["rb",{"_index":528,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["readme.md",{"_index":796,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":495,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["records",{"_index":589,"title":{},"body":{"components/PokemonsComponent.html":{},"index.html":{}}}],["refresh",{"_index":578,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["relations.ts",{"_index":551,"title":{},"body":{"interfaces/PokemonWithRelations.html":{},"coverage.html":{}}}],["relations.ts:22",{"_index":553,"title":{},"body":{"interfaces/PokemonWithRelations.html":{}}}],["reload",{"_index":690,"title":{},"body":{"components/PokemonsComponent.html":{},"index.html":{}}}],["repeat",{"_index":278,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["replace",{"_index":285,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["report",{"_index":386,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["reportprogress",{"_index":390,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["request",{"_index":190,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["requestbuilder",{"_index":327,"title":{"classes/RequestBuilder.html":{}},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{}}}],["requestbuilder(this.rooturl",{"_index":529,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["requests",{"_index":326,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["require",{"_index":762,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["require.context",{"_index":896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requirements",{"_index":447,"title":{},"body":{"components/ModalComponent.html":{},"index.html":{}}}],["reset",{"_index":50,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"components/PokemonsComponent.html":{},"index.html":{},"overview.html":{}}}],["resistant",{"_index":434,"title":{},"body":{"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{}}}],["response",{"_index":380,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"miscellaneous/typealiases.html":{}}}],["response.ts",{"_index":539,"title":{},"body":{"interfaces/PingResponse.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["responsetype",{"_index":381,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["result",{"_index":31,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"injectables/BaseService.html":{},"interfaces/Count.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":33,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"injectables/BaseService.html":{},"interfaces/Count.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":76,"title":{},"body":{"modules/ApiModule.html":{},"classes/AppPage.html":{},"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"index.html":{}}}],["returns",{"_index":62,"title":{},"body":{"modules/ApiModule.html":{},"classes/AppPage.html":{},"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["root",{"_index":24,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"injectables/ApiService.html":{},"components/AppComponent.html":{},"classes/AppPage.html":{},"injectables/BaseService.html":{},"injectables/PingControllerService.html":{},"index.html":{}}}],["root'},{'name",{"_index":121,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["rooturl",{"_index":13,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["rooturl(rooturl",{"_index":182,"title":{},"body":{"injectables/BaseService.html":{}}}],["run",{"_index":798,"title":{},"body":{"index.html":{}}}],["running",{"_index":834,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":522,"title":{},"body":{"injectables/PingControllerService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":524,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["schemaoptions",{"_index":471,"title":{},"body":{"interfaces/NewPokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{}}}],["search",{"_index":594,"title":{},"body":{"components/PokemonsComponent.html":{},"index.html":{}}}],["searchby",{"_index":579,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["searchby(type",{"_index":622,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["see",{"_index":93,"title":{},"body":{"modules/ApiModule.html":{},"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"index.html":{}}}],["select",{"_index":850,"title":{},"body":{"index.html":{}}}],["selected",{"_index":611,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["selector",{"_index":107,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["separated",{"_index":319,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["separator",{"_index":207,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["serialization",{"_index":300,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["serializevalue",{"_index":196,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{}}}],["serializevalue(value",{"_index":206,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["serve",{"_index":818,"title":{},"body":{"index.html":{}}}],["server",{"_index":822,"title":{},"body":{"index.html":{}}}],["service",{"_index":170,"title":{},"body":{"injectables/BaseService.html":{},"injectables/PingControllerService.html":{}}}],["service.ts",{"_index":157,"title":{},"body":{"injectables/BaseService.html":{},"coverage.html":{}}}],["service.ts:11",{"_index":162,"title":{},"body":{"injectables/BaseService.html":{}}}],["service.ts:17",{"_index":165,"title":{},"body":{"injectables/BaseService.html":{}}}],["service.ts:23",{"_index":167,"title":{},"body":{"injectables/BaseService.html":{}}}],["service.ts:30",{"_index":176,"title":{},"body":{"injectables/BaseService.html":{}}}],["services",{"_index":54,"title":{},"body":{"modules/ApiModule.html":{},"injectables/BaseService.html":{}}}],["services/ping",{"_index":72,"title":{},"body":{"modules/ApiModule.html":{}}}],["services/pokemon",{"_index":74,"title":{},"body":{"modules/ApiModule.html":{}}}],["set",{"_index":171,"title":{},"body":{"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["setrooturl(rooturl",{"_index":175,"title":{},"body":{"injectables/BaseService.html":{}}}],["sets",{"_index":177,"title":{},"body":{"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["showcurrentrecords",{"_index":566,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["shown",{"_index":612,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["sign",{"_index":217,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["simple",{"_index":266,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["single",{"_index":316,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["skiprecords",{"_index":567,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["skipself",{"_index":68,"title":{},"body":{"modules/ApiModule.html":{}}}],["sort",{"_index":858,"title":{},"body":{"index.html":{}}}],["sorting",{"_index":853,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"injectables/BaseService.html":{},"interfaces/Count.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"index.html":{}}}],["space",{"_index":701,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["spacedelimited",{"_index":304,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["span')).gettext",{"_index":154,"title":{},"body":{"classes/AppPage.html":{}}}],["spec\\.ts",{"_index":897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["special",{"_index":463,"title":{},"body":{"components/ModalComponent.html":{}}}],["specs",{"_index":428,"title":{},"body":{"components/ModalComponent.html":{}}}],["src/.../environment.prod.ts",{"_index":893,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":894,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../request",{"_index":895,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../strict",{"_index":888,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../test.ts",{"_index":892,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/api.service.ts",{"_index":96,"title":{},"body":{"injectables/ApiService.html":{},"coverage.html":{}}}],["src/app/api.service.ts:6",{"_index":97,"title":{},"body":{"injectables/ApiService.html":{}}}],["src/app/api/api",{"_index":6,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"coverage.html":{}}}],["src/app/api/api.module.ts",{"_index":52,"title":{},"body":{"modules/ApiModule.html":{}}}],["src/app/api/api.module.ts:24",{"_index":59,"title":{},"body":{"modules/ApiModule.html":{}}}],["src/app/api/base",{"_index":156,"title":{},"body":{"injectables/BaseService.html":{},"coverage.html":{}}}],["src/app/api/models/loopback/count.ts",{"_index":184,"title":{},"body":{"interfaces/Count.html":{},"coverage.html":{}}}],["src/app/api/models/new",{"_index":467,"title":{},"body":{"interfaces/NewPokemon.html":{},"coverage.html":{}}}],["src/app/api/models/ping",{"_index":538,"title":{},"body":{"interfaces/PingResponse.html":{},"coverage.html":{}}}],["src/app/api/models/pokemon",{"_index":546,"title":{},"body":{"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"coverage.html":{}}}],["src/app/api/models/pokemon.ts",{"_index":543,"title":{},"body":{"interfaces/Pokemon.html":{},"coverage.html":{}}}],["src/app/api/models/pokemon.ts:18",{"_index":544,"title":{},"body":{"interfaces/Pokemon.html":{}}}],["src/app/api/request",{"_index":187,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/api/services/ping",{"_index":493,"title":{},"body":{"injectables/PingControllerService.html":{},"coverage.html":{}}}],["src/app/api/services/pokemon",{"_index":752,"title":{},"body":{"coverage.html":{}}}],["src/app/api/strict",{"_index":889,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app/app.component.ts",{"_index":105,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:9",{"_index":115,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.module.ts",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/modal/modal.component.ts",{"_index":410,"title":{},"body":{"components/ModalComponent.html":{},"coverage.html":{}}}],["src/app/modal/modal.component.ts:10",{"_index":420,"title":{},"body":{"components/ModalComponent.html":{}}}],["src/app/modal/modal.component.ts:12",{"_index":422,"title":{},"body":{"components/ModalComponent.html":{}}}],["src/app/modal/modal.component.ts:15",{"_index":421,"title":{},"body":{"components/ModalComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts",{"_index":554,"title":{},"body":{"components/PokemonsComponent.html":{},"coverage.html":{}}}],["src/app/pokemons/pokemons.component.ts:115",{"_index":626,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:125",{"_index":597,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:136",{"_index":623,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:14",{"_index":632,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:147",{"_index":592,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:16",{"_index":627,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:17",{"_index":630,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:170",{"_index":608,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:18",{"_index":640,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:188",{"_index":585,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:19",{"_index":638,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:20",{"_index":634,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:21",{"_index":635,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:22",{"_index":633,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:222",{"_index":620,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:226",{"_index":614,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:23",{"_index":584,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:25",{"_index":637,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:28",{"_index":636,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:29",{"_index":628,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:31",{"_index":615,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:39",{"_index":617,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:49",{"_index":595,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:58",{"_index":587,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:71",{"_index":599,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:84",{"_index":601,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/environments/environment.prod.ts",{"_index":757,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":759,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/test.ts",{"_index":760,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["standard",{"_index":871,"title":{},"body":{"index.html":{}}}],["started",{"_index":786,"title":{"index.html":{}},"body":{}}],["starts",{"_index":801,"title":{},"body":{"index.html":{}}}],["state",{"_index":844,"title":{},"body":{"index.html":{}}}],["statements",{"_index":730,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":56,"title":{},"body":{"modules/ApiModule.html":{},"injectables/PingControllerService.html":{}}}],["stored",{"_index":829,"title":{},"body":{"index.html":{}}}],["strict",{"_index":520,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["stricthttpresponse",{"_index":519,"title":{},"body":{"injectables/PingControllerService.html":{},"miscellaneous/typealiases.html":{}}}],["string",{"_index":16,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"components/AppComponent.html":{},"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["string(value",{"_index":261,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["style",{"_index":234,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"index.html":{}}}],["styles",{"_index":102,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["styleurls",{"_index":109,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["super(config",{"_index":527,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["super(name",{"_index":265,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["support",{"_index":877,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":878,"title":{},"body":{"modules.html":{}}}],["t",{"_index":722,"title":{},"body":{"classes/RequestBuilder.html":{},"miscellaneous/typealiases.html":{}}}],["table",{"_index":764,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":763,"title":{},"body":{"coverage.html":{}}}],["taking",{"_index":291,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["template",{"_index":101,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["templateurl",{"_index":111,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["test",{"_index":837,"title":{},"body":{"index.html":{}}}],["tests",{"_index":836,"title":{},"body":{"index.html":{}}}],["text",{"_index":383,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["text).subscribe(result",{"_index":670,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this._bodycontent",{"_index":362,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this._bodycontenttype",{"_index":351,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this._header.set(name",{"_index":343,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this._header.values",{"_index":403,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this._path.set(name",{"_index":337,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this._path.values",{"_index":393,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this._query.set(name",{"_index":340,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this._query.values",{"_index":398,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this._rooturl",{"_index":180,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.button",{"_index":676,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.button.style.backgroundcolor",{"_index":678,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.button.textcontent",{"_index":677,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.config.rooturl",{"_index":181,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.filterorder",{"_index":671,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.formdatavalue(v",{"_index":360,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this.formdatavalue(val",{"_index":370,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this.getpokemonscount",{"_index":645,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.havepagination",{"_index":668,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.http.request(rb.build",{"_index":531,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["this.initialpagination",{"_index":663,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.modalservice.open(modalcomponent",{"_index":652,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.name",{"_index":276,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this.name}=${this.serializevalue(v",{"_index":280,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this.nrofrecords",{"_index":661,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.operationpath",{"_index":391,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this.options",{"_index":241,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this.options.explode",{"_index":245,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this.options.style",{"_index":242,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this.ping$response(params).pipe",{"_index":536,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["this.pokemons",{"_index":655,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.pokemons.foreach(pokemon",{"_index":656,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.pokemonservice.count().subscribe(nrpokemons",{"_index":660,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.pokemonservice.create({body",{"_index":686,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.pokemonservice.deletebyid({id",{"_index":657,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.pokemonservice.filldatabase",{"_index":659,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.pokemonservice.filterby(type",{"_index":672,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.pokemonservice.find().subscribe(pokemons",{"_index":654,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.pokemonservice.findbyid({id}).subscribe(pokemon",{"_index":667,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.pokemonservice.searchby(type",{"_index":669,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.pokemonservice.updatebyid({id",{"_index":664,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.rooturl",{"_index":395,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this.serializevalue(array",{"_index":322,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this.serializevalue(propval",{"_index":312,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this.serializevalue(propval).split(separator).join(encodeuricomponent(separator",{"_index":256,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this.serializevalue(this.value",{"_index":306,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this.serializevalue(v",{"_index":303,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this.serializevalue(v).split(separator).join(encodeuricomponent(separator))).join(separator",{"_index":249,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this.serializevalue(value",{"_index":284,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this.showcurrentrecords",{"_index":699,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.updatepokemon(pokemonid",{"_index":680,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.value",{"_index":269,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this.value[key",{"_index":310,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["throw",{"_index":82,"title":{},"body":{"modules/ApiModule.html":{}}}],["time",{"_index":861,"title":{},"body":{"index.html":{}}}],["times",{"_index":426,"title":{},"body":{"components/ModalComponent.html":{}}}],["title",{"_index":113,"title":{},"body":{"components/AppComponent.html":{},"interfaces/NewPokemon.html":{}}}],["toappend",{"_index":368,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["toggle",{"_index":609,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["tools",{"_index":808,"title":{},"body":{"index.html":{}}}],["total",{"_index":700,"title":{},"body":{"components/PokemonsComponent.html":{},"index.html":{}}}],["transparent",{"_index":682,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["tree",{"_index":104,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["true",{"_index":298,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"miscellaneous/variables.html":{}}}],["tslib",{"_index":781,"title":{},"body":{"dependencies.html":{}}}],["tslint:disable",{"_index":64,"title":{},"body":{"modules/ApiModule.html":{}}}],["tstype",{"_index":469,"title":{},"body":{"interfaces/NewPokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{}}}],["type",{"_index":14,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"components/AppComponent.html":{},"injectables/BaseService.html":{},"interfaces/Count.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":886,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":250,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["types",{"_index":377,"title":{},"body":{"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"index.html":{}}}],["u)selected",{"_index":613,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["undefined",{"_index":244,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["unit",{"_index":835,"title":{},"body":{"index.html":{}}}],["unmark",{"_index":681,"title":{},"body":{"components/PokemonsComponent.html":{},"index.html":{}}}],["updatepokemon",{"_index":580,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["updatepokemon(id",{"_index":625,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["uploads",{"_index":388,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["url",{"_index":168,"title":{},"body":{"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"interfaces/PingResponse.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["urlencoded",{"_index":355,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["use",{"_index":514,"title":{},"body":{"injectables/PingControllerService.html":{},"index.html":{}}}],["used",{"_index":273,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["usedprovided",{"_index":874,"title":{},"body":{"index.html":{}}}],["usevalue",{"_index":78,"title":{},"body":{"modules/ApiModule.html":{}}}],["using",{"_index":314,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["v",{"_index":301,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["v4",{"_index":795,"title":{},"body":{"index.html":{}}}],["val",{"_index":358,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["value",{"_index":18,"title":{},"body":{"injectables/ApiConfiguration.html":{},"components/AppComponent.html":{},"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"miscellaneous/variables.html":{}}}],["value.map(v",{"_index":248,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["value.type",{"_index":352,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["value[key",{"_index":255,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["values",{"_index":218,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["value}}).subscribe(res",{"_index":665,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["var",{"_index":119,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["variable",{"_index":288,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{}}}],["variables",{"_index":891,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["variant",{"_index":290,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["version",{"_index":790,"title":{},"body":{"index.html":{}}}],["via",{"_index":839,"title":{},"body":{"index.html":{}}}],["view",{"_index":695,"title":{},"body":{"components/PokemonsComponent.html":{},"index.html":{}}}],["void",{"_index":178,"title":{},"body":{"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["want",{"_index":812,"title":{},"body":{"index.html":{}}}],["ways",{"_index":873,"title":{},"body":{"index.html":{}}}],["weaknesses",{"_index":476,"title":{},"body":{"interfaces/NewPokemon.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{}}}],["weight",{"_index":436,"title":{},"body":{"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{}}}],["whether",{"_index":385,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["whose",{"_index":317,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["window",{"_index":621,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["window.location.reload",{"_index":688,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["without",{"_index":313,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["www",{"_index":354,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["xcode",{"_index":807,"title":{},"body":{"index.html":{}}}],["yellow",{"_index":869,"title":{},"body":{"index.html":{}}}],["yes",{"_index":508,"title":{},"body":{"injectables/PingControllerService.html":{},"classes/RequestBuilder.html":{}}}],["zone.js",{"_index":783,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":49,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/ApiConfiguration.html":{"url":"injectables/ApiConfiguration.html","title":"injectable - ApiConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ApiConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api/api-configuration.ts\n        \n\n            \n                Description\n            \n            \n                Global configuration\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                rootUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rootUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '/'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/api/api-configuration.ts:12\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n/**\n * Global configuration\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiConfiguration {\n  rootUrl: string = '/';\n}\n\n/**\n * Parameters for `ApiModule.forRoot()`\n */\nexport interface ApiConfigurationParams {\n  rootUrl?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ApiConfigurationParams.html":{"url":"interfaces/ApiConfigurationParams.html","title":"interface - ApiConfigurationParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ApiConfigurationParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api/api-configuration.ts\n        \n\n            \n                Description\n            \n            \n                Parameters for ApiModule.forRoot()\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        rootUrl\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        rootUrl\n                                    \n                                \n                                \n                                    \n                                        rootUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n/**\n * Global configuration\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiConfiguration {\n  rootUrl: string = '/';\n}\n\n/**\n * Parameters for `ApiModule.forRoot()`\n */\nexport interface ApiConfigurationParams {\n  rootUrl?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ApiModule.html":{"url":"modules/ApiModule.html","title":"module - ApiModule","body":"\n                   \n\n\n\n\n    Modules\n    ApiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ApiModule\n\n\n\ncluster_ApiModule_providers\n\n\n\n\nApiConfiguration\n\nApiConfiguration\n\n\n\nApiModule\n\nApiModule\n\nApiModule -->\n\nApiConfiguration->ApiModule\n\n\n\n\n\nPingControllerService\n\nPingControllerService\n\nApiModule -->\n\nPingControllerService->ApiModule\n\n\n\n\n\nPokemonControllerService\n\nPokemonControllerService\n\nApiModule -->\n\nPokemonControllerService->ApiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/api/api.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Module that provides all services and configuration.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ApiConfiguration\n                        \n                        \n                            PingControllerService\n                        \n                        \n                            PokemonControllerService\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(params: ApiConfigurationParams)\n                \n            \n\n\n            \n                \n                    Defined in src/app/api/api.module.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                ApiConfigurationParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ModuleWithProviders\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        /* tslint:disable */\n/* eslint-disable */\nimport { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration, ApiConfigurationParams } from './api-configuration';\n\nimport { PingControllerService } from './services/ping-controller.service';\nimport { PokemonControllerService } from './services/pokemon-controller.service';\n\n/**\n * Module that provides all services and configuration.\n */\n@NgModule({\n  imports: [],\n  exports: [],\n  declarations: [],\n  providers: [\n    PingControllerService,\n    PokemonControllerService,\n    ApiConfiguration\n  ],\n})\nexport class ApiModule {\n  static forRoot(params: ApiConfigurationParams): ModuleWithProviders {\n    return {\n      ngModule: ApiModule,\n      providers: [\n        {\n          provide: ApiConfiguration,\n          useValue: params\n        }\n      ]\n    }\n  }\n\n  constructor( \n    @Optional() @SkipSelf() parentModule: ApiModule,\n    @Optional() http: HttpClient\n  ) {\n    if (parentModule) {\n      throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n    }\n    if (!http) {\n      throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n      'See also https://github.com/angular/angular/issues/20575');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ApiService.html":{"url":"injectables/ApiService.html","title":"injectable - ApiService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ApiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api.service.ts\n        \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/api.service.ts:6\n                            \n                        \n\n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  constructor() { }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                ./app.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'PokemonApp'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'PokemonApp';\n}\n\n    \n\n    \n        \n\n    \n\n    \n                \n                    ./app.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ModalComponent', 'selector': 'app-modal'},{'name': 'PokemonsComponent', 'selector': 'app-pokemons'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_AppModule_declarations\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nModalComponent\n\nModalComponent\n\nAppModule -->\n\nModalComponent->AppModule\n\n\n\n\n\nPokemonsComponent\n\nPokemonsComponent\n\nAppModule -->\n\nPokemonsComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AppComponent\n                        \n                        \n                            ModalComponent\n                        \n                        \n                            PokemonsComponent\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\nimport { PokemonsComponent } from './pokemons/pokemons.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgbAlertModule, NgbPaginationModule } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalComponent } from './modal/modal.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    PokemonsComponent,\n    ModalComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    NgbPaginationModule,\n    NgbAlertModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AppPage.html":{"url":"classes/AppPage.html","title":"class - AppPage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AppPage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            e2e/src/app.po.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getTitleText\n                            \n                            \n                                navigateTo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTitleText\n                        \n                        \n                    \n                \n            \n            \n                \ngetTitleText()\n                \n            \n\n\n            \n                \n                    Defined in e2e/src/app.po.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            navigateTo\n                        \n                        \n                    \n                \n            \n            \n                \nnavigateTo()\n                \n            \n\n\n            \n                \n                    Defined in e2e/src/app.po.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise {\n    return browser.get(browser.baseUrl) as Promise;\n  }\n\n  getTitleText(): Promise {\n    return element(by.css('app-root .content span')).getText() as Promise;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BaseService.html":{"url":"injectables/BaseService.html","title":"injectable - BaseService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  BaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api/base-service.ts\n        \n\n            \n                Description\n            \n            \n                Base class for services\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _rootUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    rootUrl\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ApiConfiguration, http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/api/base-service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        ApiConfiguration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _rootUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'http://localhost:3000/'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/api/base-service.ts:17\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        rootUrl\n                    \n                \n\n                \n                    \n                        getrootUrl()\n                    \n                \n                            \n                                \n                                    Defined in src/app/api/base-service.ts:23\n                                \n                            \n                    \n                        \n                                Returns the root url for all operations in this service. If not set directly in this\nservice, will fallback to ApiConfiguration.rootUrl.\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n                \n                    \n                        setrootUrl(rootUrl: string)\n                    \n                \n                            \n                                \n                                    Defined in src/app/api/base-service.ts:30\n                                \n                            \n                    \n                        \n                                Sets the root URL for API operations in this service.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            rootUrl\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration } from './api-configuration';\n\n/**\n * Base class for services\n */\n@Injectable()\nexport class BaseService {\n  constructor(\n    protected config: ApiConfiguration,\n    protected http: HttpClient\n  ) {\n  }\n  private _rootUrl: string = 'http://localhost:3000/';\n\n  /**\n   * Returns the root url for all operations in this service. If not set directly in this\n   * service, will fallback to `ApiConfiguration.rootUrl`.\n   */\n  get rootUrl(): string {\n    return this._rootUrl || this.config.rootUrl;\n  }\n\n  /**\n   * Sets the root URL for API operations in this service.\n   */\n  set rootUrl(rootUrl: string) {\n    this._rootUrl = rootUrl;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Count.html":{"url":"interfaces/Count.html","title":"interface - Count","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Count\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api/models/loopback/count.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        count\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Count {\n  count?: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HeaderParameter.html":{"url":"classes/HeaderParameter.html","title":"class - HeaderParameter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HeaderParameter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api/request-builder.ts\n        \n\n            \n                Description\n            \n            \n                A parameter in the HTTP request header\n\n            \n\n            \n                Extends\n            \n            \n                        Parameter\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                options\n                            \n                            \n                                    Public\n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                append\n                            \n                            \n                                serializeValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, value: any, options: ParameterOptions)\n                    \n                \n                        \n                            \n                                Defined in src/app/api/request-builder.ts:176\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        ParameterOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Parameter\n\n                                \n                            \n                        \n                            \n                                    Defined in         Parameter:40\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            options\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ParameterOptions\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Parameter\n\n                                \n                            \n                        \n                            \n                                    Defined in         Parameter:40\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Parameter\n\n                                \n                            \n                        \n                            \n                                    Defined in         Parameter:40\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            append\n                        \n                        \n                    \n                \n            \n            \n                \nappend(headers: HttpHeaders)\n                \n            \n\n\n            \n                \n                    Defined in src/app/api/request-builder.ts:181\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    headers\n                                    \n                                                HttpHeaders\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         HttpHeaders\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            serializeValue\n                        \n                        \n                    \n                \n            \n            \n                \nserializeValue(value: any, separator: string)\n                \n            \n\n\n            \n                \n                    Inherited from         Parameter\n\n                \n            \n            \n                \n                        Defined in         Parameter:50\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    separator\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ','\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map();\n  private _query = new Map();\n  private _header = new Map();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ModalComponent.html":{"url":"components/ModalComponent.html","title":"component - ModalComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ModalComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modal/modal.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-modal\n            \n\n            \n                styleUrls\n                ./modal.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./modal.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                activeModal\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(activeModal: NgbActiveModal)\n                    \n                \n                        \n                            \n                                Defined in src/app/modal/modal.component.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        activeModal\n                                                  \n                                                        \n                                                                    NgbActiveModal\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modal/modal.component.ts:10\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/modal/modal.component.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            activeModal\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     NgbActiveModal\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modal/modal.component.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {Component, Input, OnInit} from '@angular/core';\nimport {NgbActiveModal} from '@ng-bootstrap/ng-bootstrap';\n\n@Component({\n  selector: 'app-modal',\n  templateUrl: './modal.component.html',\n  styleUrls: ['./modal.component.scss']\n})\nexport class ModalComponent implements OnInit {\n  @Input() name: any;\n\n  constructor(public activeModal: NgbActiveModal) {\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n\n    \n\n    \n        \n  I'm {{name?.name}}\n  \n    &times;\n  \n\n\n  :: Here is my specs :: \n  \n  ID: {{name?.id}}\n  Classification: {{name?.classification}}\n  Types: {{name?.types}}\n  Resistant: {{name?.resistant}}\n  Weight\n    Minimum: {{name?.weight?.minimum}}\n    Maximum: {{name?.weight?.maximum}}\n  \n  Height\n    Minimum: {{name?.height?.minimum}}\n    Maximum: {{name?.height?.maximum}}\n  \n  FleeRate: {{name?.fleeRate}}\n  Evolution Requirements\n    Amount: {{name?.evolutionRequirements.amount}}\n    Name: {{name?.evolutionRequirements.name}}\n  \n  Evolution\n  \n    Id: {{evo?.id}}\n    Name: {{evo?.name}}\n  \n  maxCP: {{name?.maxCP}}\n  maxHP: {{name?.maxHP}}\n  Attacks: Fast\n  \n    Name: {{attk?.name}}\n    Type: {{attk?.type}}\n    Damage: {{attk?.damage}}\n  \n  Attacks: Special\n  \n    Name: {{attk?.name}}\n    Type: {{attk?.type}}\n    Damage: {{attk?.damage}}\n  \n\n\n  Close\n\n\n    \n\n    \n                \n                    ./modal.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  I\\'m {{name?.name}}      ×    :: Here is my specs ::     ID: {{name?.id}}  Classification: {{name?.classification}}  Types: {{name?.types}}  Resistant: {{name?.resistant}}  Weight    Minimum: {{name?.weight?.minimum}}    Maximum: {{name?.weight?.maximum}}    Height    Minimum: {{name?.height?.minimum}}    Maximum: {{name?.height?.maximum}}    FleeRate: {{name?.fleeRate}}  Evolution Requirements    Amount: {{name?.evolutionRequirements.amount}}    Name: {{name?.evolutionRequirements.name}}    Evolution      Id: {{evo?.id}}    Name: {{evo?.name}}    maxCP: {{name?.maxCP}}  maxHP: {{name?.maxHP}}  Attacks: Fast      Name: {{attk?.name}}    Type: {{attk?.type}}    Damage: {{attk?.damage}}    Attacks: Special      Name: {{attk?.name}}    Type: {{attk?.type}}    Damage: {{attk?.damage}}    Close'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ModalComponent', 'selector': 'app-modal'},{'name': 'PokemonsComponent', 'selector': 'app-pokemons'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ModalComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NewPokemon.html":{"url":"interfaces/NewPokemon.html","title":"interface - NewPokemon","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  NewPokemon\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api/models/new-pokemon.ts\n        \n\n            \n                Description\n            \n            \n                (tsType: Omit, schemaOptions: { title: 'NewPokemon', exclude: [ 'id' ] })\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        attacks\n                                \n                                \n                                            Optional\n                                        classification\n                                \n                                \n                                            Optional\n                                        evolutionRequirements\n                                \n                                \n                                            Optional\n                                        evolutions\n                                \n                                \n                                        favourite\n                                \n                                \n                                            Optional\n                                        fleeRate\n                                \n                                \n                                            Optional\n                                        height\n                                \n                                \n                                            Optional\n                                        maxCP\n                                \n                                \n                                            Optional\n                                        maxHP\n                                \n                                \n                                            Optional\n                                        name\n                                \n                                \n                                            Optional\n                                        resistant\n                                \n                                \n                                            Optional\n                                        types\n                                \n                                \n                                            Optional\n                                        weaknesses\n                                \n                                \n                                            Optional\n                                        weight\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in src/app/api/models/new-pokemon.ts:21\n                            \n                        \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        attacks\n                                    \n                                \n                                \n                                    \n                                        attacks:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        classification\n                                    \n                                \n                                \n                                    \n                                        classification:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        evolutionRequirements\n                                    \n                                \n                                \n                                    \n                                        evolutionRequirements:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        evolutions\n                                    \n                                \n                                \n                                    \n                                        evolutions:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        favourite\n                                    \n                                \n                                \n                                    \n                                        favourite:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fleeRate\n                                    \n                                \n                                \n                                    \n                                        fleeRate:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                    \n                                \n                                \n                                    \n                                        height:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxCP\n                                    \n                                \n                                \n                                    \n                                        maxCP:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxHP\n                                    \n                                \n                                \n                                    \n                                        maxHP:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        resistant\n                                    \n                                \n                                \n                                    \n                                        resistant:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        types\n                                    \n                                \n                                \n                                    \n                                        types:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        weaknesses\n                                    \n                                \n                                \n                                    \n                                        weaknesses:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        weight\n                                    \n                                \n                                \n                                    \n                                        weight:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface NewPokemon {\n  attacks?: {  };\n  classification?: string;\n  evolutionRequirements?: {  };\n  evolutions?: Array;\n  fleeRate?: number;\n  height?: {  };\n  favourite: boolean;\n  maxCP?: number;\n  maxHP?: number;\n  name?: string;\n  resistant?: Array;\n  types?: Array;\n  weaknesses?: Array;\n  weight?: {  };\n\n  [key: string]: any;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Parameter.html":{"url":"classes/Parameter.html","title":"class - Parameter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Parameter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api/request-builder.ts\n        \n\n            \n                Description\n            \n            \n                Base class for a parameter\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                options\n                            \n                            \n                                    Public\n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                serializeValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, value: any, options: ParameterOptions, defaultStyle: string, defaultExplode: boolean)\n                    \n                \n                        \n                            \n                                Defined in src/app/api/request-builder.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        ParameterOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        defaultStyle\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        defaultExplode\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/api/request-builder.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            options\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ParameterOptions\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/api/request-builder.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/api/request-builder.ts:40\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            serializeValue\n                        \n                        \n                    \n                \n            \n            \n                \nserializeValue(value: any, separator: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/api/request-builder.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    separator\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ','\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map();\n  private _query = new Map();\n  private _header = new Map();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParameterCodec.html":{"url":"classes/ParameterCodec.html","title":"class - ParameterCodec","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParameterCodec\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api/request-builder.ts\n        \n\n            \n                Description\n            \n            \n                Custom parameter codec to correctly handle the plus sign in parameter\nvalues. See https://github.com/angular/angular/issues/18261\n\n            \n\n\n            \n                Implements\n            \n            \n                            HttpParameterCodec\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                decodeKey\n                            \n                            \n                                decodeValue\n                            \n                            \n                                encodeKey\n                            \n                            \n                                encodeValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            decodeKey\n                        \n                        \n                    \n                \n            \n            \n                \ndecodeKey(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/api/request-builder.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            decodeValue\n                        \n                        \n                    \n                \n            \n            \n                \ndecodeValue(value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/api/request-builder.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            encodeKey\n                        \n                        \n                    \n                \n            \n            \n                \nencodeKey(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/api/request-builder.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            encodeValue\n                        \n                        \n                    \n                \n            \n            \n                \nencodeValue(value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/api/request-builder.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map();\n  private _query = new Map();\n  private _header = new Map();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParameterOptions.html":{"url":"interfaces/ParameterOptions.html","title":"interface - ParameterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ParameterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api/request-builder.ts\n        \n\n            \n                Description\n            \n            \n                Defines the options for appending a parameter\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        explode\n                                \n                                \n                                            Optional\n                                        style\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        explode\n                                    \n                                \n                                \n                                    \n                                        explode:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        style\n                                    \n                                \n                                \n                                    \n                                        style:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map();\n  private _query = new Map();\n  private _header = new Map();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PathParameter.html":{"url":"classes/PathParameter.html","title":"class - PathParameter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PathParameter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api/request-builder.ts\n        \n\n            \n                Description\n            \n            \n                A parameter in the operation path\n\n            \n\n            \n                Extends\n            \n            \n                        Parameter\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                options\n                            \n                            \n                                    Public\n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                append\n                            \n                            \n                                serializeValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, value: any, options: ParameterOptions)\n                    \n                \n                        \n                            \n                                Defined in src/app/api/request-builder.ts:79\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        ParameterOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Parameter\n\n                                \n                            \n                        \n                            \n                                    Defined in         Parameter:40\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            options\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ParameterOptions\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Parameter\n\n                                \n                            \n                        \n                            \n                                    Defined in         Parameter:40\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Parameter\n\n                                \n                            \n                        \n                            \n                                    Defined in         Parameter:40\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            append\n                        \n                        \n                    \n                \n            \n            \n                \nappend(path: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/api/request-builder.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            serializeValue\n                        \n                        \n                    \n                \n            \n            \n                \nserializeValue(value: any, separator: string)\n                \n            \n\n\n            \n                \n                    Inherited from         Parameter\n\n                \n            \n            \n                \n                        Defined in         Parameter:50\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    separator\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ','\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map();\n  private _query = new Map();\n  private _header = new Map();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PingControllerService.html":{"url":"injectables/PingControllerService.html","title":"injectable - PingControllerService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PingControllerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api/services/ping-controller.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        BaseService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                PingControllerPingPath\n                            \n                            \n                                    Private\n                                _rootUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ping\n                            \n                            \n                                ping$Response\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ApiConfiguration, http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/api/services/ping-controller.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        ApiConfiguration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ping\n                        \n                        \n                    \n                \n            \n            \n                \nping(params?: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/app/api/services/ping-controller.service.ts:60\n                \n            \n\n\n            \n                \n                    This method provides access to only to the response body.\nTo access the full response (for headers, for example), ping$Response() instead.\nThis method doesn't expect any request body.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ping$Response\n                        \n                        \n                    \n                \n            \n            \n                \nping$Response(params?: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/app/api/services/ping-controller.service.ts:36\n                \n            \n\n\n            \n                \n                    This method provides access to the full HttpResponse, allowing access to response headers.\nTo access only the response body, use ping() instead.\nThis method doesn't expect any request body.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            PingControllerPingPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '/ping'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/api/services/ping-controller.service.ts:28\n                            \n                        \n\n                \n                    \n                        Path part for operation pingControllerPing\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _rootUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'http://localhost:3000/'\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseService\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseService:17\n\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { PingResponse } from '../models/ping-response';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PingControllerService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation pingControllerPing\n   */\n  static readonly PingControllerPingPath = '/ping';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `ping()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  ping$Response(params?: {\n  }): Observable> {\n\n    const rb = new RequestBuilder(this.rootUrl, PingControllerService.PingControllerPingPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse) => {\n        return r as StrictHttpResponse;\n      })\n    );\n  }\n\n  /**\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `ping$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  ping(params?: {\n  }): Observable {\n\n    return this.ping$Response(params).pipe(\n      map((r: StrictHttpResponse) => r.body as PingResponse)\n    );\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PingResponse.html":{"url":"interfaces/PingResponse.html","title":"interface - PingResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PingResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api/models/ping-response.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        date\n                                \n                                \n                                            Optional\n                                        greeting\n                                \n                                \n                                            Optional\n                                        headers\n                                \n                                \n                                            Optional\n                                        url\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        greeting\n                                    \n                                \n                                \n                                    \n                                        greeting:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                    \n                                \n                                \n                                    \n                                        headers:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface PingResponse {\n  date?: string;\n  greeting?: string;\n  headers?: { 'Content-Type'?: string, [key: string]: any };\n  url?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Pokemon.html":{"url":"interfaces/Pokemon.html","title":"interface - Pokemon","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Pokemon\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api/models/pokemon.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        attacks\n                                \n                                \n                                            Optional\n                                        classification\n                                \n                                \n                                            Optional\n                                        evolutionRequirements\n                                \n                                \n                                            Optional\n                                        evolutions\n                                \n                                \n                                        favourite\n                                \n                                \n                                            Optional\n                                        fleeRate\n                                \n                                \n                                            Optional\n                                        height\n                                \n                                \n                                        id\n                                \n                                \n                                            Optional\n                                        maxCP\n                                \n                                \n                                            Optional\n                                        maxHP\n                                \n                                \n                                            Optional\n                                        name\n                                \n                                \n                                            Optional\n                                        resistant\n                                \n                                \n                                            Optional\n                                        types\n                                \n                                \n                                            Optional\n                                        weaknesses\n                                \n                                \n                                            Optional\n                                        weight\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in src/app/api/models/pokemon.ts:18\n                            \n                        \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        attacks\n                                    \n                                \n                                \n                                    \n                                        attacks:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        classification\n                                    \n                                \n                                \n                                    \n                                        classification:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        evolutionRequirements\n                                    \n                                \n                                \n                                    \n                                        evolutionRequirements:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        evolutions\n                                    \n                                \n                                \n                                    \n                                        evolutions:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        favourite\n                                    \n                                \n                                \n                                    \n                                        favourite:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fleeRate\n                                    \n                                \n                                \n                                    \n                                        fleeRate:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                    \n                                \n                                \n                                    \n                                        height:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxCP\n                                    \n                                \n                                \n                                    \n                                        maxCP:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxHP\n                                    \n                                \n                                \n                                    \n                                        maxHP:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        resistant\n                                    \n                                \n                                \n                                    \n                                        resistant:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        types\n                                    \n                                \n                                \n                                    \n                                        types:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        weaknesses\n                                    \n                                \n                                \n                                    \n                                        weaknesses:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        weight\n                                    \n                                \n                                \n                                    \n                                        weight:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Pokemon {\n  attacks?: {  };\n  classification?: string;\n  evolutionRequirements?: {  };\n  evolutions?: Array;\n  fleeRate?: number;\n  height?: {  };\n  id: string;\n  favourite: boolean;\n  maxCP?: number;\n  maxHP?: number;\n  name?: string;\n  resistant?: Array;\n  types?: Array;\n  weaknesses?: Array;\n  weight?: {  };\n\n  [key: string]: any;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PokemonPartial.html":{"url":"interfaces/PokemonPartial.html","title":"interface - PokemonPartial","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PokemonPartial\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api/models/pokemon-partial.ts\n        \n\n            \n                Description\n            \n            \n                (tsType: Partial, schemaOptions: { partial: true })\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        attacks\n                                \n                                \n                                            Optional\n                                        classification\n                                \n                                \n                                            Optional\n                                        evolutionRequirements\n                                \n                                \n                                            Optional\n                                        evolutions\n                                \n                                \n                                            Optional\n                                        favourite\n                                \n                                \n                                            Optional\n                                        fleeRate\n                                \n                                \n                                            Optional\n                                        height\n                                \n                                \n                                            Optional\n                                        id\n                                \n                                \n                                            Optional\n                                        maxCP\n                                \n                                \n                                            Optional\n                                        maxHP\n                                \n                                \n                                            Optional\n                                        name\n                                \n                                \n                                            Optional\n                                        resistant\n                                \n                                \n                                            Optional\n                                        types\n                                \n                                \n                                            Optional\n                                        weaknesses\n                                \n                                \n                                            Optional\n                                        weight\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in src/app/api/models/pokemon-partial.ts:22\n                            \n                        \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        attacks\n                                    \n                                \n                                \n                                    \n                                        attacks:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        classification\n                                    \n                                \n                                \n                                    \n                                        classification:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        evolutionRequirements\n                                    \n                                \n                                \n                                    \n                                        evolutionRequirements:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        evolutions\n                                    \n                                \n                                \n                                    \n                                        evolutions:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        favourite\n                                    \n                                \n                                \n                                    \n                                        favourite:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fleeRate\n                                    \n                                \n                                \n                                    \n                                        fleeRate:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                    \n                                \n                                \n                                    \n                                        height:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxCP\n                                    \n                                \n                                \n                                    \n                                        maxCP:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxHP\n                                    \n                                \n                                \n                                    \n                                        maxHP:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        resistant\n                                    \n                                \n                                \n                                    \n                                        resistant:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        types\n                                    \n                                \n                                \n                                    \n                                        types:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        weaknesses\n                                    \n                                \n                                \n                                    \n                                        weaknesses:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        weight\n                                    \n                                \n                                \n                                    \n                                        weight:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface PokemonPartial {\n  attacks?: {  };\n  classification?: string;\n  evolutionRequirements?: {  };\n  evolutions?: Array;\n  fleeRate?: number;\n  height?: {  };\n  id?: string;\n  favourite?: boolean;\n  maxCP?: number;\n  maxHP?: number;\n  name?: string;\n  resistant?: Array;\n  types?: Array;\n  weaknesses?: Array;\n  weight?: {  };\n\n  [key: string]: any;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PokemonWithRelations.html":{"url":"interfaces/PokemonWithRelations.html","title":"interface - PokemonWithRelations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PokemonWithRelations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api/models/pokemon-with-relations.ts\n        \n\n            \n                Description\n            \n            \n                (tsType: PokemonWithRelations, schemaOptions: { includeRelations: true })\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        attacks\n                                \n                                \n                                            Optional\n                                        classification\n                                \n                                \n                                            Optional\n                                        evolutionRequirements\n                                \n                                \n                                            Optional\n                                        evolutions\n                                \n                                \n                                        favourite\n                                \n                                \n                                            Optional\n                                        fleeRate\n                                \n                                \n                                            Optional\n                                        height\n                                \n                                \n                                        id\n                                \n                                \n                                            Optional\n                                        maxCP\n                                \n                                \n                                            Optional\n                                        maxHP\n                                \n                                \n                                            Optional\n                                        name\n                                \n                                \n                                            Optional\n                                        resistant\n                                \n                                \n                                            Optional\n                                        types\n                                \n                                \n                                            Optional\n                                        weaknesses\n                                \n                                \n                                            Optional\n                                        weight\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in src/app/api/models/pokemon-with-relations.ts:22\n                            \n                        \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        attacks\n                                    \n                                \n                                \n                                    \n                                        attacks:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        classification\n                                    \n                                \n                                \n                                    \n                                        classification:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        evolutionRequirements\n                                    \n                                \n                                \n                                    \n                                        evolutionRequirements:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        evolutions\n                                    \n                                \n                                \n                                    \n                                        evolutions:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        favourite\n                                    \n                                \n                                \n                                    \n                                        favourite:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fleeRate\n                                    \n                                \n                                \n                                    \n                                        fleeRate:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                    \n                                \n                                \n                                    \n                                        height:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxCP\n                                    \n                                \n                                \n                                    \n                                        maxCP:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxHP\n                                    \n                                \n                                \n                                    \n                                        maxHP:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        resistant\n                                    \n                                \n                                \n                                    \n                                        resistant:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        types\n                                    \n                                \n                                \n                                    \n                                        types:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        weaknesses\n                                    \n                                \n                                \n                                    \n                                        weaknesses:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        weight\n                                    \n                                \n                                \n                                    \n                                        weight:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface PokemonWithRelations {\n  attacks?: {  };\n  classification?: string;\n  evolutionRequirements?: {  };\n  evolutions?: Array;\n  fleeRate?: number;\n  height?: {  };\n  id: string;\n  favourite: boolean;\n  maxCP?: number;\n  maxHP?: number;\n  name?: string;\n  resistant?: Array;\n  types?: Array;\n  weaknesses?: Array;\n  weight?: {  };\n\n  [key: string]: any;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PokemonsComponent.html":{"url":"components/PokemonsComponent.html","title":"component - PokemonsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  PokemonsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pokemons/pokemons.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-pokemons\n            \n\n            \n                styleUrls\n                ./pokemons.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./pokemons.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                button\n                            \n                            \n                                createPokemon\n                            \n                            \n                                    Public\n                                currentRecords\n                            \n                            \n                                    Private\n                                filterOrder\n                            \n                            \n                                    Public\n                                havePagination\n                            \n                            \n                                    Public\n                                initialPagination\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                nrOfRecords\n                            \n                            \n                                pokemons\n                            \n                            \n                                    Public\n                                pokemonService\n                            \n                            \n                                    Public\n                                showCurrentRecords\n                            \n                            \n                                    Public\n                                skipRecords\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createPokemons\n                            \n                            \n                                deleteAll\n                            \n                            \n                                filterBy\n                            \n                            \n                                getPokemons\n                            \n                            \n                                getPokemonsById\n                            \n                            \n                                getPokemonsCount\n                            \n                            \n                                getPokemonsWithPagination\n                            \n                            \n                                makeItFavourite\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                open\n                            \n                            \n                                refresh\n                            \n                            \n                                searchBy\n                            \n                            \n                                updatePokemon\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(pokemonService: PokemonControllerService, modalService: NgbModal)\n                    \n                \n                        \n                            \n                                Defined in src/app/pokemons/pokemons.component.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pokemonService\n                                                  \n                                                        \n                                                                        PokemonControllerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        modalService\n                                                  \n                                                        \n                                                                    NgbModal\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createPokemons\n                        \n                        \n                    \n                \n            \n            \n                \ncreatePokemons()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pokemons/pokemons.component.ts:188\n                \n            \n\n\n            \n                \n                    Method to create a new pokemon\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteAll\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteAll()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pokemons/pokemons.component.ts:58\n                \n            \n\n\n            \n                \n                    Method to delete all records on database\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            filterBy\n                        \n                        \n                    \n                \n            \n            \n                \nfilterBy(type: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pokemons/pokemons.component.ts:147\n                \n            \n\n\n            \n                \n                    Method to filter pokemon by type\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : {string} - The type characteristic of pokemon to be search\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPokemons\n                        \n                        \n                    \n                \n            \n            \n                \ngetPokemons()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pokemons/pokemons.component.ts:49\n                \n            \n\n\n            \n                \n                    Method to get all pokemons into a object array\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPokemonsById\n                        \n                        \n                    \n                \n            \n            \n                \ngetPokemonsById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pokemons/pokemons.component.ts:125\n                \n            \n\n\n            \n                \n                    Method to get pokemon by its id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : {string} - Id of the desired pokemon\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPokemonsCount\n                        \n                        \n                    \n                \n            \n            \n                \ngetPokemonsCount()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pokemons/pokemons.component.ts:71\n                \n            \n\n\n            \n                \n                    Method to count the number of records into database\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPokemonsWithPagination\n                        \n                        \n                    \n                \n            \n            \n                \ngetPokemonsWithPagination(position: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pokemons/pokemons.component.ts:84\n                \n            \n\n\n            \n                \n                    Method to get pokemons using pagination\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    position\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            makeItFavourite\n                        \n                        \n                    \n                \n            \n            \n                \nmakeItFavourite(element: EventTarget, mark: string, pokemonId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pokemons/pokemons.component.ts:170\n                \n            \n\n\n            \n                \n                    Method to toggle a pokemon as favourite\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    element\n                                    \n                                            EventTarget\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : {ElementTarget} - The selected element\n\n                                    \n                                \n                                \n                                    mark\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : {string} - The string to be shown\n\n                                    \n                                \n                                \n                                    pokemonId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : {string} - Id of the pokemon to be (u)selected as favourite\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pokemons/pokemons.component.ts:226\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pokemons/pokemons.component.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            open\n                        \n                        \n                    \n                \n            \n            \n                \nopen(dataPok: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pokemons/pokemons.component.ts:39\n                \n            \n\n\n            \n                \n                    Method to open a modal with pokemon information\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataPok\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : {any} - data array of pokemons\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            refresh\n                        \n                        \n                    \n                \n            \n            \n                \nrefresh()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pokemons/pokemons.component.ts:222\n                \n            \n\n\n            \n                \n                    Method to refresh the window\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            searchBy\n                        \n                        \n                    \n                \n            \n            \n                \nsearchBy(type: string, text: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pokemons/pokemons.component.ts:136\n                \n            \n\n\n            \n                \n                    Method to search pokemons by its types\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : {string} - The type value to be search\n\n                                    \n                                \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : {string} - The text to be found}\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updatePokemon\n                        \n                        \n                    \n                \n            \n            \n                \nupdatePokemon(id: string, value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pokemons/pokemons.component.ts:115\n                \n            \n\n\n            \n                \n                    Method to handle pokemon as favourite\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : {string} -Id of the pokemon to be selected\n\n                                    \n                                \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : {boolean} - The value to set if the current pokemon should be true or false\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            button\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/pokemons/pokemons.component.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createPokemon\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Pokemon\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pokemons/pokemons.component.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            currentRecords\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pokemons/pokemons.component.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            filterOrder\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ASC'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pokemons/pokemons.component.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            havePagination\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pokemons/pokemons.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            initialPagination\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pokemons/pokemons.component.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pokemons/pokemons.component.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            nrOfRecords\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pokemons/pokemons.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pokemons\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pokemons/pokemons.component.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            pokemonService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PokemonControllerService\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pokemons/pokemons.component.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            showCurrentRecords\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pokemons/pokemons.component.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            skipRecords\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pokemons/pokemons.component.ts:18\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {Pokemon} from '../api/models/pokemon';\nimport {PokemonControllerService} from '../api/services/pokemon-controller.service';\nimport {NgbModal} from '@ng-bootstrap/ng-bootstrap';\nimport {ModalComponent} from '../modal/modal.component';\nimport PokemonImg from 'pokemon-images';\n\n@Component({\n  selector: 'app-pokemons',\n  templateUrl: './pokemons.component.html',\n  styleUrls: ['./pokemons.component.scss']\n})\nexport class PokemonsComponent implements OnInit, OnDestroy {\n  private filterOrder = 'ASC';\n\n  public button;\n  public currentRecords = 10;\n  public skipRecords = 0;\n  public showCurrentRecords: number;\n  public name: string;\n  public nrOfRecords: number;\n  public initialPagination = true;\n  public havePagination: boolean;\n\n  constructor(public pokemonService: PokemonControllerService, private modalService: NgbModal) {\n  }\n\n  pokemons: any = [];\n  createPokemon: Pokemon;\n\n  ngOnInit(): void {\n    this.getPokemonsCount();\n  }\n\n  /**\n   * Method to open a modal with pokemon information\n   * @param dataPok: {any} - data array of pokemons\n   */\n  open(dataPok: any) {\n    const nameOfPokemon = dataPok.name.toLowerCase();\n    dataPok.url = PokemonImg.getSprite(nameOfPokemon);\n    const modalRef = this.modalService.open(ModalComponent);\n    modalRef.componentInstance.name = dataPok;\n  }\n\n  /**\n   * Method to get all pokemons into a object array\n   */\n  getPokemons() {\n    this.pokemonService.find().subscribe(pokemons => {\n      this.pokemons = pokemons;\n    });\n  }\n\n  /**\n   * Method to delete all records on database\n   */\n  deleteAll(): void {\n    this.pokemonService.find().subscribe(pokemons => {\n      this.pokemons = pokemons;\n      this.pokemons.forEach(pokemon => {\n        this.pokemonService.deleteById({id: pokemon.id}).subscribe();\n      });\n      this.pokemonService.fillDatabase();\n    });\n  }\n\n  /**\n   * Method to count the number of records into database\n   */\n  getPokemonsCount(): void {\n    this.pokemonService.count().subscribe(nrPokemons => {\n      this.nrOfRecords = nrPokemons.count;\n      if (this.nrOfRecords  {\n      this.pokemons = pokemons;\n      this.initialPagination = false;\n    });\n  }\n\n  /**\n   * Method to handle pokemon as favourite\n   * @param id: {string} -Id of the pokemon to be selected\n   * @param value: {boolean} - The value to set if the current pokemon should be true or false\n   */\n  updatePokemon(id: string, value: boolean) {\n    this.pokemonService.updateById({id, body: {favourite: value}}).subscribe(res => {\n      console.log(res);\n    });\n  }\n\n  /**\n   * Method to get pokemon by its id\n   * @param id: {string} - Id of the desired pokemon\n   */\n  getPokemonsById(id: string): void {\n    this.pokemonService.findById({id}).subscribe(pokemon => {\n      this.pokemons = [pokemon];\n    });\n  }\n\n  /**\n   * Method to search pokemons by its types\n   * @param type: {string} - The type value to be search\n   * @param text: {string} - The text to be found}\n   */\n  searchBy(type: string, text: string) {\n    this.havePagination = false;\n    this.pokemonService.searchBy(type, text).subscribe(result => {\n      this.pokemons = result;\n    });\n  }\n\n  /**\n   * Method to filter pokemon by type\n   * @param type: {string} - The type characteristic of pokemon to be search\n   */\n  filterBy(type: string) {\n    this.havePagination = false;\n    if (this.filterOrder === 'ASC') {\n      this.pokemonService.filterBy(type, 'ASC').subscribe(result => {\n        this.pokemons = result;\n        this.filterOrder = 'DESC';\n      });\n    }\n\n    if (this.filterOrder === 'DESC') {\n      this.pokemonService.filterBy(type, 'DESC').subscribe(result => {\n        this.pokemons = result;\n        this.filterOrder = 'ASC';\n      });\n    }\n  }\n\n  /**\n   * Method to toggle a pokemon as favourite\n   * @param element: {ElementTarget} - The selected element\n   * @param mark: {string} - The string to be shown\n   * @param pokemonId: {string} - Id of the pokemon to be (u)selected as favourite\n   */\n  makeItFavourite(element: EventTarget, mark: string, pokemonId: string) {\n    if (mark === 'mark') {\n      this.button = element;\n      this.button.textContent = 'I am your favourite';\n      this.button.style.backgroundColor = 'lightyellow';\n      this.updatePokemon(pokemonId, true);\n    }\n    if (mark === 'unmark') {\n      this.button = element;\n      this.button.textContent = 'I am not your favourite';\n      this.button.style.backgroundColor = 'transparent';\n      this.updatePokemon(pokemonId, false);\n    }\n  }\n\n  /**\n   * Method to create a new pokemon\n   */\n  createPokemons(): void {\n    let newPokemon: Pokemon;\n    newPokemon = {\n      id: 'angular',\n      name: 'ewefwef',\n      classification: 'string',\n      types: [\n        'string'\n      ],\n      resistant: [\n        'string'\n      ],\n      weaknesses: [\n        'string'\n      ],\n      weight: {},\n      height: {},\n      fleeRate: 0,\n      evolutionRequirements: {},\n      evolutions: [\n        {}\n      ],\n      favourite: false,\n      maxCP: 0,\n      maxHP: 0,\n      attacks: {},\n      additionalProp1: {}\n    };\n    this.pokemonService.create({body: newPokemon}).subscribe(res => console.log(res));\n  }\n\n  /**\n   * Method to refresh the window\n   */\n  refresh(): void {\n    window.location.reload();\n  }\n\n  ngOnDestroy() {\n  }\n}\n\n    \n\n    \n        \nFind by ID\n\n\nFind by Name\n\nFilter by Type (All) ↑/↓\nFilter by Favourite (All) ↑/↓\nReload / Reset\n\n\n  \n  \n    ID\n    Name\n    Type\n    Details\n    Favourite\n  \n  \n  \n  \n    {{pokemon.id}}\n    {{pokemon.name}}\n    {{pokemon.types}}\n    \n      View\n    \n    \n      I am your\n        favourite\n      \n      I am not your favourite\n      \n    \n  \n  \n\nPrevious PageNext Page\n{{this.showCurrentRecords}} of total {{this.nrOfRecords}}\n\n    \n\n    \n                \n                    ./pokemons.component.scss\n                \n                .space {\n  margin-left: 15px;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Find by IDFind by NameFilter by Type (All) ↑/↓Filter by Favourite (All) ↑/↓Reload / Reset        ID    Name    Type    Details    Favourite            {{pokemon.id}}    {{pokemon.name}}    {{pokemon.types}}          View              I am your        favourite            I am not your favourite              Previous PageNext Page{{this.showCurrentRecords}} of total {{this.nrOfRecords}}'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ModalComponent', 'selector': 'app-modal'},{'name': 'PokemonsComponent', 'selector': 'app-pokemons'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'PokemonsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryParameter.html":{"url":"classes/QueryParameter.html","title":"class - QueryParameter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryParameter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api/request-builder.ts\n        \n\n            \n                Description\n            \n            \n                A parameter in the query\n\n            \n\n            \n                Extends\n            \n            \n                        Parameter\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                options\n                            \n                            \n                                    Public\n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                append\n                            \n                            \n                                serializeValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, value: any, options: ParameterOptions)\n                    \n                \n                        \n                            \n                                Defined in src/app/api/request-builder.ts:117\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        ParameterOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Parameter\n\n                                \n                            \n                        \n                            \n                                    Defined in         Parameter:40\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            options\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ParameterOptions\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Parameter\n\n                                \n                            \n                        \n                            \n                                    Defined in         Parameter:40\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Parameter\n\n                                \n                            \n                        \n                            \n                                    Defined in         Parameter:40\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            append\n                        \n                        \n                    \n                \n            \n            \n                \nappend(params: HttpParams)\n                \n            \n\n\n            \n                \n                    Defined in src/app/api/request-builder.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                HttpParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         HttpParams\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            serializeValue\n                        \n                        \n                    \n                \n            \n            \n                \nserializeValue(value: any, separator: string)\n                \n            \n\n\n            \n                \n                    Inherited from         Parameter\n\n                \n            \n            \n                \n                        Defined in         Parameter:50\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    separator\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ','\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map();\n  private _query = new Map();\n  private _header = new Map();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RequestBuilder.html":{"url":"classes/RequestBuilder.html","title":"class - RequestBuilder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RequestBuilder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api/request-builder.ts\n        \n\n            \n                Description\n            \n            \n                Helper to build http requests from parameters\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _bodyContent\n                            \n                            \n                                    Optional\n                                _bodyContentType\n                            \n                            \n                                    Private\n                                _header\n                            \n                            \n                                    Private\n                                _path\n                            \n                            \n                                    Private\n                                _query\n                            \n                            \n                                    Public\n                                method\n                            \n                            \n                                    Public\n                                operationPath\n                            \n                            \n                                    Public\n                                rootUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                body\n                            \n                            \n                                build\n                            \n                            \n                                    Private\n                                formDataValue\n                            \n                            \n                                header\n                            \n                            \n                                path\n                            \n                            \n                                query\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rootUrl: string, operationPath: string, method: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/api/request-builder.ts:204\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rootUrl\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        operationPath\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        method\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            _bodyContent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any | null\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/api/request-builder.ts:203\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            _bodyContentType\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/api/request-builder.ts:204\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _header\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/api/request-builder.ts:202\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _path\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/api/request-builder.ts:200\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _query\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/api/request-builder.ts:201\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            method\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/api/request-builder.ts:209\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            operationPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/api/request-builder.ts:208\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            rootUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/api/request-builder.ts:207\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            body\n                        \n                        \n                    \n                \n            \n            \n                \nbody(value: any, contentType: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/api/request-builder.ts:236\n                \n            \n\n\n            \n                \n                    Sets the body content, along with the content type\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    contentType\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'application/json'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            build\n                        \n                        \n                    \n                \n            \n            \n                \nbuild(options?: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/app/api/request-builder.ts:302\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Builds the request with the current set parameters\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     HttpRequest\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            formDataValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    formDataValue(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/api/request-builder.ts:286\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            header\n                        \n                        \n                    \n                \n            \n            \n                \nheader(name: string, value: any, options?: ParameterOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/app/api/request-builder.ts:229\n                \n            \n\n\n            \n                \n                    Sets a header parameter\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ParameterOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            path\n                        \n                        \n                    \n                \n            \n            \n                \npath(name: string, value: any, options?: ParameterOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/app/api/request-builder.ts:215\n                \n            \n\n\n            \n                \n                    Sets a path parameter\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ParameterOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            query\n                        \n                        \n                    \n                \n            \n            \n                \nquery(name: string, value: any, options?: ParameterOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/app/api/request-builder.ts:222\n                \n            \n\n\n            \n                \n                    Sets a query parameter\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ParameterOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map();\n  private _query = new Map();\n  private _header = new Map();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                e2e/src/app.po.ts\n            \n            class\n            AppPage\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/api.service.ts\n            \n            injectable\n            ApiService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/api/api-configuration.ts\n            \n            injectable\n            ApiConfiguration\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/api/api-configuration.ts\n            \n            interface\n            ApiConfigurationParams\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/api/base-service.ts\n            \n            injectable\n            BaseService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/api/models/loopback/count.ts\n            \n            interface\n            Count\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/api/models/new-pokemon.ts\n            \n            interface\n            NewPokemon\n            \n                6 %\n                (1/15)\n            \n        \n        \n            \n                \n                src/app/api/models/ping-response.ts\n            \n            interface\n            PingResponse\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/api/models/pokemon-partial.ts\n            \n            interface\n            PokemonPartial\n            \n                6 %\n                (1/16)\n            \n        \n        \n            \n                \n                src/app/api/models/pokemon-with-relations.ts\n            \n            interface\n            PokemonWithRelations\n            \n                6 %\n                (1/16)\n            \n        \n        \n            \n                \n                src/app/api/models/pokemon.ts\n            \n            interface\n            Pokemon\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/app/api/request-builder.ts\n            \n            class\n            HeaderParameter\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/app/api/request-builder.ts\n            \n            class\n            Parameter\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/app/api/request-builder.ts\n            \n            class\n            ParameterCodec\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/api/request-builder.ts\n            \n            class\n            PathParameter\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/app/api/request-builder.ts\n            \n            class\n            QueryParameter\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/app/api/request-builder.ts\n            \n            class\n            RequestBuilder\n            \n                37 %\n                (6/16)\n            \n        \n        \n            \n                \n                src/app/api/request-builder.ts\n            \n            interface\n            ParameterOptions\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/api/request-builder.ts\n            \n            variable\n            ParameterCodecInstance\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/api/services/ping-controller.service.ts\n            \n            injectable\n            PingControllerService\n            \n                50 %\n                (3/6)\n            \n        \n        \n            \n                \n                src/app/api/services/pokemon-controller.service.ts\n            \n            injectable\n            PokemonControllerService\n            \n                77 %\n                (24/31)\n            \n        \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/modal/modal.component.ts\n            \n            component\n            ModalComponent\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/pokemons/pokemons.component.ts\n            \n            component\n            PokemonsComponent\n            \n                42 %\n                (12/28)\n            \n        \n        \n            \n                \n                src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/environments/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test.ts\n            \n            variable\n            context\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test.ts\n            \n            variable\n            require\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~9.1.11\n        \n            @angular/common : ~9.1.11\n        \n            @angular/compiler : ~9.1.11\n        \n            @angular/core : ~9.1.11\n        \n            @angular/forms : ~9.1.11\n        \n            @angular/localize : ^9.1.13\n        \n            @angular/platform-browser : ~9.1.11\n        \n            @angular/platform-browser-dynamic : ~9.1.11\n        \n            @angular/router : ~9.1.11\n        \n            @ng-bootstrap/ng-bootstrap : ^9.1.1\n        \n            bootstrap : ^5.0.1\n        \n            jquery : ^3.6.0\n        \n            pokemon-images : ^2.0.1\n        \n            rxjs : ~6.5.4\n        \n            tslib : ^1.10.0\n        \n            zone.js : ~0.10.2\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nPokemonApp\n\nThis project was generated with Angular CLI version 9.1.8.\nDepends on loopback OpenAPI v4 (see root README.md for more info)\n\nRequirements\n\nRun the PokemonAPI before this project starts\n\nRun npm install on the root directory\n\n\nNote: On MacOS you need to have xcode-tools installed\nDocumentation guide code\nIf you want to build:\n\nRun npm run generate-docs on root folder\nGo to folder documentation\nOpen index.html on your browser\n\nIf you want to serve:\n\nRun npm run serve-docs on root folder\nOpen your browser at http://127.0.0.1:8080\nNavigate\n\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning lint tests\nRun ng lint to execute the unit tests via Karma.\nOperate the App\n\nInitial State\nWhen load you get the Pokémon in a pagination style\nUse previous / next to navigate between pages\n\n\nSearch\nYou can search by name or Id, select the input you want\n\n\nFilters\nThere are 2 types of filter: by Type and by Favourite\nThe filters result return all the records\nSorting is available, click again on desired filter and ir sort by ASC/DESC order\n\n\nReset / Reload\nAt any time you can reset the page to its initial state\n\n\n\n\nTotal information of Pokémon\nOn the table at column Details click on View, a popup will appear with all details of the pokenon\n\n\n\n\nMark / Unmark a pokemon as favourite\nI am not your favourite means the current Pokémon is not favourite, to mark click on the button\nI am your favourite means the current Pokémon is favourite, to unmark click on the button\nA color indicate the favourite state: yellow = favourite, grey = not favourite\n\n\n\n\nOther options\nCreate a Pokémon is available at the code but disable by default\nYou can use the API standard format or the OpenAPI format, both ways are usedProvided by: Bruno Januário\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ApiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ApiModule\n\n\n\ncluster_ApiModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nApiConfiguration\n\nApiConfiguration\n\n\n\nApiModule\n\nApiModule\n\nApiModule -->\n\nApiConfiguration->ApiModule\n\n\n\n\n\nPingControllerService\n\nPingControllerService\n\nApiModule -->\n\nPingControllerService->ApiModule\n\n\n\n\n\nPokemonControllerService\n\nPokemonControllerService\n\nApiModule -->\n\nPokemonControllerService->ApiModule\n\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nModalComponent\n\nModalComponent\n\nAppModule -->\n\nModalComponent->AppModule\n\n\n\n\n\nPokemonsComponent\n\nPokemonsComponent\n\nAppModule -->\n\nPokemonsComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Components\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    8 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            StrictHttpResponse   (src/.../strict-http-response.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/api/strict-http-response.ts\n    \n    \n        \n            \n                \n                    \n                    StrictHttpResponse\n                \n            \n            \n                \n                    Constrains the http response to not have the body defined as T | null, but T only.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            context   (src/.../test.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            ParameterCodecInstance   (src/.../request-builder.ts)\n                        \n                        \n                            require   (src/.../test.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/test.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            context\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require.context('./', true, /\\.spec\\.ts$/)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            require\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: true\n}\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: false\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/api/request-builder.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ParameterCodecInstance\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new ParameterCodec()\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
