var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/ApiConfiguration.html",[0,1.143,1,1.359]],["body/injectables/ApiConfiguration.html",[0,2.002,1,2.382,2,2.673,3,0.405,4,0.345,5,0.345,6,3.976,7,3.359,8,1.1,9,4.58,10,3.164,11,0.405,12,0.89,13,2.204,14,0.405,15,0.034,16,1.049,17,1.554,18,1.31,19,0.676,20,4.646,21,0.832,22,1.554,23,2.978,24,2.202,25,0.48,26,0.286,27,1.202,28,3.87,29,0.405,30,2.673,31,0.024,32,0.028,33,0.024]],["title/interfaces/ApiConfigurationParams.html",[29,0.274,30,1.806]],["body/interfaces/ApiConfigurationParams.html",[0,2.007,1,2.022,3,0.407,4,0.346,5,0.346,6,3.375,7,3.375,8,1.106,9,3.888,10,2.686,11,0.407,12,0.892,13,2.252,14,0.407,15,0.034,16,1.085,21,0.836,22,1.561,23,2.992,24,2.213,25,0.481,26,0.288,27,1.426,28,4.593,29,0.407,30,3.172,31,0.024,32,0.028,33,0.024,34,1.852,35,0.892]],["title/modules/ApiModule.html",[36,1.806,37,2.012]],["body/modules/ApiModule.html",[1,2.64,3,0.339,4,0.288,5,0.288,8,0.92,10,3.112,14,0.339,15,0.034,19,0.565,21,1.091,22,1.298,25,0.339,26,0.239,27,1.004,30,3.273,31,0.02,32,0.025,33,0.02,35,0.921,36,3.112,37,4.067,38,2.234,39,2.234,40,2.022,41,3.561,42,2.022,43,4.114,44,3.561,45,3.234,46,3.234,47,3.452,48,3.845,49,3.561,50,2.489,51,2.489,52,3.882,53,4.103,54,4.103,55,1.298,56,4.103,57,3.882,58,4.925,59,3.882,60,0.695,61,1.954,62,1.192,63,5.409,64,3.882,65,3.882,66,3.882,67,4.506,68,4.925,69,3.561,70,1.298,71,2.807,72,3.882,73,4.103,74,3.882,75,3.234,76,1.298,77,3.882,78,3.882,79,1.095,80,4.925,81,1.647,82,4.925,83,1.389,84,3.882,85,3.882,86,3.882,87,1.414,88,2.834,89,3.882,90,3.882,91,3.234,92,3.882,93,1.682,94,3.882]],["title/injectables/ApiService.html",[0,1.143,95,2.269]],["body/injectables/ApiService.html",[0,2.065,2,2.818,3,0.427,4,0.363,5,0.363,15,0.033,19,0.713,21,0.877,22,1.638,23,3.14,24,2.322,25,0.427,26,0.302,31,0.025,32,0.029,33,0.025,79,1.688,95,4.1,96,4.08,97,4.898]],["title/components/AppComponent.html",[98,1.359,99,1.488]],["body/components/AppComponent.html",[3,0.387,4,0.329,5,0.329,11,0.387,12,0.865,14,0.387,15,0.034,16,0.793,17,1.482,18,1.25,19,0.645,21,0.793,22,1.482,24,2.534,25,0.387,26,0.273,31,0.023,32,0.028,33,0.023,40,2.308,60,0.957,98,2.486,99,2.825,100,3.426,101,3.204,102,3.204,103,3.204,104,3.204,105,3.692,106,3.204,107,4.41,108,3.91,109,3.865,110,5.739,111,3.865,112,5.345,113,4.781,114,4.453,115,4.431,116,3.865,117,1.787,118,3.204,119,4.309,120,3.204,121,3.204,122,2.101,123,3.204,124,2.101,125,3.204,126,3.204,127,3.204]],["title/modules/AppModule.html",[36,1.806,88,1.806]],["body/modules/AppModule.html",[3,0.369,4,0.314,5,0.314,15,0.034,21,1.122,22,1.414,25,0.369,26,0.261,31,0.022,32,0.027,33,0.022,36,2.434,38,2.434,39,2.434,40,2.203,41,4.066,42,3.055,43,3.757,44,3.059,49,3.757,50,2.711,51,2.711,67,4.328,70,1.414,75,3.524,88,3.676,91,4.328,99,3.042,122,2.905,124,2.905,128,3.524,129,3.524,130,3.524,131,4.23,132,5.195,133,3.524,134,2.711,135,4.23,136,4.23,137,4.23,138,3.524,139,3.524,140,2.711,141,5.195,142,5.195,143,2.434,144,2.711,145,3.524,146,4.23]],["title/classes/AppPage.html",[26,0.193,147,2.269]],["body/classes/AppPage.html",[3,0.41,4,0.348,5,0.348,11,0.41,15,0.033,19,0.805,21,0.841,24,2.227,25,0.41,26,0.289,31,0.024,32,0.028,33,0.024,55,1.85,62,1.7,76,1.85,117,1.571,134,3.011,147,4.001,148,2.035,149,3.913,150,6.074,151,6.074,152,4.697,153,6.279,154,4.697,155,3.913,156,4.697,157,4.697,158,1.864,159,4.697]],["title/injectables/BaseService.html",[0,1.143,160,2.012]],["body/injectables/BaseService.html",[0,1.819,1,2.484,2,2.285,3,0.346,4,0.295,5,0.295,8,0.94,10,2.285,11,0.346,12,0.808,13,2.152,14,0.477,15,0.034,16,1.097,17,1.328,18,1.12,19,0.835,21,0.979,22,1.328,24,2.719,25,0.346,26,0.337,27,1.292,31,0.02,32,0.026,33,0.02,35,0.808,54,4.161,60,0.894,62,1.762,69,4.147,70,1.328,71,3.952,76,1.328,79,1.409,81,1.828,87,1.819,160,3.202,161,4.924,162,3.308,163,1.99,164,4.553,165,4.995,166,3.308,167,3.97,168,4.161,169,4.161,170,3.97,171,3.97,172,3.97,173,2.276,174,5.735,175,5.026,176,2.169,177,4.995,178,4.995,179,4.995,180,3.97,181,3.97,182,2.164,183,1.446,184,4.995,185,4.995,186,3.97,187,3.97]],["title/interfaces/Count.html",[29,0.274,188,2.012]],["body/interfaces/Count.html",[3,0.429,4,0.365,5,0.365,11,0.429,12,0.92,14,0.429,15,0.032,25,0.429,29,0.429,31,0.025,32,0.029,33,0.025,34,1.95,35,0.92,188,4.065,189,4.094,190,3.122]],["title/classes/HeaderParameter.html",[26,0.193,191,1.245]],["body/classes/HeaderParameter.html",[3,0.146,4,0.124,5,0.124,8,0.397,11,0.146,12,0.434,13,0.61,14,0.44,15,0.034,16,1.104,17,0.56,18,1.784,19,0.652,21,0.3,25,0.146,26,0.29,27,1.264,29,0.146,31,0.009,32,0.014,33,0.009,35,0.543,55,0.897,60,0.926,61,1.866,62,0.824,70,0.56,76,1.912,79,0.756,81,1.122,83,1.49,87,0.61,93,0.725,117,0.56,148,0.725,158,1.666,163,1.397,173,1.331,176,0.665,182,1.662,183,1.397,191,1.064,192,1.331,193,0.665,194,2.384,195,1.818,196,1.819,197,1.662,198,2.096,199,2.79,200,1.99,201,1.719,202,1.819,203,2.096,204,1.675,205,2.459,206,2.426,207,1.272,208,2.55,209,1.675,210,1.777,211,1.272,212,2.317,213,1.211,214,1.272,215,1.272,216,2.23,217,0.794,218,0.794,219,0.794,220,1.453,221,0.794,222,0.794,223,1.272,224,0.794,225,0.977,226,0.665,227,0.794,228,0.794,229,0.794,230,0.794,231,0.794,232,0.794,233,0.794,234,0.794,235,2.403,236,1.064,237,0.794,238,0.794,239,0.794,240,1.272,241,1.03,242,0.794,243,0.665,244,1.272,245,1.272,246,0.794,247,2.317,248,2.516,249,2.55,250,2.317,251,2.184,252,1.548,253,1.272,254,0.794,255,1.99,256,1.777,257,1.548,258,1.59,259,2.59,260,1.59,261,0.794,262,0.794,263,1.272,264,1.272,265,0.794,266,1.272,267,0.725,268,2.184,269,0.665,270,1.59,271,1.272,272,1.064,273,0.794,274,2.504,275,2.317,276,0.794,277,0.794,278,0.794,279,0.794,280,0.794,281,0.794,282,0.794,283,0.794,284,1.819,285,0.794,286,0.794,287,0.794,288,1.272,289,1.272,290,0.794,291,0.794,292,1.59,293,0.725,294,0.794,295,0.794,296,0.794,297,0.794,298,0.794,299,0.794,300,1.59,301,0.665,302,1.819,303,0.56,304,0.794,305,1.272,306,1.819,307,1.819,308,1.272,309,0.794,310,0.794,311,1.59,312,0.794,313,0.794,314,1.59,315,1.59,316,0.794,317,1.272,318,0.794,319,0.725,320,0.794,321,0.794,322,0.794,323,0.794,324,0.794,325,0.794,326,0.794,327,0.794,328,1.272,329,0.794,330,0.725,331,0.794,332,0.61,333,0.794,334,1.453,335,0.794,336,0.794,337,0.794,338,0.794,339,0.794,340,0.665,341,0.794,342,0.794,343,0.794,344,0.794,345,0.794,346,0.794,347,0.794,348,0.794,349,0.794,350,0.977,351,0.794,352,0.794,353,1.272,354,0.725,355,1.59,356,2.123,357,0.794,358,0.794,359,0.794,360,0.794,361,0.794,362,1.453,363,2.317,364,1.59,365,1.272,366,0.794,367,1.99,368,0.794,369,0.794,370,0.794,371,0.794,372,1.819,373,2.123,374,0.794,375,0.794,376,0.794,377,0.794,378,0.794,379,0.794,380,0.725,381,0.794,382,0.472,383,1.162,384,0.794,385,0.665,386,1.162,387,0.725,388,0.725,389,0.794,390,0.794,391,0.794,392,0.794,393,0.794,394,0.794,395,1.272,396,0.794,397,0.794,398,0.794,399,0.794,400,0.794,401,0.794,402,0.794,403,0.794,404,0.794,405,1.272,406,0.794,407,0.794,408,0.794,409,0.794,410,0.794,411,0.794,412,0.794,413,0.794,414,0.794]],["title/components/ModalComponent.html",[98,1.359,122,1.488]],["body/components/ModalComponent.html",[3,0.311,4,0.265,5,0.265,11,0.311,12,0.755,14,0.521,15,0.033,19,0.802,21,0.835,22,1.193,25,0.311,26,0.22,27,0.922,31,0.018,32,0.024,33,0.018,35,0.577,40,1.857,42,1.857,55,1.559,60,1.134,62,1.095,79,1.006,98,2.25,99,1.691,100,2.989,101,2.579,102,2.579,103,2.579,104,2.579,106,2.579,107,4.134,108,3.665,109,3.372,111,3.372,116,3.372,117,1.559,118,2.579,119,3.984,120,2.579,121,2.579,122,2.612,123,2.579,124,1.691,125,2.579,126,2.579,127,2.579,143,2.052,144,2.286,183,1.698,198,1.85,226,1.85,243,1.415,382,1.315,415,2.971,416,4.328,417,3.884,418,5.195,419,4.662,420,5.51,421,4.59,422,4.662,423,3.566,424,5.717,425,4.662,426,3.566,427,3.566,428,4.662,429,3.566,430,4.662,431,3.566,432,4.662,433,4.662,434,2.87,435,4.662,436,2.428,437,4.662,438,4.662,439,2.428,440,4.662,441,2.428,442,5.51,443,4.662,444,5.51,445,4.662,446,2.428,447,4.662,448,4.662,449,2.428,450,4.662,451,5.51,452,4.662,453,4.662,454,4.662,455,4.662,456,4.662,457,4.662,458,2.428,459,4.662,460,2.428,461,4.662,462,2.87,463,4.662,464,5.51,465,5.51,466,5.51,467,5.51,468,4.662,469,4.662,470,3.566]],["title/interfaces/NewPokemon.html",[29,0.274,471,2.012]],["body/interfaces/NewPokemon.html",[3,0.333,4,0.283,5,0.283,8,0.904,11,0.333,12,0.789,14,0.568,15,0.034,16,1.1,19,0.556,25,0.333,29,0.333,31,0.02,32,0.025,33,0.02,34,1.515,35,1.059,60,1.012,113,3.18,190,3.232,241,1.648,252,1.944,257,1.497,382,1.594,434,1.988,436,2.945,439,2.945,441,2.945,446,2.945,449,2.945,458,2.945,460,2.945,462,2.945,471,3.44,472,4.059,473,3.18,474,2.761,475,3.818,476,2.761,477,3.818,478,3.253,479,3.253,480,3.253,481,3.253,482,2.447,483,3.818,484,2.662]],["title/classes/Parameter.html",[26,0.193,194,1.245]],["body/classes/Parameter.html",[3,0.147,4,0.125,5,0.125,8,0.4,11,0.147,12,0.437,13,0.615,14,0.428,15,0.034,16,1.111,17,0.565,18,1.785,19,0.613,21,0.303,25,0.147,26,0.302,27,1.221,29,0.147,31,0.009,32,0.014,33,0.009,35,0.437,55,0.903,60,0.905,61,1.873,62,0.519,70,0.565,76,1.915,79,0.762,81,0.903,83,1.494,87,0.984,93,0.732,117,0.565,148,0.732,158,1.673,163,1.404,173,1.339,176,0.671,182,1.67,183,1.404,191,0.671,192,1.784,193,0.671,194,2.339,195,1.67,196,1.6,197,1.462,198,2.102,199,2.795,200,1.6,201,1.732,202,1.828,203,2.102,207,0.801,208,2.397,210,1.673,211,1.281,212,2.325,214,1.281,215,1.281,216,2.238,217,0.801,218,0.801,219,0.801,220,1.462,221,0.801,222,0.801,223,1.281,224,0.801,225,0.984,226,0.671,227,0.801,228,0.801,229,0.801,230,0.801,231,0.801,232,0.801,233,0.801,234,0.801,235,2.406,236,1.072,237,0.801,238,0.801,239,0.801,240,1.281,241,1.295,242,0.801,243,0.671,244,1.828,245,1.828,246,0.801,247,2.325,248,2.521,249,2.556,250,2.325,251,2.19,252,1.553,253,1.281,254,0.801,255,1.999,256,1.784,257,1.553,258,1.6,259,2.596,260,1.6,261,0.801,262,0.801,263,1.281,264,1.281,265,0.801,266,1.281,267,0.732,268,2.19,269,0.671,270,1.6,271,1.281,272,1.072,273,0.801,274,2.511,275,2.325,276,0.801,277,0.801,278,0.801,279,0.801,280,0.801,281,0.801,282,0.801,283,0.801,284,1.828,285,0.801,286,0.801,287,0.801,288,1.281,289,1.281,290,0.801,291,0.801,292,1.6,293,0.732,294,0.801,295,0.801,296,0.801,297,0.801,298,0.801,299,0.801,300,1.6,301,0.671,302,1.828,303,0.565,304,0.801,305,1.281,306,1.828,307,1.828,308,1.281,309,0.801,310,0.801,311,1.6,312,0.801,313,0.801,314,1.6,315,1.6,316,0.801,317,1.281,318,0.801,319,0.732,320,0.801,321,0.801,322,0.801,323,0.801,324,0.801,325,0.801,326,0.801,327,0.801,328,1.281,329,0.801,330,0.732,331,0.801,332,0.615,333,0.801,334,1.462,335,0.801,336,0.801,337,0.801,338,0.801,339,0.801,340,0.671,341,0.801,342,0.801,343,0.801,344,0.801,345,0.801,346,0.801,347,0.801,348,0.801,349,0.801,350,0.984,351,0.801,352,0.801,353,1.281,354,0.732,355,1.6,356,2.132,357,0.801,358,0.801,359,0.801,360,0.801,361,0.801,362,1.462,363,2.325,364,1.6,365,1.281,366,0.801,367,1.999,368,0.801,369,0.801,370,0.801,371,0.801,372,1.828,373,2.132,374,0.801,375,0.801,376,0.801,377,0.801,378,0.801,379,0.801,380,0.732,381,0.801,382,0.477,383,1.17,384,0.801,385,0.671,386,1.17,387,0.732,388,0.732,389,0.801,390,0.801,391,0.801,392,0.801,393,0.801,394,0.801,395,1.281,396,0.801,397,0.801,398,0.801,399,0.801,400,0.801,401,0.801,402,0.801,403,0.801,404,0.801,405,1.281,406,0.801,407,0.801,408,0.801,409,0.801,410,0.801,411,0.801,412,0.801,413,0.801,414,0.801,485,1.69,486,3.375,487,1.69]],["title/classes/ParameterCodec.html",[26,0.193,225,1.143]],["body/classes/ParameterCodec.html",[3,0.148,4,0.126,5,0.126,8,0.401,11,0.148,13,0.616,14,0.412,15,0.034,16,1.12,18,1.776,19,0.561,21,0.303,25,0.148,26,0.291,27,1.308,29,0.148,31,0.009,32,0.014,33,0.009,35,0.624,55,0.904,60,0.878,61,1.874,62,1.185,70,0.566,76,1.916,79,0.477,81,0.904,83,1.494,87,0.616,93,1.171,117,0.566,148,0.733,158,1.674,163,1.405,173,1.34,176,0.671,182,1.671,183,1.405,191,0.671,192,1.674,193,0.671,194,2.34,195,1.671,196,1.601,197,1.463,198,1.674,199,2.716,200,1.601,202,1.601,203,1.947,207,0.802,208,2.398,210,1.674,211,0.802,212,2.133,214,1.282,215,1.601,216,2.239,217,1.282,218,1.282,219,1.282,220,1.671,221,1.282,222,1.282,223,1.601,224,1.282,225,1.23,226,1.073,227,1.282,228,0.802,229,1.282,230,0.802,231,1.282,232,0.802,233,1.282,234,0.802,235,2.406,236,1.073,237,0.802,238,0.802,239,0.802,240,1.282,241,1.037,242,0.802,243,0.671,244,1.282,245,1.282,246,0.802,247,2.326,248,2.521,249,2.557,250,2.326,251,2.191,252,1.554,253,1.282,254,0.802,255,2,256,1.785,257,1.627,258,1.601,259,2.597,260,1.601,261,0.802,262,0.802,263,1.282,264,1.282,265,0.802,266,1.282,267,0.733,268,2.191,269,0.671,270,1.601,271,1.282,272,1.073,273,0.802,274,2.511,275,2.326,276,0.802,277,0.802,278,0.802,279,0.802,280,0.802,281,0.802,282,0.802,283,0.802,284,1.829,285,0.802,286,0.802,287,0.802,288,1.282,289,1.282,290,0.802,291,0.802,292,1.601,293,0.733,294,0.802,295,0.802,296,0.802,297,0.802,298,0.802,299,0.802,300,1.601,301,0.671,302,1.829,303,0.566,304,0.802,305,1.282,306,1.829,307,1.829,308,1.282,309,0.802,310,0.802,311,1.601,312,0.802,313,0.802,314,1.601,315,1.601,316,0.802,317,1.282,318,0.802,319,0.733,320,0.802,321,0.802,322,0.802,323,0.802,324,0.802,325,0.802,326,0.802,327,0.802,328,1.282,329,0.802,330,0.733,331,0.802,332,0.616,333,0.802,334,1.463,335,0.802,336,0.802,337,0.802,338,0.802,339,0.802,340,0.671,341,0.802,342,0.802,343,0.802,344,0.802,345,0.802,346,0.802,347,0.802,348,0.802,349,0.802,350,0.985,351,0.802,352,0.802,353,1.282,354,0.733,355,1.601,356,2.133,357,0.802,358,0.802,359,0.802,360,0.802,361,0.802,362,1.463,363,2.326,364,1.601,365,1.282,366,0.802,367,2,368,0.802,369,0.802,370,0.802,371,0.802,372,1.829,373,2.133,374,0.802,375,0.802,376,0.802,377,0.802,378,0.802,379,0.802,380,0.733,381,0.802,382,0.477,383,1.171,384,0.802,385,0.671,386,1.171,387,0.733,388,0.733,389,0.802,390,0.802,391,0.802,392,0.802,393,0.802,394,0.802,395,1.282,396,0.802,397,0.802,398,0.802,399,0.802,400,0.802,401,0.802,402,0.802,403,0.802,404,0.802,405,1.282,406,0.802,407,0.802,408,0.802,409,0.802,410,0.802,411,0.802,412,0.802,413,0.802,414,0.802,488,2.704,489,2.704,490,2.704,491,2.704,492,1.692,493,1.692,494,1.692,495,1.692]],["title/interfaces/ParameterOptions.html",[29,0.274,203,1.245]],["body/interfaces/ParameterOptions.html",[3,0.153,4,0.13,5,0.13,8,0.415,11,0.153,12,0.45,13,0.637,14,0.374,15,0.034,16,1.098,18,1.775,21,0.313,25,0.153,26,0.295,27,1.11,29,0.153,31,0.009,32,0.014,33,0.009,34,0.695,35,0.637,60,0.704,61,1.899,70,0.585,76,1.929,79,0.494,81,0.929,83,1.508,87,0.637,93,0.758,117,0.585,158,1.703,163,1.432,173,1.371,176,0.695,182,1.704,183,1.432,191,0.695,192,0.695,193,0.695,194,2.339,195,1.704,196,1.638,197,1.497,198,1.703,199,2.756,200,1.638,202,1.638,203,2.03,207,0.83,208,2.425,210,1.703,211,0.83,212,2.165,214,1.317,215,1.317,216,2.269,217,0.83,218,0.83,219,0.83,220,1.497,221,0.83,222,0.83,223,1.317,224,0.83,225,1.012,226,0.695,227,0.83,228,0.83,229,0.83,230,0.83,231,0.83,232,0.83,233,0.83,234,0.83,235,2.417,236,1.103,237,1.317,238,1.317,239,1.865,240,2.034,241,1.318,242,0.83,243,0.695,244,1.317,245,1.317,246,0.83,247,2.354,248,2.536,249,2.58,250,2.354,251,2.216,252,1.571,253,1.317,254,0.83,255,2.034,256,1.812,257,1.571,258,1.638,259,2.618,260,1.638,261,0.83,262,0.83,263,1.317,264,1.317,265,0.83,266,1.317,267,0.758,268,2.216,269,0.695,270,1.638,271,1.317,272,1.103,273,0.83,274,2.536,275,2.354,276,0.83,277,0.83,278,0.83,279,0.83,280,0.83,281,0.83,282,0.83,283,0.83,284,1.865,285,0.83,286,0.83,287,0.83,288,1.317,289,1.317,290,0.83,291,0.83,292,1.638,293,0.758,294,0.83,295,0.83,296,0.83,297,0.83,298,0.83,299,0.83,300,1.638,301,0.695,302,1.865,303,0.585,304,0.83,305,1.317,306,1.865,307,1.865,308,1.317,309,0.83,310,0.83,311,1.638,312,0.83,313,0.83,314,1.638,315,1.638,316,0.83,317,1.317,318,0.83,319,0.758,320,0.83,321,0.83,322,0.83,323,0.83,324,0.83,325,0.83,326,0.83,327,0.83,328,1.317,329,0.83,330,0.758,331,0.83,332,0.637,333,0.83,334,1.497,335,0.83,336,0.83,337,0.83,338,0.83,339,0.83,340,0.695,341,0.83,342,0.83,343,0.83,344,0.83,345,0.83,346,0.83,347,0.83,348,0.83,349,0.83,350,1.012,351,0.83,352,0.83,353,1.317,354,0.758,355,1.638,356,2.165,357,0.83,358,0.83,359,0.83,360,0.83,361,0.83,362,1.497,363,2.354,364,1.638,365,1.317,366,0.83,367,2.034,368,0.83,369,0.83,370,0.83,371,0.83,372,1.865,373,2.165,374,0.83,375,0.83,376,0.83,377,0.83,378,0.83,379,0.83,380,0.758,381,0.83,382,0.494,383,1.204,384,0.83,385,0.695,386,1.204,387,0.758,388,0.758,389,0.83,390,0.83,391,0.83,392,0.83,393,0.83,394,0.83,395,1.317,396,0.83,397,0.83,398,0.83,399,0.83,400,0.83,401,0.83,402,0.83,403,0.83,404,0.83,405,1.317,406,0.83,407,0.83,408,0.83,409,0.83,410,0.83,411,0.83,412,0.83,413,0.83,414,0.83]],["title/classes/PathParameter.html",[26,0.193,269,1.245]],["body/classes/PathParameter.html",[3,0.146,4,0.124,5,0.124,8,0.397,11,0.146,12,0.434,13,0.61,14,0.44,15,0.034,16,1.112,17,0.56,18,1.784,19,0.652,21,0.3,25,0.146,26,0.29,27,1.264,29,0.146,31,0.009,32,0.014,33,0.009,35,0.543,55,0.897,60,0.926,61,1.867,62,0.824,70,0.56,76,1.912,79,0.757,81,0.897,83,1.49,87,0.61,93,0.726,117,0.56,148,0.726,158,1.666,163,1.397,173,1.332,176,0.665,182,1.662,183,1.397,191,0.665,192,1.332,193,0.665,194,2.384,195,1.662,196,1.591,197,1.662,198,2.097,199,2.791,200,1.99,201,1.72,202,1.819,203,2.097,205,2.46,206,2.427,207,0.794,208,2.39,210,1.666,211,1.272,212,2.317,213,1.212,214,1.272,215,1.272,216,2.23,217,0.794,218,0.794,219,0.794,220,1.454,221,0.794,222,0.794,223,1.272,224,0.794,225,0.977,226,0.665,227,0.794,228,0.794,229,0.794,230,0.794,231,0.794,232,0.794,233,0.794,234,0.794,235,2.403,236,1.065,237,0.794,238,0.794,239,0.794,240,1.272,241,1.031,242,0.794,243,0.665,244,1.272,245,1.272,246,0.794,247,2.317,248,2.517,249,2.55,250,2.317,251,2.184,252,1.549,253,1.272,254,0.794,255,1.99,256,1.778,257,1.549,258,1.591,259,2.59,260,1.591,261,0.794,262,0.794,263,1.272,264,1.272,265,0.794,266,1.272,267,1.162,268,2.289,269,1.065,270,1.591,271,1.272,272,1.065,273,1.272,274,2.505,275,2.317,276,0.794,277,0.794,278,0.794,279,0.794,280,0.794,281,0.794,282,0.794,283,0.794,284,1.819,285,0.794,286,0.794,287,0.794,288,1.272,289,1.272,290,0.794,291,0.794,292,1.591,293,0.726,294,0.794,295,0.794,296,0.794,297,0.794,298,0.794,299,0.794,300,1.591,301,0.665,302,1.819,303,0.56,304,0.794,305,1.272,306,1.819,307,1.819,308,1.272,309,0.794,310,0.794,311,1.591,312,0.794,313,0.794,314,1.591,315,1.591,316,0.794,317,1.272,318,0.794,319,0.726,320,0.794,321,0.794,322,0.794,323,0.794,324,0.794,325,0.794,326,0.794,327,0.794,328,1.272,329,0.794,330,0.726,331,0.794,332,0.61,333,0.794,334,1.454,335,0.794,336,0.794,337,0.794,338,0.794,339,0.794,340,0.665,341,0.794,342,0.794,343,0.794,344,0.794,345,0.794,346,0.794,347,0.794,348,0.794,349,0.794,350,0.977,351,0.794,352,0.794,353,1.272,354,0.726,355,1.591,356,2.124,357,0.794,358,0.794,359,0.794,360,0.794,361,0.794,362,1.454,363,2.317,364,1.591,365,1.272,366,0.794,367,1.99,368,0.794,369,0.794,370,0.794,371,0.794,372,1.819,373,2.124,374,0.794,375,0.794,376,0.794,377,0.794,378,0.794,379,0.794,380,0.726,381,0.794,382,0.473,383,1.162,384,0.794,385,0.665,386,1.162,387,0.726,388,0.726,389,0.794,390,0.794,391,0.794,392,0.794,393,0.794,394,0.794,395,1.272,396,0.794,397,0.794,398,0.794,399,0.794,400,0.794,401,0.794,402,0.794,403,0.794,404,0.794,405,1.272,406,0.794,407,0.794,408,0.794,409,0.794,410,0.794,411,0.794,412,0.794,413,0.794,414,0.794,496,1.675,497,1.675]],["title/injectables/PingControllerService.html",[0,1.143,47,1.806]],["body/injectables/PingControllerService.html",[0,1.605,1,2.308,2,1.885,3,0.286,4,0.243,5,0.243,10,1.885,11,0.286,12,0.713,14,0.526,15,0.034,16,0.789,17,1.474,18,1.243,19,0.809,21,1.079,22,1.095,23,2.1,24,1.553,25,0.286,26,0.202,27,1.288,31,0.017,32,0.023,33,0.017,35,0.806,47,2.536,53,4.438,55,1.474,56,4.149,60,0.892,61,1.976,62,1.354,69,3.852,70,1.095,71,2.369,76,1.666,79,1.243,81,1.859,83,0.924,87,1.193,160,3.415,163,1.605,164,3.671,166,2.729,168,3.671,169,2.729,175,2.729,195,2.408,197,1.909,205,2.1,210,2.114,235,1.3,251,1.419,267,1.909,268,1.909,332,1.193,334,1.419,340,2.36,350,2.166,354,1.419,383,1.419,385,2.417,386,1.419,387,1.419,484,2.308,498,4.631,499,2.729,500,4.981,501,4.981,502,5.726,503,5.327,504,3.276,505,4.407,506,3.276,507,6.09,508,5.327,509,4.407,510,5.327,511,5.327,512,5.327,513,3.671,514,5.559,515,4.407,516,3.276,517,5.559,518,4.407,519,3.671,520,3.276,521,4.407,522,4.407,523,3.276,524,4.149,525,3.276,526,3.276,527,2.729,528,2.729,529,3.276,530,2.825,531,3.276,532,3.276,533,3.276,534,3.276,535,3.276,536,3.276,537,3.276,538,3.276,539,4.407,540,4.407,541,3.276,542,3.276]],["title/interfaces/PingResponse.html",[29,0.274,530,2.012]],["body/interfaces/PingResponse.html",[3,0.401,4,0.341,5,0.341,11,0.401,12,0.884,14,0.551,15,0.033,16,1.157,25,0.401,29,0.401,31,0.024,32,0.028,33,0.024,34,1.824,35,1.03,158,1.824,173,2.393,210,2.393,257,1.412,484,2.366,530,3.501,543,3.828,544,3.323,545,6.031,546,6.031]],["title/interfaces/Pokemon.html",[29,0.274,547,1.806]],["body/interfaces/Pokemon.html",[3,0.335,4,0.285,5,0.285,11,0.335,12,0.792,14,0.569,15,0.034,16,1.128,19,0.559,25,0.335,29,0.335,31,0.02,32,0.025,33,0.02,34,1.525,35,1.059,60,1.015,190,3.236,241,1.653,252,1.946,257,1.503,382,1.598,434,2.952,436,2.952,439,2.952,441,2.952,446,2.952,449,2.952,458,2.952,460,2.952,462,2.952,478,3.261,479,3.261,480,3.261,481,3.261,482,2.463,484,2.666,547,2.815,548,3.201,549,3.842]],["title/interfaces/PokemonPartial.html",[29,0.274,550,2.269]],["body/interfaces/PokemonPartial.html",[3,0.329,4,0.28,5,0.28,8,0.894,11,0.329,12,0.783,14,0.568,15,0.034,16,1.125,19,0.549,25,0.329,29,0.329,31,0.019,32,0.025,33,0.019,34,1.498,35,1.062,60,1.008,190,3.226,241,1.64,252,1.941,257,1.486,303,1.262,382,1.588,434,2.932,436,2.932,439,2.932,441,2.932,446,2.932,449,2.932,458,2.932,460,2.932,462,2.932,474,2.729,476,2.729,478,3.239,479,3.239,480,3.239,481,3.239,482,2.419,484,2.656,550,3.498,551,3.498,552,3.144,553,4.837,554,3.774]],["title/interfaces/PokemonWithRelations.html",[29,0.274,555,2.269]],["body/interfaces/PokemonWithRelations.html",[3,0.331,4,0.281,5,0.281,8,0.899,11,0.331,12,0.785,14,0.568,15,0.034,16,1.126,19,0.552,25,0.331,29,0.331,31,0.02,32,0.025,33,0.02,34,1.505,35,1.058,60,1.01,190,3.229,241,1.643,252,1.943,257,1.491,303,1.268,382,1.591,434,2.938,436,2.938,439,2.938,441,2.938,446,2.938,449,2.938,458,2.938,460,2.938,462,2.938,474,2.743,476,2.743,478,3.245,479,3.245,480,3.245,481,3.245,482,2.431,484,2.659,551,3.509,555,3.869,556,3.16,557,3.793,558,3.793]],["title/components/PokemonsComponent.html",[98,1.359,124,1.488]],["body/components/PokemonsComponent.html",[3,0.169,4,0.144,5,0.144,8,1.13,11,0.169,12,0.487,14,0.54,15,0.034,16,1.141,17,1.392,18,1.574,19,0.892,21,0.854,22,0.649,25,0.169,26,0.12,27,1.287,31,0.021,32,0.015,33,0.01,35,0.805,40,1.01,42,1.01,48,2.888,50,1.93,55,1.007,60,1.044,62,1.758,73,1.616,79,0.547,83,0.849,98,1.599,99,0.92,100,1.93,101,1.403,102,1.403,103,1.403,104,1.403,106,1.403,107,3.258,108,2.888,109,2.178,111,2.178,116,2.178,117,1.664,118,1.403,119,3.009,120,1.403,121,1.403,122,1.428,123,1.403,124,1.973,125,4.217,126,1.403,127,1.403,140,1.243,143,1.116,144,1.243,145,1.616,163,1.515,176,1.195,183,2.182,188,1.93,190,2.484,198,2.378,220,1.305,226,1.195,235,1.195,241,1.384,243,0.77,252,1.278,256,1.195,272,1.652,303,1.507,319,0.84,340,2.413,350,0.706,362,1.305,380,1.305,382,1.041,388,2.066,416,3.076,417,2.509,421,3.467,434,3.038,436,1.01,439,1.01,441,1.01,446,1.01,449,1.01,458,1.01,460,1.01,462,1.01,471,1.93,478,1.116,479,1.116,480,3.356,481,1.116,528,3.467,547,3.56,559,1.616,560,3.692,561,3.692,562,3.012,563,3.692,564,3.692,565,3.692,566,3.692,567,3.692,568,3.692,569,4.162,570,3.692,571,4.162,572,4.162,573,3.012,574,4.162,575,3.012,576,4.162,577,3.692,578,3.012,579,4.162,580,4.162,581,4.769,582,3.012,583,3.012,584,1.94,585,3.692,586,4.162,587,3.012,588,1.94,589,3.012,590,1.94,591,3.012,592,4.162,593,4.162,594,3.012,595,1.94,596,3.012,597,4.769,598,1.94,599,3.012,600,1.94,601,3.012,602,1.94,603,1.94,604,1.94,605,3.012,606,3.692,607,4.769,608,4.162,609,1.94,610,3.012,611,3.012,612,4.162,613,3.012,614,3.012,615,1.94,616,1.94,617,3.012,618,1.94,619,3.012,620,3.692,621,1.94,622,3.012,623,3.012,624,1.94,625,3.012,626,3.012,627,1.94,628,1.94,629,1.94,630,3.012,631,1.94,632,4.162,633,1.94,634,1.94,635,1.94,636,1.94,637,1.94,638,3.754,639,1.94,640,1.94,641,1.94,642,1.94,643,1.616,644,1.94,645,5.399,646,1.94,647,1.94,648,1.94,649,1.94,650,1.94,651,1.94,652,1.94,653,3.012,654,4.976,655,1.94,656,1.94,657,1.94,658,1.94,659,1.94,660,3.012,661,1.94,662,1.94,663,1.94,664,1.94,665,3.012,666,1.94,667,1.94,668,1.94,669,4.162,670,3.012,671,1.94,672,3.012,673,1.94,674,1.94,675,1.94,676,1.94,677,1.94,678,1.94,679,1.94,680,1.94,681,1.94,682,3.692,683,1.616,684,3.012,685,3.012,686,3.012,687,3.012,688,3.012,689,3.012,690,3.012,691,3.012,692,3.012,693,2.509,694,1.94,695,1.94,696,1.94,697,1.94]],["title/classes/QueryParameter.html",[26,0.193,301,1.245]],["body/classes/QueryParameter.html",[3,0.146,4,0.124,5,0.124,8,0.397,11,0.146,12,0.434,13,0.61,14,0.44,15,0.034,16,1.105,17,0.561,18,1.784,19,0.652,21,0.3,25,0.146,26,0.29,27,1.265,29,0.146,31,0.009,32,0.014,33,0.009,35,0.543,55,0.898,60,0.926,61,1.94,62,0.825,70,0.561,76,1.912,79,0.757,81,0.898,83,1.49,87,0.61,93,0.726,117,0.561,148,0.726,158,1.667,163,1.398,173,1.332,176,0.665,182,1.663,183,1.398,191,0.665,192,1.332,193,0.665,194,2.384,195,1.663,196,1.592,197,1.663,198,2.097,199,2.791,200,1.991,201,1.721,202,1.82,203,2.097,205,2.46,206,2.428,207,0.795,208,2.391,210,1.667,211,1.273,212,2.318,213,1.212,214,1.273,215,1.273,216,2.452,217,0.795,218,0.795,219,0.795,220,1.454,221,0.795,222,0.795,223,1.273,224,0.795,225,0.977,226,0.665,227,0.795,228,0.795,229,0.795,230,0.795,231,0.795,232,0.795,233,0.795,234,0.795,235,2.403,236,1.065,237,0.795,238,0.795,239,0.795,240,1.273,241,1.031,242,0.795,243,0.665,244,1.273,245,1.273,246,0.795,247,2.318,248,2.517,249,2.551,250,2.318,251,2.184,252,1.549,253,1.273,254,0.795,255,1.991,256,1.778,257,1.549,258,1.592,259,2.591,260,1.592,261,0.795,262,0.795,263,1.273,264,1.273,265,0.795,266,1.273,267,0.726,268,2.184,269,0.665,270,1.592,271,1.273,272,1.065,273,0.795,274,2.505,275,2.318,276,0.795,277,0.795,278,0.795,279,0.795,280,0.795,281,0.795,282,0.795,283,0.795,284,1.82,285,0.795,286,0.795,287,0.795,288,1.273,289,1.273,290,0.795,291,0.795,292,1.592,293,0.726,294,0.795,295,0.795,296,0.795,297,0.795,298,0.795,299,0.795,300,1.82,301,1.065,302,1.82,303,0.561,304,1.273,305,1.273,306,1.82,307,1.82,308,1.273,309,0.795,310,0.795,311,1.592,312,0.795,313,0.795,314,1.592,315,1.592,316,0.795,317,1.273,318,0.795,319,0.726,320,0.795,321,0.795,322,0.795,323,0.795,324,0.795,325,0.795,326,0.795,327,0.795,328,1.273,329,0.795,330,0.726,331,0.795,332,0.61,333,0.795,334,1.454,335,0.795,336,0.795,337,0.795,338,0.795,339,0.795,340,0.665,341,0.795,342,0.795,343,0.795,344,0.795,345,0.795,346,0.795,347,0.795,348,0.795,349,0.795,350,0.977,351,0.795,352,0.795,353,1.273,354,0.726,355,1.592,356,2.124,357,0.795,358,0.795,359,0.795,360,0.795,361,0.795,362,1.454,363,2.318,364,1.592,365,1.273,366,0.795,367,1.991,368,0.795,369,0.795,370,0.795,371,0.795,372,1.82,373,2.124,374,0.795,375,0.795,376,0.795,377,0.795,378,0.795,379,0.795,380,0.726,381,0.795,382,0.473,383,1.163,384,0.795,385,0.665,386,1.163,387,0.726,388,0.726,389,0.795,390,0.795,391,0.795,392,0.795,393,0.795,394,0.795,395,1.273,396,0.795,397,0.795,398,0.795,399,0.795,400,0.795,401,0.795,402,0.795,403,0.795,404,0.795,405,1.273,406,0.795,407,0.795,408,0.795,409,0.795,410,0.795,411,0.795,412,0.795,413,0.795,414,0.795,698,1.676,699,1.676]],["title/classes/RequestBuilder.html",[26,0.193,332,1.143]],["body/classes/RequestBuilder.html",[3,0.134,4,0.114,5,0.114,8,0.362,11,0.134,12,0.404,13,1.325,14,0.498,15,0.034,16,1.121,17,1.217,18,1.784,19,0.799,21,0.274,25,0.134,26,0.279,27,1.42,29,0.134,31,0.008,32,0.013,33,0.008,35,0.791,55,0.834,60,0.97,61,1.798,62,1.32,70,0.512,76,1.876,79,0.703,81,1.055,83,1.528,87,0.557,93,0.663,117,0.512,148,0.663,158,1.798,163,1.91,173,1.252,176,0.989,182,2.047,183,1.72,191,0.607,192,2.203,193,0.607,194,2.314,195,1.736,196,2.037,197,1.367,198,2.041,199,2.796,200,1.496,202,1.496,203,2.15,207,0.725,208,2.317,210,1.59,211,0.725,212,2.037,214,1.496,215,1.182,216,2.148,217,0.725,218,0.725,219,0.725,220,1.367,221,0.725,222,0.725,223,1.182,224,0.725,225,0.908,226,0.607,227,0.725,228,0.725,229,0.725,230,0.725,231,0.725,232,0.725,233,0.725,234,0.725,235,2.373,236,0.989,237,0.725,238,0.725,239,0.725,240,1.182,241,0.969,242,0.725,243,0.607,244,1.182,245,1.182,246,0.725,247,2.24,248,2.493,249,2.487,250,2.24,251,2.117,252,1.501,253,1.182,254,0.725,255,1.9,256,1.705,257,1.501,258,1.496,259,2.53,260,1.496,261,0.725,262,0.725,263,1.182,264,1.182,265,0.725,266,1.182,267,0.663,268,2.273,269,0.607,270,1.496,271,1.182,272,0.989,273,0.725,274,2.438,275,2.24,276,0.725,277,0.725,278,0.725,279,0.725,280,0.725,281,0.725,282,0.725,283,0.725,284,1.725,285,0.725,286,0.725,287,0.725,288,1.182,289,1.182,290,0.725,291,0.725,292,1.496,293,0.663,294,0.725,295,0.725,296,0.725,297,0.725,298,0.725,299,0.725,300,2.037,301,0.607,302,1.725,303,0.512,304,0.725,305,1.182,306,1.725,307,1.725,308,1.182,309,0.725,310,0.725,311,1.496,312,0.725,313,0.725,314,1.496,315,1.496,316,0.725,317,1.182,318,0.725,319,0.663,320,0.725,321,0.725,322,0.725,323,0.725,324,0.725,325,0.725,326,0.725,327,0.725,328,1.182,329,1.182,330,1.576,331,1.182,332,0.908,333,1.496,334,1.861,335,1.496,336,1.496,337,1.496,338,1.496,339,1.9,340,1.59,341,1.182,342,0.725,343,0.725,344,1.182,345,0.725,346,0.725,347,1.182,348,0.725,349,0.725,350,1.459,351,1.182,352,1.182,353,1.725,354,1.08,355,1.496,356,2.037,357,0.725,358,0.725,359,0.725,360,0.725,361,0.725,362,1.367,363,2.24,364,1.496,365,1.182,366,0.725,367,1.9,368,0.725,369,0.725,370,0.725,371,0.725,372,1.725,373,2.037,374,0.725,375,0.725,376,0.725,377,1.182,378,0.725,379,1.182,380,1.08,381,1.182,382,0.431,383,1.08,384,0.725,385,0.607,386,1.08,387,0.663,388,0.663,389,0.725,390,0.725,391,0.725,392,0.725,393,0.725,394,0.725,395,1.182,396,0.725,397,0.725,398,0.725,399,0.725,400,0.725,401,0.725,402,0.725,403,0.725,404,0.725,405,1.182,406,0.725,407,0.725,408,0.725,409,0.725,410,0.725,411,0.725,412,0.725,413,0.725,414,0.725,484,1.08,513,3.032,700,2.493,701,1.53,702,2.493,703,1.53,704,1.53,705,1.53,706,1.53,707,1.53,708,1.53,709,1.53,710,1.53,711,1.53,712,1.275,713,1.53,714,1.53,715,1.53,716,1.53]],["title/coverage.html",[717,3.566]],["body/coverage.html",[0,2.131,1,1.664,5,0.285,6,3.538,7,3.538,14,0.335,15,0.034,26,0.375,29,0.537,30,2.211,31,0.02,32,0.025,33,0.02,47,2.211,48,2.463,83,1.084,95,2.778,96,3.201,98,2.332,99,1.822,105,3.201,122,1.822,124,1.822,147,2.778,149,3.201,160,2.463,161,3.201,162,3.201,188,2.463,189,3.201,191,1.525,192,2.442,193,2.442,194,1.525,203,1.525,225,1.399,236,1.525,269,1.525,293,2.535,301,1.525,332,1.399,415,3.201,471,2.463,472,3.201,473,3.201,498,3.201,499,4.076,530,2.463,543,3.201,544,2.778,547,2.211,548,3.201,550,2.778,551,3.538,552,3.201,555,2.778,556,3.201,559,3.201,638,5.278,717,3.201,718,3.842,719,3.842,720,3.842,721,3.842,722,5.383,723,5.383,724,4.892,725,4.892,726,4.892,727,5.383,728,3.842,729,4.892,730,4.892,731,3.842,732,5.383,733,5.383,734,3.842,735,3.842,736,3.842,737,3.842,738,3.842,739,3.842,740,5.852,741,3.842,742,3.842,743,3.842,744,3.842,745,3.842,746,3.842,747,3.201,748,4.076,749,3.201,750,4.076,751,3.201,752,3.201,753,3.842,754,3.842]],["title/dependencies.html",[39,2.172,755,2.622]],["body/dependencies.html",[15,0.034,22,1.532,31,0.024,32,0.028,33,0.024,39,2.636,42,2.84,133,4.542,134,3.495,138,4.542,139,4.542,140,2.937,143,2.636,144,2.937,527,3.817,547,2.636,643,3.817,756,4.581,757,6.359,758,4.581,759,4.581,760,4.581,761,4.581,762,4.581,763,4.581,764,4.581,765,4.581,766,5.452,767,4.581,768,4.581,769,4.581,770,4.581,771,4.581,772,4.581,773,4.581,774,4.581,775,4.581,776,4.581,777,4.581,778,4.581,779,4.581]],["title/index.html",[11,0.229,780,2.622,781,2.622]],["body/index.html",[4,0.328,15,0.027,31,0.023,32,0.027,33,0.023,51,2.836,60,0.792,83,1.248,98,2.484,108,2.836,114,3.686,140,3.676,143,3.605,155,3.686,330,2.641,519,4.778,683,3.686,693,3.686,782,5.34,783,4.425,784,5.735,785,4.425,786,4.425,787,4.425,788,5.34,789,6.097,790,4.425,791,4.425,792,4.425,793,4.425,794,4.425,795,4.425,796,4.425,797,4.425,798,4.425,799,5.735,800,4.425,801,4.425,802,4.425,803,4.425,804,4.425,805,4.425,806,4.425,807,3.686,808,5.34,809,5.34,810,5.956,811,4.425,812,5.34,813,5.34,814,4.425,815,5.956,816,4.425,817,4.425,818,5.735,819,4.425,820,4.425,821,4.425]],["title/modules.html",[38,2.463]],["body/modules.html",[15,0.03,31,0.026,32,0.03,33,0.026,37,3.224,38,2.895,88,2.895,134,3.691,822,5.758,823,5.758,824,5.758]],["title/overview.html",[825,3.566]],["body/overview.html",[1,2.515,2,2.62,15,0.033,31,0.023,32,0.028,33,0.023,34,1.807,36,2.62,37,4.072,38,2.62,39,2.62,40,2.372,41,3.293,42,2.372,43,3.293,44,3.293,45,3.793,46,3.793,47,3.341,48,3.722,49,3.928,50,2.919,51,2.919,88,3.679,99,2.988,100,2.919,122,2.753,124,2.753,128,3.793,129,3.793,130,3.793,148,1.972,825,3.793,826,4.553,827,4.553,828,4.553,829,4.553,830,4.553]],["title/miscellaneous/typealiases.html",[831,1.68,832,3.774]],["body/miscellaneous/typealiases.html",[11,0.432,14,0.432,15,0.031,19,0.72,31,0.025,32,0.029,33,0.025,81,2.01,248,2.143,350,1.801,385,1.963,524,4.751,544,4.124,712,4.751,831,3.171,833,4.947,834,4.947,835,4.947,836,4.947]],["title/miscellaneous/variables.html",[831,1.68,837,3.144]],["body/miscellaneous/variables.html",[11,0.406,14,0.528,15,0.033,17,2.025,18,1.708,31,0.024,32,0.028,33,0.024,83,1.312,192,1.846,193,2.184,225,1.694,236,2.184,256,2.184,272,1.846,303,1.84,484,2.016,747,3.876,748,5.045,749,3.876,750,3.876,751,4.584,752,4.584,807,4.584,831,2.982,837,3.876,838,5.503,839,4.653,840,4.653,841,4.653,842,4.653,843,4.653]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"injectables/BaseService.html":{},"interfaces/Count.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":638,"title":{},"body":{"components/PokemonsComponent.html":{},"coverage.html":{}}}],["0.10.2",{"_index":779,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":740,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":731,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":722,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":721,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":729,"title":{},"body":{"coverage.html":{}}}],["1.10.0",{"_index":777,"title":{},"body":{"dependencies.html":{}}}],["1/15",{"_index":728,"title":{},"body":{"coverage.html":{}}}],["1/16",{"_index":730,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":724,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":726,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":737,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":735,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":733,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":630,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["12/26",{"_index":746,"title":{},"body":{"coverage.html":{}}}],["14",{"_index":732,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":734,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":826,"title":{},"body":{"overview.html":{}}}],["2.0.1",{"_index":771,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":736,"title":{},"body":{"coverage.html":{}}}],["24/31",{"_index":744,"title":{},"body":{"coverage.html":{}}}],["25.3.0",{"_index":766,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":827,"title":{},"body":{"overview.html":{}}}],["3.6.0",{"_index":770,"title":{},"body":{"dependencies.html":{}}}],["3/6",{"_index":741,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":725,"title":{},"body":{"coverage.html":{}}}],["37",{"_index":738,"title":{},"body":{"coverage.html":{}}}],["4.9.3",{"_index":775,"title":{},"body":{"dependencies.html":{}}}],["46",{"_index":745,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":828,"title":{},"body":{"overview.html":{}}}],["5.0.1",{"_index":768,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":723,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":727,"title":{},"body":{"coverage.html":{}}}],["6.5.4",{"_index":772,"title":{},"body":{"dependencies.html":{}}}],["6/16",{"_index":739,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":829,"title":{},"body":{"overview.html":{}}}],["77",{"_index":743,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":830,"title":{},"body":{"overview.html":{}}}],["9.1.1",{"_index":765,"title":{},"body":{"dependencies.html":{}}}],["9.1.11",{"_index":757,"title":{},"body":{"dependencies.html":{}}}],["9.1.13",{"_index":762,"title":{},"body":{"dependencies.html":{}}}],["9.1.8",{"_index":786,"title":{},"body":{"index.html":{}}}],["_bodycontent",{"_index":337,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["_bodycontenttype",{"_index":338,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["_header",{"_index":336,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["_path",{"_index":333,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["_query",{"_index":335,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["_rooturl",{"_index":164,"title":{},"body":{"injectables/BaseService.html":{},"injectables/PingControllerService.html":{}}}],["abstract",{"_index":242,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["accept",{"_index":383,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["access",{"_index":507,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["accessors",{"_index":165,"title":{},"body":{"injectables/BaseService.html":{}}}],["account",{"_index":297,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["activemodal",{"_index":420,"title":{},"body":{"components/ModalComponent.html":{}}}],["actual_component",{"_index":127,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["additionalprop1",{"_index":678,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["ag",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["aggridmodule",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["aggridmodule.withcomponents",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["aliases",{"_index":833,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowing",{"_index":518,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["along",{"_index":351,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["already",{"_index":85,"title":{},"body":{"modules/ApiModule.html":{}}}],["amount",{"_index":453,"title":{},"body":{"components/ModalComponent.html":{}}}],["angular",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"components/PokemonsComponent.html":{},"dependencies.html":{},"index.html":{}}}],["angular/animations",{"_index":756,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":758,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":70,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["angular/compiler",{"_index":759,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":22,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"injectables/BaseService.html":{},"components/ModalComponent.html":{},"injectables/PingControllerService.html":{},"components/PokemonsComponent.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":760,"title":{},"body":{"dependencies.html":{}}}],["angular/localize",{"_index":761,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":764,"title":{},"body":{"dependencies.html":{}}}],["api",{"_index":71,"title":{},"body":{"modules/ApiModule.html":{},"injectables/BaseService.html":{},"injectables/PingControllerService.html":{}}}],["api/models/pokemon",{"_index":640,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["api/services/pokemon",{"_index":641,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["apiconfiguration",{"_index":1,"title":{"injectables/ApiConfiguration.html":{}},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"injectables/BaseService.html":{},"injectables/PingControllerService.html":{},"coverage.html":{},"overview.html":{}}}],["apiconfiguration.rooturl",{"_index":179,"title":{},"body":{"injectables/BaseService.html":{}}}],["apiconfigurationparams",{"_index":30,"title":{"interfaces/ApiConfigurationParams.html":{}},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"coverage.html":{}}}],["apimodule",{"_index":37,"title":{"modules/ApiModule.html":{}},"body":{"modules/ApiModule.html":{},"modules.html":{},"overview.html":{}}}],["apimodule.forroot",{"_index":28,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{}}}],["apiservice",{"_index":95,"title":{"injectables/ApiService.html":{}},"body":{"injectables/ApiService.html":{},"coverage.html":{}}}],["app",{"_index":108,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{},"index.html":{}}}],["app.component",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.html",{"_index":112,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":110,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":99,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["append",{"_index":200,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["append(headers",{"_index":207,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["append(params",{"_index":304,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["append(path",{"_index":273,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["appending",{"_index":238,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["application/json",{"_index":354,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["application/x",{"_index":358,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["appmodule",{"_index":88,"title":{"modules/AppModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apppage",{"_index":147,"title":{"classes/AppPage.html":{}},"body":{"classes/AppPage.html":{},"coverage.html":{}}}],["array",{"_index":252,"title":{},"body":{"classes/HeaderParameter.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["array.join(separator",{"_index":265,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["array.push(`${key}=${propval",{"_index":262,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["array.push(key",{"_index":263,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["array.push(propval",{"_index":264,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["arraybuffer",{"_index":389,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["arrays",{"_index":282,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["artifacts",{"_index":801,"title":{},"body":{"index.html":{}}}],["asc",{"_index":632,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["asc').subscribe(result",{"_index":671,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["attacks",{"_index":462,"title":{},"body":{"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{}}}],["attk?.damage",{"_index":467,"title":{},"body":{"components/ModalComponent.html":{}}}],["attk?.name",{"_index":464,"title":{},"body":{"components/ModalComponent.html":{}}}],["attk?.type",{"_index":465,"title":{},"body":{"components/ModalComponent.html":{}}}],["automatically",{"_index":794,"title":{},"body":{"index.html":{}}}],["base",{"_index":87,"title":{},"body":{"modules/ApiModule.html":{},"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["baseservice",{"_index":160,"title":{"injectables/BaseService.html":{}},"body":{"injectables/BaseService.html":{},"injectables/PingControllerService.html":{},"coverage.html":{}}}],["baseservice:17",{"_index":523,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["blob",{"_index":355,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["body",{"_index":350,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"miscellaneous/typealiases.html":{}}}],["body(value",{"_index":352,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["boolean",{"_index":241,"title":{},"body":{"classes/HeaderParameter.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["bootstrap",{"_index":42,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{},"dependencies.html":{},"overview.html":{}}}],["bootstrap/ng",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{},"dependencies.html":{}}}],["both",{"_index":291,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["browse",{"_index":824,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"classes/AppPage.html":{},"dependencies.html":{},"modules.html":{}}}],["browser.get(browser.baseurl",{"_index":156,"title":{},"body":{"classes/AppPage.html":{}}}],["browsermodule",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["build",{"_index":330,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"index.html":{}}}],["build(options",{"_index":381,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["builder",{"_index":526,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["builder.ts",{"_index":193,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["builder.ts:10",{"_index":494,"title":{},"body":{"classes/ParameterCodec.html":{}}}],["builder.ts:117",{"_index":698,"title":{},"body":{"classes/QueryParameter.html":{}}}],["builder.ts:122",{"_index":699,"title":{},"body":{"classes/QueryParameter.html":{}}}],["builder.ts:14",{"_index":495,"title":{},"body":{"classes/ParameterCodec.html":{}}}],["builder.ts:176",{"_index":204,"title":{},"body":{"classes/HeaderParameter.html":{}}}],["builder.ts:18",{"_index":492,"title":{},"body":{"classes/ParameterCodec.html":{}}}],["builder.ts:181",{"_index":209,"title":{},"body":{"classes/HeaderParameter.html":{}}}],["builder.ts:200",{"_index":705,"title":{},"body":{"classes/RequestBuilder.html":{}}}],["builder.ts:201",{"_index":706,"title":{},"body":{"classes/RequestBuilder.html":{}}}],["builder.ts:202",{"_index":704,"title":{},"body":{"classes/RequestBuilder.html":{}}}],["builder.ts:203",{"_index":703,"title":{},"body":{"classes/RequestBuilder.html":{}}}],["builder.ts:204",{"_index":702,"title":{},"body":{"classes/RequestBuilder.html":{}}}],["builder.ts:207",{"_index":709,"title":{},"body":{"classes/RequestBuilder.html":{}}}],["builder.ts:208",{"_index":708,"title":{},"body":{"classes/RequestBuilder.html":{}}}],["builder.ts:209",{"_index":707,"title":{},"body":{"classes/RequestBuilder.html":{}}}],["builder.ts:215",{"_index":715,"title":{},"body":{"classes/RequestBuilder.html":{}}}],["builder.ts:22",{"_index":493,"title":{},"body":{"classes/ParameterCodec.html":{}}}],["builder.ts:222",{"_index":716,"title":{},"body":{"classes/RequestBuilder.html":{}}}],["builder.ts:229",{"_index":714,"title":{},"body":{"classes/RequestBuilder.html":{}}}],["builder.ts:236",{"_index":710,"title":{},"body":{"classes/RequestBuilder.html":{}}}],["builder.ts:286",{"_index":713,"title":{},"body":{"classes/RequestBuilder.html":{}}}],["builder.ts:302",{"_index":711,"title":{},"body":{"classes/RequestBuilder.html":{}}}],["builder.ts:39",{"_index":485,"title":{},"body":{"classes/Parameter.html":{}}}],["builder.ts:40",{"_index":486,"title":{},"body":{"classes/Parameter.html":{}}}],["builder.ts:50",{"_index":487,"title":{},"body":{"classes/Parameter.html":{}}}],["builder.ts:79",{"_index":496,"title":{},"body":{"classes/PathParameter.html":{}}}],["builder.ts:84",{"_index":497,"title":{},"body":{"classes/PathParameter.html":{}}}],["builds",{"_index":379,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["button",{"_index":563,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["cases",{"_index":280,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["change",{"_index":795,"title":{},"body":{"index.html":{}}}],["characteristic",{"_index":596,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["check",{"_index":820,"title":{},"body":{"index.html":{}}}],["class",{"_index":26,"title":{"classes/AppPage.html":{},"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{}}}],["classes",{"_index":148,"title":{},"body":{"classes/AppPage.html":{},"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"overview.html":{}}}],["classification",{"_index":436,"title":{},"body":{"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{}}}],["cli",{"_index":784,"title":{},"body":{"index.html":{}}}],["close",{"_index":469,"title":{},"body":{"components/ModalComponent.html":{}}}],["cluster_apimodule",{"_index":45,"title":{},"body":{"modules/ApiModule.html":{},"overview.html":{}}}],["cluster_apimodule_providers",{"_index":46,"title":{},"body":{"modules/ApiModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["code",{"_index":797,"title":{},"body":{"index.html":{}}}],["codec",{"_index":218,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["comma",{"_index":323,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["community",{"_index":767,"title":{},"body":{"dependencies.html":{}}}],["component",{"_index":98,"title":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":120,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["components",{"_index":100,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{},"overview.html":{}}}],["config",{"_index":168,"title":{},"body":{"injectables/BaseService.html":{},"injectables/PingControllerService.html":{}}}],["configuration",{"_index":10,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"injectables/BaseService.html":{},"injectables/PingControllerService.html":{}}}],["configuration.ts",{"_index":7,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"coverage.html":{}}}],["configuration.ts:12",{"_index":20,"title":{},"body":{"injectables/ApiConfiguration.html":{}}}],["console.log(res",{"_index":665,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["const",{"_index":235,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["constrains",{"_index":836,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["constructor",{"_index":79,"title":{},"body":{"modules/ApiModule.html":{},"injectables/ApiService.html":{},"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["constructor(activemodal",{"_index":423,"title":{},"body":{"components/ModalComponent.html":{}}}],["constructor(config",{"_index":166,"title":{},"body":{"injectables/BaseService.html":{},"injectables/PingControllerService.html":{}}}],["constructor(name",{"_index":202,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["constructor(pokemonservice",{"_index":584,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["constructor(public",{"_index":243,"title":{},"body":{"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["constructor(rooturl",{"_index":701,"title":{},"body":{"classes/RequestBuilder.html":{}}}],["content",{"_index":158,"title":{},"body":{"classes/AppPage.html":{},"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"interfaces/PingResponse.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["contenttype",{"_index":353,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["context",{"_index":751,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["controller.service",{"_index":73,"title":{},"body":{"modules/ApiModule.html":{},"components/PokemonsComponent.html":{}}}],["controller.service.ts",{"_index":499,"title":{},"body":{"injectables/PingControllerService.html":{},"coverage.html":{}}}],["controller.service.ts:17",{"_index":504,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["controller.service.ts:28",{"_index":520,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["controller.service.ts:36",{"_index":516,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["controller.service.ts:60",{"_index":506,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["correctly",{"_index":219,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["corresponding",{"_index":294,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["count",{"_index":188,"title":{"interfaces/Count.html":{}},"body":{"interfaces/Count.html":{},"components/PokemonsComponent.html":{},"coverage.html":{}}}],["coverage",{"_index":717,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":589,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["createpokemon",{"_index":564,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["createpokemons",{"_index":571,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["current",{"_index":380,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["currentrecords",{"_index":565,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["custom",{"_index":217,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["damage",{"_index":466,"title":{},"body":{"components/ModalComponent.html":{}}}],["data",{"_index":362,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["database",{"_index":593,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["datapok",{"_index":620,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["datapok.name.tolowercase",{"_index":647,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["datapok.url",{"_index":648,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["date",{"_index":545,"title":{},"body":{"interfaces/PingResponse.html":{}}}],["declarations",{"_index":41,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"overview.html":{}}}],["decodekey",{"_index":488,"title":{},"body":{"classes/ParameterCodec.html":{}}}],["decodekey(key",{"_index":231,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["decodeuricomponent(key",{"_index":232,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["decodeuricomponent(value",{"_index":234,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["decodevalue",{"_index":489,"title":{},"body":{"classes/ParameterCodec.html":{}}}],["decodevalue(value",{"_index":233,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["deepobject",{"_index":312,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["default",{"_index":17,"title":{},"body":{"injectables/ApiConfiguration.html":{},"components/AppComponent.html":{},"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"miscellaneous/variables.html":{}}}],["defaultexplode",{"_index":245,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["defaultstyle",{"_index":244,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["defined",{"_index":19,"title":{},"body":{"injectables/ApiConfiguration.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"components/AppComponent.html":{},"classes/AppPage.html":{},"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"miscellaneous/typealiases.html":{}}}],["defines",{"_index":237,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["delete",{"_index":591,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["deleteall",{"_index":572,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["dependencies",{"_index":39,"title":{"dependencies.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":672,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["desc').subscribe(result",{"_index":673,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["description",{"_index":8,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["desired",{"_index":601,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["details",{"_index":684,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["dev",{"_index":791,"title":{},"body":{"index.html":{}}}],["development",{"_index":787,"title":{},"body":{"index.html":{}}}],["directive",{"_index":118,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["directives",{"_index":126,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":800,"title":{},"body":{"index.html":{}}}],["directly",{"_index":177,"title":{},"body":{"injectables/BaseService.html":{}}}],["directory",{"_index":804,"title":{},"body":{"index.html":{}}}],["disable",{"_index":66,"title":{},"body":{"modules/ApiModule.html":{}}}],["dist",{"_index":803,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":718,"title":{},"body":{"coverage.html":{}}}],["doesn't",{"_index":511,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["dom",{"_index":103,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["downloads",{"_index":394,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["dynamic",{"_index":763,"title":{},"body":{"dependencies.html":{}}}],["e2e",{"_index":816,"title":{},"body":{"index.html":{}}}],["e2e/src/app.po.ts",{"_index":149,"title":{},"body":{"classes/AppPage.html":{},"coverage.html":{}}}],["e2e/src/app.po.ts:4",{"_index":154,"title":{},"body":{"classes/AppPage.html":{}}}],["e2e/src/app.po.ts:8",{"_index":152,"title":{},"body":{"classes/AppPage.html":{}}}],["each",{"_index":284,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["element",{"_index":117,"title":{},"body":{"components/AppComponent.html":{},"classes/AppPage.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["element(by.css('app",{"_index":157,"title":{},"body":{"classes/AppPage.html":{}}}],["elementtarget",{"_index":611,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["encoded",{"_index":361,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["encodekey",{"_index":490,"title":{},"body":{"classes/ParameterCodec.html":{}}}],["encodekey(key",{"_index":227,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["encoder",{"_index":401,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["encodeuricomponent(key",{"_index":228,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["encodeuricomponent(p[0])}=${encodeuricomponent(p[1])}`).join",{"_index":369,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["encodeuricomponent(value",{"_index":230,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["encodevalue",{"_index":491,"title":{},"body":{"classes/ParameterCodec.html":{}}}],["encodevalue(value",{"_index":229,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["end",{"_index":815,"title":{},"body":{"index.html":{}}}],["environment",{"_index":748,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error('apimodule",{"_index":84,"title":{},"body":{"modules/ApiModule.html":{}}}],["error('you",{"_index":89,"title":{},"body":{"modules/ApiModule.html":{}}}],["eslint",{"_index":65,"title":{},"body":{"modules/ApiModule.html":{}}}],["eventtarget",{"_index":606,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["evo?.id",{"_index":456,"title":{},"body":{"components/ModalComponent.html":{}}}],["evo?.name",{"_index":457,"title":{},"body":{"components/ModalComponent.html":{}}}],["evolution",{"_index":451,"title":{},"body":{"components/ModalComponent.html":{}}}],["evolutionrequirements",{"_index":478,"title":{},"body":{"interfaces/NewPokemon.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{}}}],["evolutions",{"_index":479,"title":{},"body":{"interfaces/NewPokemon.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{}}}],["ewefwef",{"_index":677,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["example",{"_index":509,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["except",{"_index":279,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["exclude",{"_index":477,"title":{},"body":{"interfaces/NewPokemon.html":{}}}],["execute",{"_index":812,"title":{},"body":{"index.html":{}}}],["expect",{"_index":512,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["expected",{"_index":384,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["explode",{"_index":240,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["export",{"_index":25,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"injectables/BaseService.html":{},"interfaces/Count.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["exports",{"_index":44,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"overview.html":{}}}],["extends",{"_index":197,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["fallback",{"_index":178,"title":{},"body":{"injectables/BaseService.html":{}}}],["false",{"_index":272,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"miscellaneous/variables.html":{}}}],["fast",{"_index":463,"title":{},"body":{"components/ModalComponent.html":{}}}],["favourite",{"_index":480,"title":{},"body":{"interfaces/NewPokemon.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{}}}],["favouritereload",{"_index":697,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"injectables/BaseService.html":{},"interfaces/Count.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{}}}],["files",{"_index":796,"title":{},"body":{"index.html":{}}}],["filter",{"_index":528,"title":{},"body":{"injectables/PingControllerService.html":{},"components/PokemonsComponent.html":{}}}],["filter((r",{"_index":538,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["filterby",{"_index":573,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["filterby(type",{"_index":594,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["filterorder",{"_index":566,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["find",{"_index":682,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["flag",{"_index":806,"title":{},"body":{"index.html":{}}}],["fleerate",{"_index":449,"title":{},"body":{"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{}}}],["form",{"_index":302,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["formdata",{"_index":372,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["formdata.append(key",{"_index":374,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["formdata.set(key",{"_index":376,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["formdatavalue",{"_index":700,"title":{},"body":{"classes/RequestBuilder.html":{}}}],["formdatavalue(value",{"_index":377,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["formvalue",{"_index":364,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["forroot",{"_index":57,"title":{},"body":{"modules/ApiModule.html":{}}}],["forroot(params",{"_index":58,"title":{},"body":{"modules/ApiModule.html":{}}}],["found",{"_index":625,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["full",{"_index":508,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["further",{"_index":817,"title":{},"body":{"index.html":{}}}],["generate",{"_index":799,"title":{},"body":{"index.html":{}}}],["generated",{"_index":783,"title":{},"body":{"index.html":{}}}],["getpokemons",{"_index":574,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["getpokemonsbyid",{"_index":575,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["getpokemonsbyid(id",{"_index":599,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["getpokemonscount",{"_index":576,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["getpokemonswithpagination",{"_index":577,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["getrooturl",{"_index":171,"title":{},"body":{"injectables/BaseService.html":{}}}],["getting",{"_index":780,"title":{"index.html":{}},"body":{}}],["gettitletext",{"_index":150,"title":{},"body":{"classes/AppPage.html":{}}}],["global",{"_index":9,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{}}}],["go",{"_index":819,"title":{},"body":{"index.html":{}}}],["greeting",{"_index":546,"title":{},"body":{"interfaces/PingResponse.html":{}}}],["grid",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["handle",{"_index":220,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["header",{"_index":196,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["header(name",{"_index":347,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["headerparam",{"_index":407,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["headerparam.append(httpheaders",{"_index":409,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["headerparameter",{"_index":191,"title":{"classes/HeaderParameter.html":{}},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{}}}],["headerparameter(name",{"_index":349,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["headers",{"_index":210,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"interfaces/PingResponse.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["headers.append(this.name",{"_index":328,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["height",{"_index":446,"title":{},"body":{"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{}}}],["help",{"_index":818,"title":{},"body":{"index.html":{}}}],["helper",{"_index":329,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["here",{"_index":432,"title":{},"body":{"components/ModalComponent.html":{}}}],["html",{"_index":116,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["http",{"_index":81,"title":{},"body":{"modules/ApiModule.html":{},"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"miscellaneous/typealiases.html":{}}}],["http://localhost:3000",{"_index":169,"title":{},"body":{"injectables/BaseService.html":{},"injectables/PingControllerService.html":{}}}],["http://localhost:4200",{"_index":793,"title":{},"body":{"index.html":{}}}],["httpclient",{"_index":69,"title":{},"body":{"modules/ApiModule.html":{},"injectables/BaseService.html":{},"injectables/PingControllerService.html":{}}}],["httpclientmodule",{"_index":91,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{}}}],["httpheaders",{"_index":208,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["httpheaders.append('accept",{"_index":406,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["httpheaders.set('content",{"_index":410,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["httpparametercodec",{"_index":215,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["httpparams",{"_index":216,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["httprequest",{"_index":214,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["httprequest(this.method.touppercase",{"_index":412,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["httpresponse",{"_index":517,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["https://github.com/angular/angular/issues/18261",{"_index":224,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["https://github.com/angular/angular/issues/20575",{"_index":94,"title":{},"body":{"modules/ApiModule.html":{}}}],["i'm",{"_index":429,"title":{},"body":{"components/ModalComponent.html":{}}}],["i\\'m",{"_index":470,"title":{},"body":{"components/ModalComponent.html":{}}}],["id",{"_index":434,"title":{},"body":{"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{}}}],["identifier",{"_index":719,"title":{},"body":{"coverage.html":{}}}],["idfind",{"_index":694,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["im",{"_index":689,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["images",{"_index":643,"title":{},"body":{"components/PokemonsComponent.html":{},"dependencies.html":{}}}],["implements",{"_index":226,"title":{},"body":{"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["import",{"_index":21,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["imports",{"_index":75,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{}}}],["includerelations",{"_index":557,"title":{},"body":{"interfaces/PokemonWithRelations.html":{}}}],["index",{"_index":11,"title":{"index.html":{}},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"components/AppComponent.html":{},"classes/AppPage.html":{},"injectables/BaseService.html":{},"interfaces/Count.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":482,"title":{},"body":{"interfaces/NewPokemon.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"injectables/BaseService.html":{},"interfaces/Count.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["information",{"_index":619,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["inherited",{"_index":205,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{}}}],["initialpagination",{"_index":567,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["injectable",{"_index":0,"title":{"injectables/ApiConfiguration.html":{},"injectables/ApiService.html":{},"injectables/BaseService.html":{},"injectables/PingControllerService.html":{}},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"injectables/ApiService.html":{},"injectables/BaseService.html":{},"injectables/PingControllerService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/ApiConfiguration.html":{},"injectables/ApiService.html":{},"injectables/BaseService.html":{},"injectables/PingControllerService.html":{},"overview.html":{}}}],["input",{"_index":428,"title":{},"body":{"components/ModalComponent.html":{}}}],["inputs",{"_index":422,"title":{},"body":{"components/ModalComponent.html":{}}}],["instanceof",{"_index":251,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["instead",{"_index":510,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["interface",{"_index":29,"title":{"interfaces/ApiConfigurationParams.html":{},"interfaces/Count.html":{},"interfaces/NewPokemon.html":{},"interfaces/ParameterOptions.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{}},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"interfaces/Count.html":{},"classes/HeaderParameter.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{}}}],["interfaces",{"_index":34,"title":{},"body":{"interfaces/ApiConfigurationParams.html":{},"interfaces/Count.html":{},"interfaces/NewPokemon.html":{},"interfaces/ParameterOptions.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"overview.html":{}}}],["jquery",{"_index":769,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":387,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["json.stringify(value",{"_index":378,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["karma",{"_index":814,"title":{},"body":{"index.html":{}}}],["key",{"_index":257,"title":{},"body":{"classes/HeaderParameter.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["key,value,key,value",{"_index":326,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["label",{"_index":276,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["legend",{"_index":40,"title":{},"body":{"modules/ApiModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{},"overview.html":{}}}],["list",{"_index":325,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["literal",{"_index":484,"title":{},"body":{"interfaces/NewPokemon.html":{},"injectables/PingControllerService.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"classes/RequestBuilder.html":{},"miscellaneous/variables.html":{}}}],["loaded",{"_index":86,"title":{},"body":{"modules/ApiModule.html":{}}}],["makeitfavourite",{"_index":578,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["makeitfavourite(element",{"_index":605,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["map",{"_index":334,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["map((r",{"_index":540,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["mark",{"_index":607,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["matching",{"_index":32,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"injectables/BaseService.html":{},"interfaces/Count.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matrix",{"_index":277,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["maxcp",{"_index":458,"title":{},"body":{"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{}}}],["maxhp",{"_index":460,"title":{},"body":{"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{}}}],["maximum",{"_index":444,"title":{},"body":{"components/ModalComponent.html":{}}}],["metadata",{"_index":106,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["method",{"_index":340,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["methods",{"_index":55,"title":{},"body":{"modules/ApiModule.html":{},"classes/AppPage.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["minimum",{"_index":442,"title":{},"body":{"components/ModalComponent.html":{}}}],["miscellaneous",{"_index":831,"title":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["modal",{"_index":417,"title":{},"body":{"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["modal'},{'name",{"_index":123,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["modal.component.html",{"_index":419,"title":{},"body":{"components/ModalComponent.html":{}}}],["modal.component.scss",{"_index":418,"title":{},"body":{"components/ModalComponent.html":{}}}],["modal/modal.component",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"components/PokemonsComponent.html":{}}}],["modalcomponent",{"_index":122,"title":{"components/ModalComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["modalref",{"_index":650,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["modalref.componentinstance.name",{"_index":652,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["modalservice",{"_index":585,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["models/ping",{"_index":531,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["module",{"_index":36,"title":{"modules/ApiModule.html":{},"modules/AppModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"overview.html":{}}}],["modules",{"_index":38,"title":{"modules.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["modulewithproviders",{"_index":63,"title":{},"body":{"modules/ApiModule.html":{}}}],["more",{"_index":693,"title":{},"body":{"components/PokemonsComponent.html":{},"index.html":{}}}],["multipart",{"_index":371,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["multipart/form",{"_index":370,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["n",{"_index":92,"title":{},"body":{"modules/ApiModule.html":{}}}],["name",{"_index":60,"title":{},"body":{"modules/ApiModule.html":{},"components/AppComponent.html":{},"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"index.html":{}}}],["name?.classification",{"_index":437,"title":{},"body":{"components/ModalComponent.html":{}}}],["name?.evolutionrequirements.amount",{"_index":454,"title":{},"body":{"components/ModalComponent.html":{}}}],["name?.evolutionrequirements.name",{"_index":455,"title":{},"body":{"components/ModalComponent.html":{}}}],["name?.fleerate",{"_index":450,"title":{},"body":{"components/ModalComponent.html":{}}}],["name?.height?.maximum",{"_index":448,"title":{},"body":{"components/ModalComponent.html":{}}}],["name?.height?.minimum",{"_index":447,"title":{},"body":{"components/ModalComponent.html":{}}}],["name?.id",{"_index":435,"title":{},"body":{"components/ModalComponent.html":{}}}],["name?.maxcp",{"_index":459,"title":{},"body":{"components/ModalComponent.html":{}}}],["name?.maxhp",{"_index":461,"title":{},"body":{"components/ModalComponent.html":{}}}],["name?.name",{"_index":430,"title":{},"body":{"components/ModalComponent.html":{}}}],["name?.resistant",{"_index":440,"title":{},"body":{"components/ModalComponent.html":{}}}],["name?.types",{"_index":438,"title":{},"body":{"components/ModalComponent.html":{}}}],["name?.weight?.maximum",{"_index":445,"title":{},"body":{"components/ModalComponent.html":{}}}],["name?.weight?.minimum",{"_index":443,"title":{},"body":{"components/ModalComponent.html":{}}}],["name[key",{"_index":313,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["namefilter",{"_index":695,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["nameofpokemon",{"_index":646,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["navigate",{"_index":792,"title":{},"body":{"index.html":{}}}],["navigateto",{"_index":151,"title":{},"body":{"classes/AppPage.html":{}}}],["need",{"_index":90,"title":{},"body":{"modules/ApiModule.html":{}}}],["new",{"_index":83,"title":{},"body":{"modules/ApiModule.html":{},"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newpokemon",{"_index":471,"title":{"interfaces/NewPokemon.html":{}},"body":{"interfaces/NewPokemon.html":{},"components/PokemonsComponent.html":{},"coverage.html":{}}}],["newpokemon}).subscribe(res",{"_index":680,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["ng",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{},"dependencies.html":{},"index.html":{}}}],["ngbactivemodal",{"_index":424,"title":{},"body":{"components/ModalComponent.html":{}}}],["ngbalertmodule",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["ngbmodal",{"_index":586,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["ngbpaginationmodule",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["ngmodule",{"_index":67,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{}}}],["ngondestroy",{"_index":579,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["ngoninit",{"_index":421,"title":{},"body":{"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["nrofrecords",{"_index":568,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["nrpokemons.count",{"_index":661,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["null",{"_index":248,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"miscellaneous/typealiases.html":{}}}],["number",{"_index":190,"title":{},"body":{"interfaces/Count.html":{},"interfaces/NewPokemon.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{}}}],["object",{"_index":256,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"miscellaneous/variables.html":{}}}],["object.keys(this.value",{"_index":314,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["object.keys(value",{"_index":258,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["objects",{"_index":286,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["observable",{"_index":514,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["omit",{"_index":475,"title":{},"body":{"interfaces/NewPokemon.html":{}}}],["ondestroy",{"_index":560,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["oninit",{"_index":416,"title":{},"body":{"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["open",{"_index":580,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["open(datapok",{"_index":617,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["operation",{"_index":267,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["operationpath",{"_index":339,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["operations",{"_index":174,"title":{},"body":{"injectables/BaseService.html":{}}}],["optional",{"_index":35,"title":{},"body":{"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"injectables/BaseService.html":{},"interfaces/Count.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["options",{"_index":199,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["options.accept",{"_index":405,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["options.reportprogress",{"_index":414,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["options.responsetype",{"_index":413,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["out",{"_index":51,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":825,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":755,"title":{"dependencies.html":{}},"body":{}}],["pagination",{"_index":604,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["pairs",{"_index":288,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["pairs.map(p",{"_index":368,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["pairs.push([key",{"_index":366,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["param",{"_index":645,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["parameter",{"_index":194,"title":{"classes/Parameter.html":{}},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{}}}],["parameter:40",{"_index":206,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{}}}],["parameter:50",{"_index":213,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{}}}],["parametercodec",{"_index":225,"title":{"classes/ParameterCodec.html":{}},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["parametercodecinstance",{"_index":236,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["parameteroptions",{"_index":203,"title":{"interfaces/ParameterOptions.html":{}},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{}}}],["parameters",{"_index":27,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["params",{"_index":61,"title":{},"body":{"modules/ApiModule.html":{},"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["params.append(`${this.name}[${key",{"_index":316,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["params.append(key",{"_index":320,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["params.append(this.name",{"_index":307,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["parentmodule",{"_index":80,"title":{},"body":{"modules/ApiModule.html":{}}}],["part",{"_index":521,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["partial",{"_index":553,"title":{},"body":{"interfaces/PokemonPartial.html":{}}}],["partial.ts",{"_index":552,"title":{},"body":{"interfaces/PokemonPartial.html":{},"coverage.html":{}}}],["partial.ts:22",{"_index":554,"title":{},"body":{"interfaces/PokemonPartial.html":{}}}],["path",{"_index":268,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["path(name",{"_index":341,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["path.replace(`{${prefix}${this.name}${this.options.explode",{"_index":299,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["path.replace(`{${this.name",{"_index":298,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["pathparam",{"_index":397,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["pathparam.append(path",{"_index":399,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["pathparameter",{"_index":269,"title":{"classes/PathParameter.html":{}},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{}}}],["pathparameter(name",{"_index":343,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["perform",{"_index":411,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["ping",{"_index":502,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["ping$response",{"_index":503,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["ping$response(params",{"_index":515,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["ping(params",{"_index":505,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["pingcontrollerping",{"_index":522,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["pingcontrollerpingpath",{"_index":501,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["pingcontrollerservice",{"_index":47,"title":{"injectables/PingControllerService.html":{}},"body":{"modules/ApiModule.html":{},"injectables/PingControllerService.html":{},"coverage.html":{},"overview.html":{}}}],["pingcontrollerservice.pingcontrollerpingpath",{"_index":535,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["pingresponse",{"_index":530,"title":{"interfaces/PingResponse.html":{}},"body":{"injectables/PingControllerService.html":{},"interfaces/PingResponse.html":{},"coverage.html":{}}}],["pipe",{"_index":537,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["pipedelimited",{"_index":310,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["plain",{"_index":292,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["plus",{"_index":221,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["pokemon",{"_index":547,"title":{"interfaces/Pokemon.html":{}},"body":{"interfaces/Pokemon.html":{},"components/PokemonsComponent.html":{},"coverage.html":{},"dependencies.html":{}}}],["pokemon.id",{"_index":685,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["pokemon.id}).subscribe",{"_index":657,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["pokemon.name",{"_index":686,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["pokemon.ts",{"_index":473,"title":{},"body":{"interfaces/NewPokemon.html":{},"coverage.html":{}}}],["pokemon.ts:21",{"_index":483,"title":{},"body":{"interfaces/NewPokemon.html":{}}}],["pokemon.types",{"_index":687,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["pokemonapp",{"_index":114,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["pokemoncontrollerservice",{"_index":48,"title":{},"body":{"modules/ApiModule.html":{},"components/PokemonsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["pokemonid",{"_index":608,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["pokemonimg",{"_index":642,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["pokemonimg.getsprite(nameofpokemon",{"_index":649,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["pokemonpartial",{"_index":550,"title":{"interfaces/PokemonPartial.html":{}},"body":{"interfaces/PokemonPartial.html":{},"coverage.html":{}}}],["pokemons",{"_index":125,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["pokemons.component.html",{"_index":562,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["pokemons.component.scss",{"_index":561,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["pokemons/pokemons.component",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["pokemonscomponent",{"_index":124,"title":{"components/PokemonsComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["pokemonservice",{"_index":569,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["pokemonwithrelations",{"_index":555,"title":{"interfaces/PokemonWithRelations.html":{}},"body":{"interfaces/PokemonWithRelations.html":{},"coverage.html":{}}}],["prefix",{"_index":275,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["private",{"_index":163,"title":{},"body":{"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["prod",{"_index":805,"title":{},"body":{"index.html":{}}}],["production",{"_index":807,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["progress",{"_index":392,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["project",{"_index":782,"title":{},"body":{"index.html":{}}}],["promise",{"_index":153,"title":{},"body":{"classes/AppPage.html":{}}}],["properties",{"_index":12,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"components/AppComponent.html":{},"injectables/BaseService.html":{},"interfaces/Count.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["propval",{"_index":259,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["protected",{"_index":184,"title":{},"body":{"injectables/BaseService.html":{}}}],["protractor",{"_index":155,"title":{},"body":{"classes/AppPage.html":{},"index.html":{}}}],["provide",{"_index":77,"title":{},"body":{"modules/ApiModule.html":{}}}],["providedin",{"_index":23,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"injectables/ApiService.html":{},"injectables/PingControllerService.html":{}}}],["providers",{"_index":43,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"overview.html":{}}}],["provides",{"_index":53,"title":{},"body":{"modules/ApiModule.html":{},"injectables/PingControllerService.html":{}}}],["public",{"_index":198,"title":{},"body":{"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["put",{"_index":287,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["query",{"_index":300,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["query(name",{"_index":344,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["queryparam",{"_index":402,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["queryparam.append(httpparams",{"_index":404,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["queryparameter",{"_index":301,"title":{"classes/QueryParameter.html":{}},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{}}}],["queryparameter(name",{"_index":346,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["r",{"_index":539,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["r.body",{"_index":542,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["rb",{"_index":533,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["readme",{"_index":821,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":500,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["records",{"_index":592,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["refresh",{"_index":581,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["relations.ts",{"_index":556,"title":{},"body":{"interfaces/PokemonWithRelations.html":{},"coverage.html":{}}}],["relations.ts:22",{"_index":558,"title":{},"body":{"interfaces/PokemonWithRelations.html":{}}}],["reload",{"_index":683,"title":{},"body":{"components/PokemonsComponent.html":{},"index.html":{}}}],["repeat",{"_index":283,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["replace",{"_index":290,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["report",{"_index":391,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["reportprogress",{"_index":395,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["request",{"_index":195,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["requestbuilder",{"_index":332,"title":{"classes/RequestBuilder.html":{}},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{}}}],["requestbuilder(this.rooturl",{"_index":534,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["requests",{"_index":331,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["require",{"_index":752,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["require.context",{"_index":842,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requirements",{"_index":452,"title":{},"body":{"components/ModalComponent.html":{}}}],["reset",{"_index":50,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"components/PokemonsComponent.html":{},"overview.html":{}}}],["resistant",{"_index":439,"title":{},"body":{"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{}}}],["response",{"_index":385,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"miscellaneous/typealiases.html":{}}}],["response.ts",{"_index":544,"title":{},"body":{"interfaces/PingResponse.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["responsetype",{"_index":386,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["result",{"_index":31,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"injectables/BaseService.html":{},"interfaces/Count.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":33,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"injectables/BaseService.html":{},"interfaces/Count.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":76,"title":{},"body":{"modules/ApiModule.html":{},"classes/AppPage.html":{},"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["returns",{"_index":62,"title":{},"body":{"modules/ApiModule.html":{},"classes/AppPage.html":{},"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["root",{"_index":24,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"injectables/ApiService.html":{},"components/AppComponent.html":{},"classes/AppPage.html":{},"injectables/BaseService.html":{},"injectables/PingControllerService.html":{}}}],["root'},{'name",{"_index":121,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["rooturl",{"_index":13,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["rooturl(rooturl",{"_index":187,"title":{},"body":{"injectables/BaseService.html":{}}}],["run",{"_index":789,"title":{},"body":{"index.html":{}}}],["running",{"_index":808,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":527,"title":{},"body":{"injectables/PingControllerService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":529,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["scaffolding",{"_index":798,"title":{},"body":{"index.html":{}}}],["schemaoptions",{"_index":476,"title":{},"body":{"interfaces/NewPokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{}}}],["search",{"_index":597,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["searchby",{"_index":582,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["searchby(type",{"_index":623,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["see",{"_index":93,"title":{},"body":{"modules/ApiModule.html":{},"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["selected",{"_index":612,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["selector",{"_index":107,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["separated",{"_index":324,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["separator",{"_index":212,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["serialization",{"_index":305,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["serializevalue",{"_index":201,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{}}}],["serializevalue(value",{"_index":211,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["serve",{"_index":790,"title":{},"body":{"index.html":{}}}],["server",{"_index":788,"title":{},"body":{"index.html":{}}}],["service",{"_index":175,"title":{},"body":{"injectables/BaseService.html":{},"injectables/PingControllerService.html":{}}}],["service.ts",{"_index":162,"title":{},"body":{"injectables/BaseService.html":{},"coverage.html":{}}}],["service.ts:11",{"_index":167,"title":{},"body":{"injectables/BaseService.html":{}}}],["service.ts:17",{"_index":170,"title":{},"body":{"injectables/BaseService.html":{}}}],["service.ts:23",{"_index":172,"title":{},"body":{"injectables/BaseService.html":{}}}],["service.ts:30",{"_index":181,"title":{},"body":{"injectables/BaseService.html":{}}}],["services",{"_index":54,"title":{},"body":{"modules/ApiModule.html":{},"injectables/BaseService.html":{}}}],["services/ping",{"_index":72,"title":{},"body":{"modules/ApiModule.html":{}}}],["services/pokemon",{"_index":74,"title":{},"body":{"modules/ApiModule.html":{}}}],["set",{"_index":176,"title":{},"body":{"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["setrooturl(rooturl",{"_index":180,"title":{},"body":{"injectables/BaseService.html":{}}}],["sets",{"_index":182,"title":{},"body":{"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["shown",{"_index":613,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["sign",{"_index":222,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["simple",{"_index":271,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["single",{"_index":321,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["skiprecords",{"_index":570,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["skipself",{"_index":68,"title":{},"body":{"modules/ApiModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"injectables/BaseService.html":{},"interfaces/Count.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"index.html":{}}}],["spacedelimited",{"_index":309,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["span')).gettext",{"_index":159,"title":{},"body":{"classes/AppPage.html":{}}}],["spec\\.ts",{"_index":843,"title":{},"body":{"miscellaneous/variables.html":{}}}],["special",{"_index":468,"title":{},"body":{"components/ModalComponent.html":{}}}],["specs",{"_index":433,"title":{},"body":{"components/ModalComponent.html":{}}}],["src/.../environment.prod.ts",{"_index":839,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":840,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../request",{"_index":841,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../strict",{"_index":834,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../test.ts",{"_index":838,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/api.service.ts",{"_index":96,"title":{},"body":{"injectables/ApiService.html":{},"coverage.html":{}}}],["src/app/api.service.ts:6",{"_index":97,"title":{},"body":{"injectables/ApiService.html":{}}}],["src/app/api/api",{"_index":6,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"coverage.html":{}}}],["src/app/api/api.module.ts",{"_index":52,"title":{},"body":{"modules/ApiModule.html":{}}}],["src/app/api/api.module.ts:24",{"_index":59,"title":{},"body":{"modules/ApiModule.html":{}}}],["src/app/api/base",{"_index":161,"title":{},"body":{"injectables/BaseService.html":{},"coverage.html":{}}}],["src/app/api/models/loopback/count.ts",{"_index":189,"title":{},"body":{"interfaces/Count.html":{},"coverage.html":{}}}],["src/app/api/models/new",{"_index":472,"title":{},"body":{"interfaces/NewPokemon.html":{},"coverage.html":{}}}],["src/app/api/models/ping",{"_index":543,"title":{},"body":{"interfaces/PingResponse.html":{},"coverage.html":{}}}],["src/app/api/models/pokemon",{"_index":551,"title":{},"body":{"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"coverage.html":{}}}],["src/app/api/models/pokemon.ts",{"_index":548,"title":{},"body":{"interfaces/Pokemon.html":{},"coverage.html":{}}}],["src/app/api/models/pokemon.ts:18",{"_index":549,"title":{},"body":{"interfaces/Pokemon.html":{}}}],["src/app/api/request",{"_index":192,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/api/services/ping",{"_index":498,"title":{},"body":{"injectables/PingControllerService.html":{},"coverage.html":{}}}],["src/app/api/services/pokemon",{"_index":742,"title":{},"body":{"coverage.html":{}}}],["src/app/api/strict",{"_index":835,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app/app.component.ts",{"_index":105,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:9",{"_index":115,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.module.ts",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/modal/modal.component.ts",{"_index":415,"title":{},"body":{"components/ModalComponent.html":{},"coverage.html":{}}}],["src/app/modal/modal.component.ts:10",{"_index":425,"title":{},"body":{"components/ModalComponent.html":{}}}],["src/app/modal/modal.component.ts:12",{"_index":427,"title":{},"body":{"components/ModalComponent.html":{}}}],["src/app/modal/modal.component.ts:15",{"_index":426,"title":{},"body":{"components/ModalComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts",{"_index":559,"title":{},"body":{"components/PokemonsComponent.html":{},"coverage.html":{}}}],["src/app/pokemons/pokemons.component.ts:101",{"_index":627,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:111",{"_index":600,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:122",{"_index":624,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:132",{"_index":595,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:14",{"_index":633,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:154",{"_index":609,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:16",{"_index":628,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:165",{"_index":588,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:17",{"_index":631,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:18",{"_index":639,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:19",{"_index":634,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:199",{"_index":621,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:20",{"_index":635,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:203",{"_index":615,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:21",{"_index":587,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:23",{"_index":637,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:26",{"_index":636,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:27",{"_index":629,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:29",{"_index":616,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:37",{"_index":618,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:47",{"_index":598,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:56",{"_index":590,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:69",{"_index":602,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/app/pokemons/pokemons.component.ts:82",{"_index":603,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["src/environments/environment.prod.ts",{"_index":747,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":749,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/test.ts",{"_index":750,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["started",{"_index":781,"title":{"index.html":{}},"body":{}}],["statements",{"_index":720,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":56,"title":{},"body":{"modules/ApiModule.html":{},"injectables/PingControllerService.html":{}}}],["stored",{"_index":802,"title":{},"body":{"index.html":{}}}],["strict",{"_index":525,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["stricthttpresponse",{"_index":524,"title":{},"body":{"injectables/PingControllerService.html":{},"miscellaneous/typealiases.html":{}}}],["string",{"_index":16,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"components/AppComponent.html":{},"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["string(value",{"_index":266,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["style",{"_index":239,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["styles",{"_index":102,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["styleurls",{"_index":109,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["super(config",{"_index":532,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["super(name",{"_index":270,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["support",{"_index":822,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":823,"title":{},"body":{"modules.html":{}}}],["t",{"_index":712,"title":{},"body":{"classes/RequestBuilder.html":{},"miscellaneous/typealiases.html":{}}}],["table",{"_index":754,"title":{},"body":{"coverage.html":{}}}],["tables",{"_index":774,"title":{},"body":{"dependencies.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":753,"title":{},"body":{"coverage.html":{}}}],["tabulator",{"_index":773,"title":{},"body":{"dependencies.html":{}}}],["taking",{"_index":296,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["template",{"_index":101,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["templateurl",{"_index":111,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["test",{"_index":811,"title":{},"body":{"index.html":{}}}],["tests",{"_index":810,"title":{},"body":{"index.html":{}}}],["text",{"_index":388,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["text).subscribe(result",{"_index":668,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this._bodycontent",{"_index":367,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this._bodycontenttype",{"_index":356,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this._header.set(name",{"_index":348,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this._header.values",{"_index":408,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this._path.set(name",{"_index":342,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this._path.values",{"_index":398,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this._query.set(name",{"_index":345,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this._query.values",{"_index":403,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this._rooturl",{"_index":185,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.button",{"_index":674,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.button.textcontent",{"_index":675,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.config.rooturl",{"_index":186,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.currentrecords",{"_index":690,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.filterorder",{"_index":669,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.formdatavalue(v",{"_index":365,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this.formdatavalue(val",{"_index":375,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this.getpokemonscount",{"_index":644,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.http.request(rb.build",{"_index":536,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["this.initialpagination",{"_index":662,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.modalservice.open(modalcomponent",{"_index":651,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.name",{"_index":281,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this.name}=${this.serializevalue(v",{"_index":285,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this.nrofrecords",{"_index":660,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.nrofrecords}}load",{"_index":692,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.operationpath",{"_index":396,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this.options",{"_index":246,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this.options.explode",{"_index":250,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this.options.style",{"_index":247,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this.ping$response(params).pipe",{"_index":541,"title":{},"body":{"injectables/PingControllerService.html":{}}}],["this.pokemons",{"_index":654,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.pokemons.foreach(pokemon",{"_index":655,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.pokemonservice.count().subscribe(nrpokemons",{"_index":659,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.pokemonservice.create({body",{"_index":679,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.pokemonservice.deletebyid({id",{"_index":656,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.pokemonservice.filldatabase",{"_index":658,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.pokemonservice.filterby(type",{"_index":670,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.pokemonservice.find().subscribe(pokemons",{"_index":653,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.pokemonservice.findbyid({id}).subscribe(pokemon",{"_index":666,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.pokemonservice.searchby(type",{"_index":667,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.pokemonservice.updatebyid({id",{"_index":663,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.rooturl",{"_index":400,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this.serializevalue(array",{"_index":327,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this.serializevalue(propval",{"_index":317,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this.serializevalue(propval).split(separator).join(encodeuricomponent(separator",{"_index":261,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this.serializevalue(this.value",{"_index":311,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this.serializevalue(v",{"_index":308,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this.serializevalue(v).split(separator).join(encodeuricomponent(separator))).join(separator",{"_index":254,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this.serializevalue(value",{"_index":289,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this.updatepokemon(pokemonid",{"_index":676,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["this.value",{"_index":274,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["this.value[key",{"_index":315,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["throw",{"_index":82,"title":{},"body":{"modules/ApiModule.html":{}}}],["times",{"_index":431,"title":{},"body":{"components/ModalComponent.html":{}}}],["title",{"_index":113,"title":{},"body":{"components/AppComponent.html":{},"interfaces/NewPokemon.html":{}}}],["toappend",{"_index":373,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["toggle",{"_index":610,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["total",{"_index":691,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["tree",{"_index":104,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["true",{"_index":303,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"miscellaneous/variables.html":{}}}],["tslib",{"_index":776,"title":{},"body":{"dependencies.html":{}}}],["tslint:disable",{"_index":64,"title":{},"body":{"modules/ApiModule.html":{}}}],["tstype",{"_index":474,"title":{},"body":{"interfaces/NewPokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{}}}],["type",{"_index":14,"title":{},"body":{"injectables/ApiConfiguration.html":{},"interfaces/ApiConfigurationParams.html":{},"modules/ApiModule.html":{},"components/AppComponent.html":{},"injectables/BaseService.html":{},"interfaces/Count.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"interfaces/PingResponse.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":832,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typefilter",{"_index":696,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["typeof",{"_index":255,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["types",{"_index":382,"title":{},"body":{"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["u)selected",{"_index":614,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["undefined",{"_index":249,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["unit",{"_index":809,"title":{},"body":{"index.html":{}}}],["updatepokemon",{"_index":583,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["updatepokemon(id",{"_index":626,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["uploads",{"_index":393,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["url",{"_index":173,"title":{},"body":{"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"interfaces/PingResponse.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["urlencoded",{"_index":360,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["use",{"_index":519,"title":{},"body":{"injectables/PingControllerService.html":{},"index.html":{}}}],["used",{"_index":278,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["usevalue",{"_index":78,"title":{},"body":{"modules/ApiModule.html":{}}}],["using",{"_index":319,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["v",{"_index":306,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["val",{"_index":363,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["value",{"_index":18,"title":{},"body":{"injectables/ApiConfiguration.html":{},"components/AppComponent.html":{},"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"injectables/PingControllerService.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"miscellaneous/variables.html":{}}}],["value.map(v",{"_index":253,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["value.type",{"_index":357,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["value[key",{"_index":260,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["values",{"_index":223,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["value}}).subscribe(res",{"_index":664,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["var",{"_index":119,"title":{},"body":{"components/AppComponent.html":{},"components/ModalComponent.html":{},"components/PokemonsComponent.html":{}}}],["variable",{"_index":293,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{},"coverage.html":{}}}],["variables",{"_index":837,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["variant",{"_index":295,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["version",{"_index":785,"title":{},"body":{"index.html":{}}}],["via",{"_index":813,"title":{},"body":{"index.html":{}}}],["view",{"_index":688,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["void",{"_index":183,"title":{},"body":{"injectables/BaseService.html":{},"classes/HeaderParameter.html":{},"components/ModalComponent.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"components/PokemonsComponent.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["weaknesses",{"_index":481,"title":{},"body":{"interfaces/NewPokemon.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{}}}],["weight",{"_index":441,"title":{},"body":{"components/ModalComponent.html":{},"interfaces/NewPokemon.html":{},"interfaces/Pokemon.html":{},"interfaces/PokemonPartial.html":{},"interfaces/PokemonWithRelations.html":{},"components/PokemonsComponent.html":{}}}],["whether",{"_index":390,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["whose",{"_index":322,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["window",{"_index":622,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["window.location.reload",{"_index":681,"title":{},"body":{"components/PokemonsComponent.html":{}}}],["without",{"_index":318,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["www",{"_index":359,"title":{},"body":{"classes/HeaderParameter.html":{},"classes/Parameter.html":{},"classes/ParameterCodec.html":{},"interfaces/ParameterOptions.html":{},"classes/PathParameter.html":{},"classes/QueryParameter.html":{},"classes/RequestBuilder.html":{}}}],["yes",{"_index":513,"title":{},"body":{"injectables/PingControllerService.html":{},"classes/RequestBuilder.html":{}}}],["zone.js",{"_index":778,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":49,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/ApiConfiguration.html":{"url":"injectables/ApiConfiguration.html","title":"injectable - ApiConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ApiConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api/api-configuration.ts\n        \n\n            \n                Description\n            \n            \n                Global configuration\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                rootUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rootUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '/'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/api/api-configuration.ts:12\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n/**\n * Global configuration\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiConfiguration {\n  rootUrl: string = '/';\n}\n\n/**\n * Parameters for `ApiModule.forRoot()`\n */\nexport interface ApiConfigurationParams {\n  rootUrl?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ApiConfigurationParams.html":{"url":"interfaces/ApiConfigurationParams.html","title":"interface - ApiConfigurationParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ApiConfigurationParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api/api-configuration.ts\n        \n\n            \n                Description\n            \n            \n                Parameters for ApiModule.forRoot()\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        rootUrl\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        rootUrl\n                                    \n                                \n                                \n                                    \n                                        rootUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n/**\n * Global configuration\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiConfiguration {\n  rootUrl: string = '/';\n}\n\n/**\n * Parameters for `ApiModule.forRoot()`\n */\nexport interface ApiConfigurationParams {\n  rootUrl?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ApiModule.html":{"url":"modules/ApiModule.html","title":"module - ApiModule","body":"\n                   \n\n\n\n\n    Modules\n    ApiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ApiModule\n\n\n\ncluster_ApiModule_providers\n\n\n\n\nApiConfiguration\n\nApiConfiguration\n\n\n\nApiModule\n\nApiModule\n\nApiModule -->\n\nApiConfiguration->ApiModule\n\n\n\n\n\nPingControllerService\n\nPingControllerService\n\nApiModule -->\n\nPingControllerService->ApiModule\n\n\n\n\n\nPokemonControllerService\n\nPokemonControllerService\n\nApiModule -->\n\nPokemonControllerService->ApiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/api/api.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Module that provides all services and configuration.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ApiConfiguration\n                        \n                        \n                            PingControllerService\n                        \n                        \n                            PokemonControllerService\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(params: ApiConfigurationParams)\n                \n            \n\n\n            \n                \n                    Defined in src/app/api/api.module.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                ApiConfigurationParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ModuleWithProviders\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        /* tslint:disable */\n/* eslint-disable */\nimport { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration, ApiConfigurationParams } from './api-configuration';\n\nimport { PingControllerService } from './services/ping-controller.service';\nimport { PokemonControllerService } from './services/pokemon-controller.service';\n\n/**\n * Module that provides all services and configuration.\n */\n@NgModule({\n  imports: [],\n  exports: [],\n  declarations: [],\n  providers: [\n    PingControllerService,\n    PokemonControllerService,\n    ApiConfiguration\n  ],\n})\nexport class ApiModule {\n  static forRoot(params: ApiConfigurationParams): ModuleWithProviders {\n    return {\n      ngModule: ApiModule,\n      providers: [\n        {\n          provide: ApiConfiguration,\n          useValue: params\n        }\n      ]\n    }\n  }\n\n  constructor( \n    @Optional() @SkipSelf() parentModule: ApiModule,\n    @Optional() http: HttpClient\n  ) {\n    if (parentModule) {\n      throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n    }\n    if (!http) {\n      throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n      'See also https://github.com/angular/angular/issues/20575');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ApiService.html":{"url":"injectables/ApiService.html","title":"injectable - ApiService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ApiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api.service.ts\n        \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/api.service.ts:6\n                            \n                        \n\n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  constructor() { }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                ./app.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'PokemonApp'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'PokemonApp';\n}\n\n    \n\n    \n        \n\n    \n\n    \n                \n                    ./app.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ModalComponent', 'selector': 'app-modal'},{'name': 'PokemonsComponent', 'selector': 'app-pokemons'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_AppModule_declarations\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nModalComponent\n\nModalComponent\n\nAppModule -->\n\nModalComponent->AppModule\n\n\n\n\n\nPokemonsComponent\n\nPokemonsComponent\n\nAppModule -->\n\nPokemonsComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AppComponent\n                        \n                        \n                            ModalComponent\n                        \n                        \n                            PokemonsComponent\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { PokemonsComponent } from './pokemons/pokemons.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AgGridModule } from 'ag-grid-angular';\nimport { NgbAlertModule, NgbPaginationModule } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalComponent } from './modal/modal.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    PokemonsComponent,\n    ModalComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    NgbPaginationModule,\n    NgbAlertModule,\n    AgGridModule.withComponents([])\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AppPage.html":{"url":"classes/AppPage.html","title":"class - AppPage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AppPage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            e2e/src/app.po.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getTitleText\n                            \n                            \n                                navigateTo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTitleText\n                        \n                        \n                    \n                \n            \n            \n                \ngetTitleText()\n                \n            \n\n\n            \n                \n                    Defined in e2e/src/app.po.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            navigateTo\n                        \n                        \n                    \n                \n            \n            \n                \nnavigateTo()\n                \n            \n\n\n            \n                \n                    Defined in e2e/src/app.po.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise {\n    return browser.get(browser.baseUrl) as Promise;\n  }\n\n  getTitleText(): Promise {\n    return element(by.css('app-root .content span')).getText() as Promise;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BaseService.html":{"url":"injectables/BaseService.html","title":"injectable - BaseService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  BaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api/base-service.ts\n        \n\n            \n                Description\n            \n            \n                Base class for services\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _rootUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    rootUrl\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ApiConfiguration, http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/api/base-service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        ApiConfiguration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _rootUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'http://localhost:3000/'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/api/base-service.ts:17\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        rootUrl\n                    \n                \n\n                \n                    \n                        getrootUrl()\n                    \n                \n                            \n                                \n                                    Defined in src/app/api/base-service.ts:23\n                                \n                            \n                    \n                        \n                                Returns the root url for all operations in this service. If not set directly in this\nservice, will fallback to ApiConfiguration.rootUrl.\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n                \n                    \n                        setrootUrl(rootUrl: string)\n                    \n                \n                            \n                                \n                                    Defined in src/app/api/base-service.ts:30\n                                \n                            \n                    \n                        \n                                Sets the root URL for API operations in this service.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            rootUrl\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration } from './api-configuration';\n\n/**\n * Base class for services\n */\n@Injectable()\nexport class BaseService {\n  constructor(\n    protected config: ApiConfiguration,\n    protected http: HttpClient\n  ) {\n  }\n  private _rootUrl: string = 'http://localhost:3000/';\n\n  /**\n   * Returns the root url for all operations in this service. If not set directly in this\n   * service, will fallback to `ApiConfiguration.rootUrl`.\n   */\n  get rootUrl(): string {\n    return this._rootUrl || this.config.rootUrl;\n  }\n\n  /**\n   * Sets the root URL for API operations in this service.\n   */\n  set rootUrl(rootUrl: string) {\n    this._rootUrl = rootUrl;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Count.html":{"url":"interfaces/Count.html","title":"interface - Count","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Count\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api/models/loopback/count.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        count\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Count {\n  count?: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HeaderParameter.html":{"url":"classes/HeaderParameter.html","title":"class - HeaderParameter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HeaderParameter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api/request-builder.ts\n        \n\n            \n                Description\n            \n            \n                A parameter in the HTTP request header\n\n            \n\n            \n                Extends\n            \n            \n                        Parameter\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                options\n                            \n                            \n                                    Public\n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                append\n                            \n                            \n                                serializeValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, value: any, options: ParameterOptions)\n                    \n                \n                        \n                            \n                                Defined in src/app/api/request-builder.ts:176\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        ParameterOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Parameter\n\n                                \n                            \n                        \n                            \n                                    Defined in         Parameter:40\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            options\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ParameterOptions\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Parameter\n\n                                \n                            \n                        \n                            \n                                    Defined in         Parameter:40\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Parameter\n\n                                \n                            \n                        \n                            \n                                    Defined in         Parameter:40\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            append\n                        \n                        \n                    \n                \n            \n            \n                \nappend(headers: HttpHeaders)\n                \n            \n\n\n            \n                \n                    Defined in src/app/api/request-builder.ts:181\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    headers\n                                    \n                                                HttpHeaders\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         HttpHeaders\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            serializeValue\n                        \n                        \n                    \n                \n            \n            \n                \nserializeValue(value: any, separator: string)\n                \n            \n\n\n            \n                \n                    Inherited from         Parameter\n\n                \n            \n            \n                \n                        Defined in         Parameter:50\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    separator\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ','\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map();\n  private _query = new Map();\n  private _header = new Map();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ModalComponent.html":{"url":"components/ModalComponent.html","title":"component - ModalComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ModalComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modal/modal.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-modal\n            \n\n            \n                styleUrls\n                ./modal.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./modal.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                activeModal\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(activeModal: NgbActiveModal)\n                    \n                \n                        \n                            \n                                Defined in src/app/modal/modal.component.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        activeModal\n                                                  \n                                                        \n                                                                    NgbActiveModal\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modal/modal.component.ts:10\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/modal/modal.component.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            activeModal\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     NgbActiveModal\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modal/modal.component.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {Component, Input, OnInit} from '@angular/core';\nimport {NgbActiveModal} from '@ng-bootstrap/ng-bootstrap';\n\n@Component({\n  selector: 'app-modal',\n  templateUrl: './modal.component.html',\n  styleUrls: ['./modal.component.scss']\n})\nexport class ModalComponent implements OnInit {\n  @Input() name: any;\n\n  constructor(public activeModal: NgbActiveModal) {\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n\n    \n\n    \n        \n  I'm {{name?.name}}\n  \n    &times;\n  \n\n\n  :: Here is my specs :: \n  \n  ID: {{name?.id}}\n  Classification: {{name?.classification}}\n  Types: {{name?.types}}\n  Resistant: {{name?.resistant}}\n  Weight\n    Minimum: {{name?.weight?.minimum}}\n    Maximum: {{name?.weight?.maximum}}\n  \n  Height\n    Minimum: {{name?.height?.minimum}}\n    Maximum: {{name?.height?.maximum}}\n  \n  FleeRate: {{name?.fleeRate}}\n  Evolution Requirements\n    Amount: {{name?.evolutionRequirements.amount}}\n    Name: {{name?.evolutionRequirements.name}}\n  \n  Evolution\n  \n    Id: {{evo?.id}}\n    Name: {{evo?.name}}\n  \n  maxCP: {{name?.maxCP}}\n  maxHP: {{name?.maxHP}}\n  Attacks: Fast\n  \n    Name: {{attk?.name}}\n    Type: {{attk?.type}}\n    Damage: {{attk?.damage}}\n  \n  Attacks: Special\n  \n    Name: {{attk?.name}}\n    Type: {{attk?.type}}\n    Damage: {{attk?.damage}}\n  \n\n\n  Close\n\n\n    \n\n    \n                \n                    ./modal.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  I\\'m {{name?.name}}      ×    :: Here is my specs ::     ID: {{name?.id}}  Classification: {{name?.classification}}  Types: {{name?.types}}  Resistant: {{name?.resistant}}  Weight    Minimum: {{name?.weight?.minimum}}    Maximum: {{name?.weight?.maximum}}    Height    Minimum: {{name?.height?.minimum}}    Maximum: {{name?.height?.maximum}}    FleeRate: {{name?.fleeRate}}  Evolution Requirements    Amount: {{name?.evolutionRequirements.amount}}    Name: {{name?.evolutionRequirements.name}}    Evolution      Id: {{evo?.id}}    Name: {{evo?.name}}    maxCP: {{name?.maxCP}}  maxHP: {{name?.maxHP}}  Attacks: Fast      Name: {{attk?.name}}    Type: {{attk?.type}}    Damage: {{attk?.damage}}    Attacks: Special      Name: {{attk?.name}}    Type: {{attk?.type}}    Damage: {{attk?.damage}}    Close'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ModalComponent', 'selector': 'app-modal'},{'name': 'PokemonsComponent', 'selector': 'app-pokemons'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ModalComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NewPokemon.html":{"url":"interfaces/NewPokemon.html","title":"interface - NewPokemon","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  NewPokemon\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api/models/new-pokemon.ts\n        \n\n            \n                Description\n            \n            \n                (tsType: Omit, schemaOptions: { title: 'NewPokemon', exclude: [ 'id' ] })\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        attacks\n                                \n                                \n                                            Optional\n                                        classification\n                                \n                                \n                                            Optional\n                                        evolutionRequirements\n                                \n                                \n                                            Optional\n                                        evolutions\n                                \n                                \n                                        favourite\n                                \n                                \n                                            Optional\n                                        fleeRate\n                                \n                                \n                                            Optional\n                                        height\n                                \n                                \n                                            Optional\n                                        maxCP\n                                \n                                \n                                            Optional\n                                        maxHP\n                                \n                                \n                                            Optional\n                                        name\n                                \n                                \n                                            Optional\n                                        resistant\n                                \n                                \n                                            Optional\n                                        types\n                                \n                                \n                                            Optional\n                                        weaknesses\n                                \n                                \n                                            Optional\n                                        weight\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in src/app/api/models/new-pokemon.ts:21\n                            \n                        \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        attacks\n                                    \n                                \n                                \n                                    \n                                        attacks:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        classification\n                                    \n                                \n                                \n                                    \n                                        classification:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        evolutionRequirements\n                                    \n                                \n                                \n                                    \n                                        evolutionRequirements:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        evolutions\n                                    \n                                \n                                \n                                    \n                                        evolutions:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        favourite\n                                    \n                                \n                                \n                                    \n                                        favourite:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fleeRate\n                                    \n                                \n                                \n                                    \n                                        fleeRate:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                    \n                                \n                                \n                                    \n                                        height:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxCP\n                                    \n                                \n                                \n                                    \n                                        maxCP:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxHP\n                                    \n                                \n                                \n                                    \n                                        maxHP:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        resistant\n                                    \n                                \n                                \n                                    \n                                        resistant:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        types\n                                    \n                                \n                                \n                                    \n                                        types:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        weaknesses\n                                    \n                                \n                                \n                                    \n                                        weaknesses:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        weight\n                                    \n                                \n                                \n                                    \n                                        weight:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface NewPokemon {\n  attacks?: {  };\n  classification?: string;\n  evolutionRequirements?: {  };\n  evolutions?: Array;\n  fleeRate?: number;\n  height?: {  };\n  favourite: boolean;\n  maxCP?: number;\n  maxHP?: number;\n  name?: string;\n  resistant?: Array;\n  types?: Array;\n  weaknesses?: Array;\n  weight?: {  };\n\n  [key: string]: any;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Parameter.html":{"url":"classes/Parameter.html","title":"class - Parameter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Parameter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api/request-builder.ts\n        \n\n            \n                Description\n            \n            \n                Base class for a parameter\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                options\n                            \n                            \n                                    Public\n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                serializeValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, value: any, options: ParameterOptions, defaultStyle: string, defaultExplode: boolean)\n                    \n                \n                        \n                            \n                                Defined in src/app/api/request-builder.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        ParameterOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        defaultStyle\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        defaultExplode\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/api/request-builder.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            options\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ParameterOptions\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/api/request-builder.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/api/request-builder.ts:40\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            serializeValue\n                        \n                        \n                    \n                \n            \n            \n                \nserializeValue(value: any, separator: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/api/request-builder.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    separator\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ','\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map();\n  private _query = new Map();\n  private _header = new Map();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParameterCodec.html":{"url":"classes/ParameterCodec.html","title":"class - ParameterCodec","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParameterCodec\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api/request-builder.ts\n        \n\n            \n                Description\n            \n            \n                Custom parameter codec to correctly handle the plus sign in parameter\nvalues. See https://github.com/angular/angular/issues/18261\n\n            \n\n\n            \n                Implements\n            \n            \n                            HttpParameterCodec\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                decodeKey\n                            \n                            \n                                decodeValue\n                            \n                            \n                                encodeKey\n                            \n                            \n                                encodeValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            decodeKey\n                        \n                        \n                    \n                \n            \n            \n                \ndecodeKey(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/api/request-builder.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            decodeValue\n                        \n                        \n                    \n                \n            \n            \n                \ndecodeValue(value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/api/request-builder.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            encodeKey\n                        \n                        \n                    \n                \n            \n            \n                \nencodeKey(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/api/request-builder.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            encodeValue\n                        \n                        \n                    \n                \n            \n            \n                \nencodeValue(value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/api/request-builder.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map();\n  private _query = new Map();\n  private _header = new Map();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParameterOptions.html":{"url":"interfaces/ParameterOptions.html","title":"interface - ParameterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ParameterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api/request-builder.ts\n        \n\n            \n                Description\n            \n            \n                Defines the options for appending a parameter\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        explode\n                                \n                                \n                                            Optional\n                                        style\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        explode\n                                    \n                                \n                                \n                                    \n                                        explode:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        style\n                                    \n                                \n                                \n                                    \n                                        style:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map();\n  private _query = new Map();\n  private _header = new Map();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PathParameter.html":{"url":"classes/PathParameter.html","title":"class - PathParameter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PathParameter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api/request-builder.ts\n        \n\n            \n                Description\n            \n            \n                A parameter in the operation path\n\n            \n\n            \n                Extends\n            \n            \n                        Parameter\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                options\n                            \n                            \n                                    Public\n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                append\n                            \n                            \n                                serializeValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, value: any, options: ParameterOptions)\n                    \n                \n                        \n                            \n                                Defined in src/app/api/request-builder.ts:79\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        ParameterOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Parameter\n\n                                \n                            \n                        \n                            \n                                    Defined in         Parameter:40\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            options\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ParameterOptions\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Parameter\n\n                                \n                            \n                        \n                            \n                                    Defined in         Parameter:40\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Parameter\n\n                                \n                            \n                        \n                            \n                                    Defined in         Parameter:40\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            append\n                        \n                        \n                    \n                \n            \n            \n                \nappend(path: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/api/request-builder.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            serializeValue\n                        \n                        \n                    \n                \n            \n            \n                \nserializeValue(value: any, separator: string)\n                \n            \n\n\n            \n                \n                    Inherited from         Parameter\n\n                \n            \n            \n                \n                        Defined in         Parameter:50\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    separator\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ','\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map();\n  private _query = new Map();\n  private _header = new Map();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PingControllerService.html":{"url":"injectables/PingControllerService.html","title":"injectable - PingControllerService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PingControllerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api/services/ping-controller.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        BaseService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                PingControllerPingPath\n                            \n                            \n                                    Private\n                                _rootUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ping\n                            \n                            \n                                ping$Response\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ApiConfiguration, http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/api/services/ping-controller.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        ApiConfiguration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ping\n                        \n                        \n                    \n                \n            \n            \n                \nping(params?: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/app/api/services/ping-controller.service.ts:60\n                \n            \n\n\n            \n                \n                    This method provides access to only to the response body.\nTo access the full response (for headers, for example), ping$Response() instead.\nThis method doesn't expect any request body.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ping$Response\n                        \n                        \n                    \n                \n            \n            \n                \nping$Response(params?: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/app/api/services/ping-controller.service.ts:36\n                \n            \n\n\n            \n                \n                    This method provides access to the full HttpResponse, allowing access to response headers.\nTo access only the response body, use ping() instead.\nThis method doesn't expect any request body.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            PingControllerPingPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '/ping'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/api/services/ping-controller.service.ts:28\n                            \n                        \n\n                \n                    \n                        Path part for operation pingControllerPing\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _rootUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'http://localhost:3000/'\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseService\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseService:17\n\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { PingResponse } from '../models/ping-response';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PingControllerService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation pingControllerPing\n   */\n  static readonly PingControllerPingPath = '/ping';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `ping()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  ping$Response(params?: {\n  }): Observable> {\n\n    const rb = new RequestBuilder(this.rootUrl, PingControllerService.PingControllerPingPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse) => {\n        return r as StrictHttpResponse;\n      })\n    );\n  }\n\n  /**\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `ping$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  ping(params?: {\n  }): Observable {\n\n    return this.ping$Response(params).pipe(\n      map((r: StrictHttpResponse) => r.body as PingResponse)\n    );\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PingResponse.html":{"url":"interfaces/PingResponse.html","title":"interface - PingResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PingResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api/models/ping-response.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        date\n                                \n                                \n                                            Optional\n                                        greeting\n                                \n                                \n                                            Optional\n                                        headers\n                                \n                                \n                                            Optional\n                                        url\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        greeting\n                                    \n                                \n                                \n                                    \n                                        greeting:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                    \n                                \n                                \n                                    \n                                        headers:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface PingResponse {\n  date?: string;\n  greeting?: string;\n  headers?: { 'Content-Type'?: string, [key: string]: any };\n  url?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Pokemon.html":{"url":"interfaces/Pokemon.html","title":"interface - Pokemon","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Pokemon\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api/models/pokemon.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        attacks\n                                \n                                \n                                            Optional\n                                        classification\n                                \n                                \n                                            Optional\n                                        evolutionRequirements\n                                \n                                \n                                            Optional\n                                        evolutions\n                                \n                                \n                                        favourite\n                                \n                                \n                                            Optional\n                                        fleeRate\n                                \n                                \n                                            Optional\n                                        height\n                                \n                                \n                                        id\n                                \n                                \n                                            Optional\n                                        maxCP\n                                \n                                \n                                            Optional\n                                        maxHP\n                                \n                                \n                                            Optional\n                                        name\n                                \n                                \n                                            Optional\n                                        resistant\n                                \n                                \n                                            Optional\n                                        types\n                                \n                                \n                                            Optional\n                                        weaknesses\n                                \n                                \n                                            Optional\n                                        weight\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in src/app/api/models/pokemon.ts:18\n                            \n                        \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        attacks\n                                    \n                                \n                                \n                                    \n                                        attacks:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        classification\n                                    \n                                \n                                \n                                    \n                                        classification:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        evolutionRequirements\n                                    \n                                \n                                \n                                    \n                                        evolutionRequirements:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        evolutions\n                                    \n                                \n                                \n                                    \n                                        evolutions:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        favourite\n                                    \n                                \n                                \n                                    \n                                        favourite:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fleeRate\n                                    \n                                \n                                \n                                    \n                                        fleeRate:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                    \n                                \n                                \n                                    \n                                        height:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxCP\n                                    \n                                \n                                \n                                    \n                                        maxCP:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxHP\n                                    \n                                \n                                \n                                    \n                                        maxHP:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        resistant\n                                    \n                                \n                                \n                                    \n                                        resistant:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        types\n                                    \n                                \n                                \n                                    \n                                        types:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        weaknesses\n                                    \n                                \n                                \n                                    \n                                        weaknesses:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        weight\n                                    \n                                \n                                \n                                    \n                                        weight:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Pokemon {\n  attacks?: {  };\n  classification?: string;\n  evolutionRequirements?: {  };\n  evolutions?: Array;\n  fleeRate?: number;\n  height?: {  };\n  id: string;\n  favourite: boolean;\n  maxCP?: number;\n  maxHP?: number;\n  name?: string;\n  resistant?: Array;\n  types?: Array;\n  weaknesses?: Array;\n  weight?: {  };\n\n  [key: string]: any;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PokemonPartial.html":{"url":"interfaces/PokemonPartial.html","title":"interface - PokemonPartial","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PokemonPartial\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api/models/pokemon-partial.ts\n        \n\n            \n                Description\n            \n            \n                (tsType: Partial, schemaOptions: { partial: true })\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        attacks\n                                \n                                \n                                            Optional\n                                        classification\n                                \n                                \n                                            Optional\n                                        evolutionRequirements\n                                \n                                \n                                            Optional\n                                        evolutions\n                                \n                                \n                                            Optional\n                                        favourite\n                                \n                                \n                                            Optional\n                                        fleeRate\n                                \n                                \n                                            Optional\n                                        height\n                                \n                                \n                                            Optional\n                                        id\n                                \n                                \n                                            Optional\n                                        maxCP\n                                \n                                \n                                            Optional\n                                        maxHP\n                                \n                                \n                                            Optional\n                                        name\n                                \n                                \n                                            Optional\n                                        resistant\n                                \n                                \n                                            Optional\n                                        types\n                                \n                                \n                                            Optional\n                                        weaknesses\n                                \n                                \n                                            Optional\n                                        weight\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in src/app/api/models/pokemon-partial.ts:22\n                            \n                        \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        attacks\n                                    \n                                \n                                \n                                    \n                                        attacks:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        classification\n                                    \n                                \n                                \n                                    \n                                        classification:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        evolutionRequirements\n                                    \n                                \n                                \n                                    \n                                        evolutionRequirements:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        evolutions\n                                    \n                                \n                                \n                                    \n                                        evolutions:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        favourite\n                                    \n                                \n                                \n                                    \n                                        favourite:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fleeRate\n                                    \n                                \n                                \n                                    \n                                        fleeRate:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                    \n                                \n                                \n                                    \n                                        height:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxCP\n                                    \n                                \n                                \n                                    \n                                        maxCP:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxHP\n                                    \n                                \n                                \n                                    \n                                        maxHP:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        resistant\n                                    \n                                \n                                \n                                    \n                                        resistant:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        types\n                                    \n                                \n                                \n                                    \n                                        types:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        weaknesses\n                                    \n                                \n                                \n                                    \n                                        weaknesses:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        weight\n                                    \n                                \n                                \n                                    \n                                        weight:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface PokemonPartial {\n  attacks?: {  };\n  classification?: string;\n  evolutionRequirements?: {  };\n  evolutions?: Array;\n  fleeRate?: number;\n  height?: {  };\n  id?: string;\n  favourite?: boolean;\n  maxCP?: number;\n  maxHP?: number;\n  name?: string;\n  resistant?: Array;\n  types?: Array;\n  weaknesses?: Array;\n  weight?: {  };\n\n  [key: string]: any;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PokemonWithRelations.html":{"url":"interfaces/PokemonWithRelations.html","title":"interface - PokemonWithRelations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PokemonWithRelations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api/models/pokemon-with-relations.ts\n        \n\n            \n                Description\n            \n            \n                (tsType: PokemonWithRelations, schemaOptions: { includeRelations: true })\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        attacks\n                                \n                                \n                                            Optional\n                                        classification\n                                \n                                \n                                            Optional\n                                        evolutionRequirements\n                                \n                                \n                                            Optional\n                                        evolutions\n                                \n                                \n                                        favourite\n                                \n                                \n                                            Optional\n                                        fleeRate\n                                \n                                \n                                            Optional\n                                        height\n                                \n                                \n                                        id\n                                \n                                \n                                            Optional\n                                        maxCP\n                                \n                                \n                                            Optional\n                                        maxHP\n                                \n                                \n                                            Optional\n                                        name\n                                \n                                \n                                            Optional\n                                        resistant\n                                \n                                \n                                            Optional\n                                        types\n                                \n                                \n                                            Optional\n                                        weaknesses\n                                \n                                \n                                            Optional\n                                        weight\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in src/app/api/models/pokemon-with-relations.ts:22\n                            \n                        \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        attacks\n                                    \n                                \n                                \n                                    \n                                        attacks:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        classification\n                                    \n                                \n                                \n                                    \n                                        classification:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        evolutionRequirements\n                                    \n                                \n                                \n                                    \n                                        evolutionRequirements:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        evolutions\n                                    \n                                \n                                \n                                    \n                                        evolutions:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        favourite\n                                    \n                                \n                                \n                                    \n                                        favourite:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fleeRate\n                                    \n                                \n                                \n                                    \n                                        fleeRate:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                    \n                                \n                                \n                                    \n                                        height:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxCP\n                                    \n                                \n                                \n                                    \n                                        maxCP:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxHP\n                                    \n                                \n                                \n                                    \n                                        maxHP:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        resistant\n                                    \n                                \n                                \n                                    \n                                        resistant:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        types\n                                    \n                                \n                                \n                                    \n                                        types:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        weaknesses\n                                    \n                                \n                                \n                                    \n                                        weaknesses:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        weight\n                                    \n                                \n                                \n                                    \n                                        weight:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface PokemonWithRelations {\n  attacks?: {  };\n  classification?: string;\n  evolutionRequirements?: {  };\n  evolutions?: Array;\n  fleeRate?: number;\n  height?: {  };\n  id: string;\n  favourite: boolean;\n  maxCP?: number;\n  maxHP?: number;\n  name?: string;\n  resistant?: Array;\n  types?: Array;\n  weaknesses?: Array;\n  weight?: {  };\n\n  [key: string]: any;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PokemonsComponent.html":{"url":"components/PokemonsComponent.html","title":"component - PokemonsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  PokemonsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pokemons/pokemons.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-pokemons\n            \n\n            \n                styleUrls\n                ./pokemons.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./pokemons.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                button\n                            \n                            \n                                createPokemon\n                            \n                            \n                                    Public\n                                currentRecords\n                            \n                            \n                                    Private\n                                filterOrder\n                            \n                            \n                                    Public\n                                initialPagination\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                nrOfRecords\n                            \n                            \n                                pokemons\n                            \n                            \n                                    Public\n                                pokemonService\n                            \n                            \n                                    Public\n                                skipRecords\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createPokemons\n                            \n                            \n                                deleteAll\n                            \n                            \n                                filterBy\n                            \n                            \n                                getPokemons\n                            \n                            \n                                getPokemonsById\n                            \n                            \n                                getPokemonsCount\n                            \n                            \n                                getPokemonsWithPagination\n                            \n                            \n                                makeItFavourite\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                open\n                            \n                            \n                                refresh\n                            \n                            \n                                searchBy\n                            \n                            \n                                updatePokemon\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(pokemonService: PokemonControllerService, modalService: NgbModal)\n                    \n                \n                        \n                            \n                                Defined in src/app/pokemons/pokemons.component.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pokemonService\n                                                  \n                                                        \n                                                                        PokemonControllerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        modalService\n                                                  \n                                                        \n                                                                    NgbModal\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createPokemons\n                        \n                        \n                    \n                \n            \n            \n                \ncreatePokemons()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pokemons/pokemons.component.ts:165\n                \n            \n\n\n            \n                \n                    Method to create a new pokemon\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteAll\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteAll()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pokemons/pokemons.component.ts:56\n                \n            \n\n\n            \n                \n                    Method to delete all records on database\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            filterBy\n                        \n                        \n                    \n                \n            \n            \n                \nfilterBy(type: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pokemons/pokemons.component.ts:132\n                \n            \n\n\n            \n                \n                    Method to filter pokemon by type\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : {string} - The type characteristic of pokemon to be search\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPokemons\n                        \n                        \n                    \n                \n            \n            \n                \ngetPokemons()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pokemons/pokemons.component.ts:47\n                \n            \n\n\n            \n                \n                    Method to get all pokemons into a object array\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPokemonsById\n                        \n                        \n                    \n                \n            \n            \n                \ngetPokemonsById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pokemons/pokemons.component.ts:111\n                \n            \n\n\n            \n                \n                    Method to get pokemon by its id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : {string} - Id of the desired pokemon\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPokemonsCount\n                        \n                        \n                    \n                \n            \n            \n                \ngetPokemonsCount()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pokemons/pokemons.component.ts:69\n                \n            \n\n\n            \n                \n                    Method to count the number of records into database\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPokemonsWithPagination\n                        \n                        \n                    \n                \n            \n            \n                \ngetPokemonsWithPagination()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pokemons/pokemons.component.ts:82\n                \n            \n\n\n            \n                \n                    Method to get pokemons using pagination\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            makeItFavourite\n                        \n                        \n                    \n                \n            \n            \n                \nmakeItFavourite(element: EventTarget, mark: string, pokemonId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pokemons/pokemons.component.ts:154\n                \n            \n\n\n            \n                \n                    Method to toggle a pokemon as favourite\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    element\n                                    \n                                            EventTarget\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : {ElementTarget} - The selected element\n\n                                    \n                                \n                                \n                                    mark\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : {string} - The string to be shown\n\n                                    \n                                \n                                \n                                    pokemonId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : {string} - Id of the pokemon to be (u)selected as favourite\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pokemons/pokemons.component.ts:203\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pokemons/pokemons.component.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            open\n                        \n                        \n                    \n                \n            \n            \n                \nopen(dataPok: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pokemons/pokemons.component.ts:37\n                \n            \n\n\n            \n                \n                    Method to open a modal with pokemon information\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataPok\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : {any} - data array of pokemons\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            refresh\n                        \n                        \n                    \n                \n            \n            \n                \nrefresh()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pokemons/pokemons.component.ts:199\n                \n            \n\n\n            \n                \n                    Method to refresh the window\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            searchBy\n                        \n                        \n                    \n                \n            \n            \n                \nsearchBy(type: string, text: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pokemons/pokemons.component.ts:122\n                \n            \n\n\n            \n                \n                    Method to search pokemons by its types\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : {string} - The type value to be search\n\n                                    \n                                \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : {string} - The text to be found}\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updatePokemon\n                        \n                        \n                    \n                \n            \n            \n                \nupdatePokemon(id: string, value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pokemons/pokemons.component.ts:101\n                \n            \n\n\n            \n                \n                    Method to handle pokemon as favourite\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : {string} -Id of the pokemon to be selected\n\n                                    \n                                \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : {boolean} - The value to set if the current pokemon should be true or false\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            button\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/pokemons/pokemons.component.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createPokemon\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Pokemon\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pokemons/pokemons.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            currentRecords\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pokemons/pokemons.component.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            filterOrder\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ASC'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pokemons/pokemons.component.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            initialPagination\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pokemons/pokemons.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pokemons/pokemons.component.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            nrOfRecords\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pokemons/pokemons.component.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pokemons\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pokemons/pokemons.component.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            pokemonService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PokemonControllerService\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pokemons/pokemons.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            skipRecords\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pokemons/pokemons.component.ts:18\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {Pokemon} from '../api/models/pokemon';\nimport {PokemonControllerService} from '../api/services/pokemon-controller.service';\nimport {NgbModal} from '@ng-bootstrap/ng-bootstrap';\nimport {ModalComponent} from '../modal/modal.component';\nimport PokemonImg from 'pokemon-images';\n\n@Component({\n  selector: 'app-pokemons',\n  templateUrl: './pokemons.component.html',\n  styleUrls: ['./pokemons.component.scss']\n})\nexport class PokemonsComponent implements OnInit, OnDestroy {\n  private filterOrder = 'ASC';\n\n  public button;\n  public currentRecords = 10;\n  public skipRecords = 0;\n  public name: string;\n  public nrOfRecords: number;\n  public initialPagination = true;\n\n  constructor(public pokemonService: PokemonControllerService, private modalService: NgbModal) {\n  }\n\n  pokemons: any;\n  createPokemon: Pokemon;\n\n  ngOnInit(): void {\n    this.getPokemonsCount();\n  }\n\n  /**\n   * Method to open a modal with pokemon information\n   * @param dataPok: {any} - data array of pokemons\n   */\n  open(dataPok: any) {\n    const nameOfPokemon = dataPok.name.toLowerCase();\n    dataPok.url = PokemonImg.getSprite(nameOfPokemon);\n    const modalRef = this.modalService.open(ModalComponent);\n    modalRef.componentInstance.name = dataPok;\n  }\n\n  /**\n   * Method to get all pokemons into a object array\n   */\n  getPokemons() {\n    this.pokemonService.find().subscribe(pokemons => {\n      this.pokemons = pokemons;\n    });\n  }\n\n  /**\n   * Method to delete all records on database\n   */\n  deleteAll(): void {\n    this.pokemonService.find().subscribe(pokemons => {\n      this.pokemons = pokemons;\n      this.pokemons.forEach(pokemon => {\n        this.pokemonService.deleteById({id: pokemon.id}).subscribe();\n      });\n      this.pokemonService.fillDatabase();\n    });\n  }\n\n  /**\n   * Method to count the number of records into database\n   */\n  getPokemonsCount(): void {\n    this.pokemonService.count().subscribe(nrPokemons => {\n      this.nrOfRecords = nrPokemons.count;\n      if (this.nrOfRecords  {\n      this.pokemons = pokemons;\n      this.initialPagination = false;\n    });\n  }\n\n  /**\n   * Method to handle pokemon as favourite\n   * @param id: {string} -Id of the pokemon to be selected\n   * @param value: {boolean} - The value to set if the current pokemon should be true or false\n   */\n  updatePokemon(id: string, value: boolean) {\n    this.pokemonService.updateById({id, body: {favourite: value}}).subscribe(res => {\n      console.log(res);\n    });\n  }\n\n  /**\n   * Method to get pokemon by its id\n   * @param id: {string} - Id of the desired pokemon\n   */\n  getPokemonsById(id: string): void {\n    this.pokemonService.findById({id}).subscribe(pokemon => {\n      this.pokemons = [pokemon];\n    });\n  }\n\n  /**\n   * Method to search pokemons by its types\n   * @param type: {string} - The type value to be search\n   * @param text: {string} - The text to be found}\n   */\n  searchBy(type: string, text: string) {\n    this.pokemonService.searchBy(type, text).subscribe(result => {\n      this.pokemons = result;\n    });\n  }\n\n  /**\n   * Method to filter pokemon by type\n   * @param type: {string} - The type characteristic of pokemon to be search\n   */\n  filterBy(type: string) {\n    if (this.filterOrder === 'ASC') {\n      this.pokemonService.filterBy(type, 'ASC').subscribe(result => {\n        this.pokemons = result;\n        this.filterOrder = 'DESC';\n      });\n    }\n\n    if (this.filterOrder === 'DESC') {\n      this.pokemonService.filterBy(type, 'DESC').subscribe(result => {\n        this.pokemons = result;\n        this.filterOrder = 'ASC';\n      });\n    }\n  }\n\n  /**\n   * Method to toggle a pokemon as favourite\n   * @param element: {ElementTarget} - The selected element\n   * @param mark: {string} - The string to be shown\n   * @param pokemonId: {string} - Id of the pokemon to be (u)selected as favourite\n   */\n  makeItFavourite(element: EventTarget, mark: string, pokemonId: string) {\n    if (mark === 'mark') {\n      this.button = element;\n      this.button.textContent = 'I am your favourite';\n      this.updatePokemon(pokemonId, true);\n    }\n  }\n\n  /**\n   * Method to create a new pokemon\n   */\n  createPokemons(): void {\n    let newPokemon: Pokemon;\n    newPokemon = {\n      id: 'angular',\n      name: 'ewefwef',\n      classification: 'string',\n      types: [\n        'string'\n      ],\n      resistant: [\n        'string'\n      ],\n      weaknesses: [\n        'string'\n      ],\n      weight: {},\n      height: {},\n      fleeRate: 0,\n      evolutionRequirements: {},\n      evolutions: [\n        {}\n      ],\n      favourite: false,\n      maxCP: 0,\n      maxHP: 0,\n      attacks: {},\n      additionalProp1: {}\n    };\n    this.pokemonService.create({body: newPokemon}).subscribe(res => console.log(res));\n  }\n\n  /**\n   * Method to refresh the window\n   */\n  refresh(): void {\n    window.location.reload();\n  }\n\n  ngOnDestroy() {\n  }\n}\n\n    \n\n    \n        \nFind by ID\n\n\nFind by Name\n\nFilter by Type\nFilter by Favourite\nReload / Reset\n\n\n  \n  \n    ID\n    Name\n    Type\n    Details\n    Favourite\n  \n  \n  \n  \n    {{pokemon.id}}\n    {{pokemon.name}}\n    {{pokemon.types}}\n    \n      View\n    \n    \n      I am your\n        favourite\n      \n      Im NOT\n        Favourite\n      \n    \n  \n  \n\n{{this.currentRecords}} of total {{this.nrOfRecords}}Load more\n\n    \n\n    \n                \n                    ./pokemons.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Find by IDFind by NameFilter by TypeFilter by FavouriteReload / Reset        ID    Name    Type    Details    Favourite            {{pokemon.id}}    {{pokemon.name}}    {{pokemon.types}}          View              I am your        favourite            Im NOT        Favourite              {{this.currentRecords}} of total {{this.nrOfRecords}}Load more'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ModalComponent', 'selector': 'app-modal'},{'name': 'PokemonsComponent', 'selector': 'app-pokemons'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'PokemonsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryParameter.html":{"url":"classes/QueryParameter.html","title":"class - QueryParameter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryParameter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api/request-builder.ts\n        \n\n            \n                Description\n            \n            \n                A parameter in the query\n\n            \n\n            \n                Extends\n            \n            \n                        Parameter\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                options\n                            \n                            \n                                    Public\n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                append\n                            \n                            \n                                serializeValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, value: any, options: ParameterOptions)\n                    \n                \n                        \n                            \n                                Defined in src/app/api/request-builder.ts:117\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        ParameterOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Parameter\n\n                                \n                            \n                        \n                            \n                                    Defined in         Parameter:40\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            options\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ParameterOptions\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Parameter\n\n                                \n                            \n                        \n                            \n                                    Defined in         Parameter:40\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Parameter\n\n                                \n                            \n                        \n                            \n                                    Defined in         Parameter:40\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            append\n                        \n                        \n                    \n                \n            \n            \n                \nappend(params: HttpParams)\n                \n            \n\n\n            \n                \n                    Defined in src/app/api/request-builder.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                HttpParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         HttpParams\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            serializeValue\n                        \n                        \n                    \n                \n            \n            \n                \nserializeValue(value: any, separator: string)\n                \n            \n\n\n            \n                \n                    Inherited from         Parameter\n\n                \n            \n            \n                \n                        Defined in         Parameter:50\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    separator\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ','\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map();\n  private _query = new Map();\n  private _header = new Map();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RequestBuilder.html":{"url":"classes/RequestBuilder.html","title":"class - RequestBuilder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RequestBuilder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api/request-builder.ts\n        \n\n            \n                Description\n            \n            \n                Helper to build http requests from parameters\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _bodyContent\n                            \n                            \n                                    Optional\n                                _bodyContentType\n                            \n                            \n                                    Private\n                                _header\n                            \n                            \n                                    Private\n                                _path\n                            \n                            \n                                    Private\n                                _query\n                            \n                            \n                                    Public\n                                method\n                            \n                            \n                                    Public\n                                operationPath\n                            \n                            \n                                    Public\n                                rootUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                body\n                            \n                            \n                                build\n                            \n                            \n                                    Private\n                                formDataValue\n                            \n                            \n                                header\n                            \n                            \n                                path\n                            \n                            \n                                query\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rootUrl: string, operationPath: string, method: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/api/request-builder.ts:204\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rootUrl\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        operationPath\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        method\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            _bodyContent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any | null\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/api/request-builder.ts:203\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            _bodyContentType\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/api/request-builder.ts:204\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _header\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/api/request-builder.ts:202\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _path\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/api/request-builder.ts:200\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _query\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/api/request-builder.ts:201\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            method\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/api/request-builder.ts:209\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            operationPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/api/request-builder.ts:208\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            rootUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/api/request-builder.ts:207\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            body\n                        \n                        \n                    \n                \n            \n            \n                \nbody(value: any, contentType: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/api/request-builder.ts:236\n                \n            \n\n\n            \n                \n                    Sets the body content, along with the content type\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    contentType\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'application/json'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            build\n                        \n                        \n                    \n                \n            \n            \n                \nbuild(options?: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/app/api/request-builder.ts:302\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Builds the request with the current set parameters\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     HttpRequest\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            formDataValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    formDataValue(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/api/request-builder.ts:286\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            header\n                        \n                        \n                    \n                \n            \n            \n                \nheader(name: string, value: any, options?: ParameterOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/app/api/request-builder.ts:229\n                \n            \n\n\n            \n                \n                    Sets a header parameter\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ParameterOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            path\n                        \n                        \n                    \n                \n            \n            \n                \npath(name: string, value: any, options?: ParameterOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/app/api/request-builder.ts:215\n                \n            \n\n\n            \n                \n                    Sets a path parameter\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ParameterOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            query\n                        \n                        \n                    \n                \n            \n            \n                \nquery(name: string, value: any, options?: ParameterOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/app/api/request-builder.ts:222\n                \n            \n\n\n            \n                \n                    Sets a query parameter\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ParameterOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map();\n  private _query = new Map();\n  private _header = new Map();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                e2e/src/app.po.ts\n            \n            class\n            AppPage\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/api.service.ts\n            \n            injectable\n            ApiService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/api/api-configuration.ts\n            \n            injectable\n            ApiConfiguration\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/api/api-configuration.ts\n            \n            interface\n            ApiConfigurationParams\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/api/base-service.ts\n            \n            injectable\n            BaseService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/api/models/loopback/count.ts\n            \n            interface\n            Count\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/api/models/new-pokemon.ts\n            \n            interface\n            NewPokemon\n            \n                6 %\n                (1/15)\n            \n        \n        \n            \n                \n                src/app/api/models/ping-response.ts\n            \n            interface\n            PingResponse\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/api/models/pokemon-partial.ts\n            \n            interface\n            PokemonPartial\n            \n                6 %\n                (1/16)\n            \n        \n        \n            \n                \n                src/app/api/models/pokemon-with-relations.ts\n            \n            interface\n            PokemonWithRelations\n            \n                6 %\n                (1/16)\n            \n        \n        \n            \n                \n                src/app/api/models/pokemon.ts\n            \n            interface\n            Pokemon\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/app/api/request-builder.ts\n            \n            class\n            HeaderParameter\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/app/api/request-builder.ts\n            \n            class\n            Parameter\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/app/api/request-builder.ts\n            \n            class\n            ParameterCodec\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/api/request-builder.ts\n            \n            class\n            PathParameter\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/app/api/request-builder.ts\n            \n            class\n            QueryParameter\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/app/api/request-builder.ts\n            \n            class\n            RequestBuilder\n            \n                37 %\n                (6/16)\n            \n        \n        \n            \n                \n                src/app/api/request-builder.ts\n            \n            interface\n            ParameterOptions\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/api/request-builder.ts\n            \n            variable\n            ParameterCodecInstance\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/api/services/ping-controller.service.ts\n            \n            injectable\n            PingControllerService\n            \n                50 %\n                (3/6)\n            \n        \n        \n            \n                \n                src/app/api/services/pokemon-controller.service.ts\n            \n            injectable\n            PokemonControllerService\n            \n                77 %\n                (24/31)\n            \n        \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/modal/modal.component.ts\n            \n            component\n            ModalComponent\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/pokemons/pokemons.component.ts\n            \n            component\n            PokemonsComponent\n            \n                46 %\n                (12/26)\n            \n        \n        \n            \n                \n                src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/environments/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test.ts\n            \n            variable\n            context\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test.ts\n            \n            variable\n            require\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~9.1.11\n        \n            @angular/common : ~9.1.11\n        \n            @angular/compiler : ~9.1.11\n        \n            @angular/core : ~9.1.11\n        \n            @angular/forms : ~9.1.11\n        \n            @angular/localize : ^9.1.13\n        \n            @angular/platform-browser : ~9.1.11\n        \n            @angular/platform-browser-dynamic : ~9.1.11\n        \n            @angular/router : ~9.1.11\n        \n            @ng-bootstrap/ng-bootstrap : ^9.1.1\n        \n            ag-grid-angular : ^25.3.0\n        \n            ag-grid-community : ^25.3.0\n        \n            bootstrap : ^5.0.1\n        \n            jquery : ^3.6.0\n        \n            pokemon-images : ^2.0.1\n        \n            rxjs : ~6.5.4\n        \n            tabulator-tables : ^4.9.3\n        \n            tslib : ^1.10.0\n        \n            zone.js : ~0.10.2\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nPokemonApp\nThis project was generated with Angular CLI version 9.1.8.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI README.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ApiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ApiModule\n\n\n\ncluster_ApiModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nApiConfiguration\n\nApiConfiguration\n\n\n\nApiModule\n\nApiModule\n\nApiModule -->\n\nApiConfiguration->ApiModule\n\n\n\n\n\nPingControllerService\n\nPingControllerService\n\nApiModule -->\n\nPingControllerService->ApiModule\n\n\n\n\n\nPokemonControllerService\n\nPokemonControllerService\n\nApiModule -->\n\nPokemonControllerService->ApiModule\n\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nModalComponent\n\nModalComponent\n\nAppModule -->\n\nModalComponent->AppModule\n\n\n\n\n\nPokemonsComponent\n\nPokemonsComponent\n\nAppModule -->\n\nPokemonsComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Components\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    8 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            StrictHttpResponse   (src/.../strict-http-response.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/api/strict-http-response.ts\n    \n    \n        \n            \n                \n                    \n                    StrictHttpResponse\n                \n            \n            \n                \n                    Constrains the http response to not have the body defined as T | null, but T only.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            context   (src/.../test.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            ParameterCodecInstance   (src/.../request-builder.ts)\n                        \n                        \n                            require   (src/.../test.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/test.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            context\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require.context('./', true, /\\.spec\\.ts$/)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            require\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: true\n}\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: false\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/api/request-builder.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ParameterCodecInstance\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new ParameterCodec()\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
